<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目四：简易仓管</title>
      <link href="/2021/08/11/%E9%A1%B9%E7%9B%AE%E5%9B%9B%EF%BC%9A%E7%AE%80%E6%98%93%E4%BB%93%E7%AE%A1/"/>
      <url>/2021/08/11/%E9%A1%B9%E7%9B%AE%E5%9B%9B%EF%BC%9A%E7%AE%80%E6%98%93%E4%BB%93%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><p>完成一个txt文件上传，取出其中有用的数据，存入数据库，并且记录带有excel下载功能。</p><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p><strong>1、了解服务器原理、了解nodejs、了解mongodb数据库</strong><br>服务器原理时帮助理解，nodejs作为这次的后台开发语言，其必须要详细的了解其作用和用法，mogodb数据库也是数据处理和保存的工具。</p><p><strong>2、如何启动服务器</strong><br>这次使用的是HTTP方式的服务器，下载nodejs，使用HTTP写法写出一个app.js文件用来监听和处理前端发送的请求。</p><p><strong>3、完成后台对前端所有页面的渲染</strong></p><p><strong>4、使用mongodb数据库进行读写，使用txt、excel文件进行读写</strong></p><p><strong>5、编写完整的后台使用逻辑</strong></p><h2 id="项目结果"><a href="#项目结果" class="headerlink" title="项目结果"></a>项目结果</h2><p>完成了预想的其基本功能，并增加了其它一些新鲜元素。</p><div class="MV"><br>    <video controls autoplay loop><br>      <source src="/mv/login.ogg" type="video/ogg"><br>      <source src="/mv/login.mp4" type="video/mp4"><br>      <source src="/mv/login.webm" type="video/webm"><br>      <object data="/mv/login.mp4" width="320" height="240"><br>        <embed width="320" height="240" src="/mv/login.swf"><br>      </object><br>    </video><br></div><h2 id="项目参考书"><a href="#项目参考书" class="headerlink" title="项目参考书"></a>项目参考书</h2><p>《HTML入门》</p><h2 id="项目收获"><a href="#项目收获" class="headerlink" title="项目收获"></a>项目收获</h2><p> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="#" target="_blank">Nodejs</a><br> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="#" target="_blank">MongoDB</a></p><style type="text/css">    /* don't remove. */    .content{    margin: 50px 0 0 0;    }    .about-cover {        height: 75vh;    }    .theme{        width: 100%;        height: 50px;        text-align: center;    }    .theme text{        font-size: 26px;     }    .headline{        width: auto;        overflow: auto;        height: auto;        text-align: center;    }    .headline text{                font-size: 16px;        color: #24586B;        font-family: "等线 light"        }    .one_link1{        width: auto;        height: 30px;        border: 2px solid #DDEFF4;        border-radius: 5px;        line-height: 25px;        text-align: center;        color: #000;        background: #DDEFF4;        font-size: 18px;        box-shadow: 1px 2px 5px #888888;    }    .MV{        width: 100%; background: #000;        height: 0;        position:relative;        padding-bottom: 56.25%;    }    .MV video{        position: absolute;        top: 0;        left: 0;        width: 100%;        height: 100%;    }</style><script type="text/javascript">    function afterBorder(x){         x.style.border="5px solid #A43749";         x.style.color="#fff";         x.style.background="#A43749";        }    function beforeBorder1(x){         x.style.border="2px solid #DDEFF4";         x.style.color="#000";         x.style.background="#DDEFF4";    }    function beforeBorder2(x){         x.style.border="2px solid #F4DDE2";         x.style.color="#000";         x.style.background="#F4DDE2";    }    function beforeBorder3(x){         x.style.border="2px solid #F1EED5";         x.style.color="#000";         x.style.background="#F1EED5";    }    function beforeBorder4(x){         x.style.border="2px solid #D1F0E2";         x.style.color="#000";         x.style.background="#D1F0E2";    }</script><main class="content"><br>    <div id="aboutme" class="container about-container"><br>        <div class="card"><br>            <div class="card-content"><br>                <div class="row"><br><br>                      <div class="theme"> <text>项目总结</text> </div><br><br>                      <div class="headline"><br>                          <text><br>                            基本入门了服务器编程，学会了使用Nodejs、MongoDB数据库，作用不大，但满足了我的好奇心。<br>                          </text><br><br>                      </div><br>                </div><br>            </div><br>        </div><br>    </div><br></main>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB.</title>
      <link href="/2021/06/05/ModngoDB%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/06/05/ModngoDB%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="mongoDB是什么"><a href="#mongoDB是什么" class="headerlink" title="mongoDB是什么"></a>mongoDB是什么</h2><p>MongoDB 是通用、基于文档的分布式数据库，帮助现代应用程序开发人员迎接云时代的到来。</p><p>官网：<a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a><br>官网还提供各种支持语言的教程和快速使用教程</p><p><strong>特点：</strong></p><ul><li>NoSQL数据类型</li><li><strong>大数据量、多种类</strong>处理</li><li><strong>高并发</strong></li><li>隔离性</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><font color="#008000">安装包在指定目录下安装，安装成功后需要手动配置Path全局变量。<br>之后再cmd中输入<code>mongo</code>，查看是否可以启动。<br>安装好后，在任意盘的根目录下，新建x:\mongodb  文件夹</font><p><strong>cmd下开启mongodb服务：</strong></p><blockquote><p>mongod –dbpath x:\mongodb</p></blockquote><p>另外打开cmd，数据库本地连接：</p><blockquote><p>mongo</p></blockquote><p>远程连接：</p><blockquote><p>mongo  IP：端口号</p></blockquote><pre><code>                            表          |   &gt;&gt;&gt;&gt;&gt;&gt;       user     &gt;&gt;&gt;&gt;&gt;&gt;      用户1、2、3、4    数据库 |   &gt;&gt;&gt;&gt;&gt;&gt;       admmin   &gt;&gt;&gt;&gt;&gt;&gt;      管理员1、2、3          |   &gt;&gt;&gt;&gt;&gt;&gt;       article  &gt;&gt;&gt;&gt;&gt;&gt;      文章1、2、3</code></pre><h4 id="创建表-cmd"><a href="#创建表-cmd" class="headerlink" title="创建表( cmd )"></a>创建表( cmd )</h4><p>use xxxx   先声明我要使用xxxx<br>db.user.insert({“name”:”zhangni”,”age”:20})   直接插入数据</p><h3 id="数据库备份还原"><a href="#数据库备份还原" class="headerlink" title="数据库备份还原"></a>数据库备份还原</h3><p><font color="#FF3E96"><strong>备份</strong></font></p><blockquote><p>mongodump -h 127.0.0.1 -d 数据库名 -o 导出地址</p></blockquote><p><font color="#FF3E96"><strong>还原</strong></font></p><blockquote><p>mongorestore -h 127.0.0.1 -d 数据库名 备份的地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/2021/05/30/nodejs/"/>
      <url>/2021/05/30/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-js概述"><a href="#Node-js概述" class="headerlink" title="Node.js概述"></a>Node.js概述</h2><p>有句话说叫：“<strong>能用JS解决的事情，最后都会用JS去解决。</strong>”，JS的强大可见一斑。<br><strong>node.js的官网</strong>：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><strong>node.js的中文手册</strong>：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a><br><strong>CNODE社区</strong>：<a href="http://cnodejs.org" target="_blank" rel="noopener">http://cnodejs.org</a></p><h3 id="使用NVM"><a href="#使用NVM" class="headerlink" title="使用NVM"></a>使用NVM</h3><p>使用NVM可以轻松的<strong><code>更换Nodejs的版本</code></strong>。<br><strong>下载地址</strong>：<a href="https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases/tag/1.1.7</a><br>下载可安装到随机目路。<br>在cmd上打出：nvm，测试有无版本号出现，若无电脑重启一次再试。<br><strong>部分指令</strong>：</p><pre class=" language-javascript"><code class="language-javascript">nvm list             <span class="token comment" spellcheck="true">// 显示已安装的版本（同 nvm list installed）</span>nvm list installed   <span class="token comment" spellcheck="true">// 显示已安装的版本</span>nvm list available   <span class="token comment" spellcheck="true">// 显示所有可以下载的版本</span>nvm install <span class="token number">14.5</span><span class="token punctuation">.</span><span class="token number">0</span>      <span class="token comment" spellcheck="true">// 安装14.5.0版本node</span>nvm install latest   <span class="token comment" spellcheck="true">// 安装最新版本node</span>nvm use <span class="token number">14.5</span><span class="token punctuation">.</span><span class="token number">0</span>       <span class="token comment" spellcheck="true">// 使用14.5.0版本node</span>nvm uninstall <span class="token number">14.5</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// 卸载14.5.0版本node</span>nvm arch ：显示node是运行在<span class="token number">32</span>位还是<span class="token number">64</span>位系统上的nvm on <span class="token comment" spellcheck="true">// 开启nodejs版本管理</span>nvm off <span class="token comment" spellcheck="true">// 关闭nodejs版本管理</span>nvm proxy <span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</span>nvm node_mirror <span class="token punctuation">[</span>url<span class="token punctuation">]</span> ：<span class="token comment" spellcheck="true">// 设置node镜像。默认是https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</span>nvm npm_mirror <span class="token punctuation">[</span>url<span class="token punctuation">]</span> ：<span class="token comment" spellcheck="true">// 设置npm镜像。https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</span>nvm root <span class="token punctuation">[</span>path<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 设置存储不同版本node的目录。如果未设置，默认使用当前目录。</span>nvm version <span class="token comment" spellcheck="true">// 显示nvm版本。version可简化为v。</span></code></pre><p><strong>我们一般只需要用到两个指令</strong></p><pre><code>nvm install 14.5.0nvm use 14.5.0</code></pre><h3 id="Node-js是什么？"><a href="#Node-js是什么？" class="headerlink" title="Node.js是什么？"></a>Node.js是什么？</h3><p><strong>1、</strong>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.<br><strong>Node.js是一个构建在Google浏览器V8内核上的Javascript运行环境。</strong>(Ryan Dahl在2008年将新发布的V8内核移植了出来，从此浏览器之外也可以解析JS语句。它只有核心ECMAScript语法，因为它不需要处理网页事情)</p><ul><li>代码只是具有特定格式的字符串而已，解析引擎可以去帮助解析。</li></ul><p><strong>2、</strong>( <strong>特性</strong> ) As an asynchronous event-driven JavaScript runtime、Non-Blocking</p><ul><li>event-driven <strong><code>异步事件驱动</code></strong></li><li>Non-Blocking <strong><code>非阻塞式IO模型</code></strong></li><li>lightweight and efficient <strong>轻量和高效</strong></li></ul><p><strong>3、</strong>Node.js‘package ecosystem npm</p><ul><li><strong>使用npm管理包</strong>，<strong>npm</strong>是世界上最大的开源库生态系统</li><li>网站：<a href="https://www.npmjs.com/get-npm" target="_blank" rel="noopener">https://www.npmjs.com/get-npm</a></li></ul><h3 id="Node-js能做什么？"><a href="#Node-js能做什么？" class="headerlink" title="Node.js能做什么？"></a>Node.js能做什么？</h3><ul><li><strong>Web服务器后台</strong><ul><li><strong>B/S编程模型Browser-Server</strong>,所有服务器后台都采用的一种模型。</li><li>Node只是作为B/S模型，也就是打开服务器后台黑盒子的一个工具而已。</li></ul></li><li><strong>命令行工具</strong><ul><li>npm ( node )</li><li>git ( c语言 ) </li><li>hexo ( node )</li></ul></li></ul><h3 id="安装与环境"><a href="#安装与环境" class="headerlink" title="安装与环境"></a>安装与环境</h3><ul><li><strong>node.js的官网</strong>：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li>从官方网址下载安装包，一路<strong>next</strong>安装到指定文件夹下。</li><li>打开<strong>cmd命令行</strong>，输入<strong>node -v</strong>，如有版本号，说明安装成功。</li><li>如要求设置环境变量，就去把文件路径添加到环境变量中。</li></ul><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello_World"></a>Hello_World</h3><ul><li><p>自建一个xxx.js文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'hello world!'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>cmd 进入到文件目路下</p><pre><code>&gt;&gt;&gt; node xxx.js&gt;&gt;&gt; hello world!</code></pre></li></ul><h2 id="NodeJS应用示例"><a href="#NodeJS应用示例" class="headerlink" title="NodeJS应用示例"></a>NodeJS应用示例</h2><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//加载模块</span><span class="token comment" spellcheck="true">//第一个参数是路径，第二个参数是一个回调函数</span><span class="token comment" spellcheck="true">//error:</span><span class="token comment" spellcheck="true">//成功，error=null，失败,error就是错误对象;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span> error<span class="token punctuation">,</span> data <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打印二进制数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//转字符串输出</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//加载模块</span><span class="token comment" spellcheck="true">//第一个参数是路径，第二个文件内容，第三个参数是一个回调函数</span><span class="token comment" spellcheck="true">//error:写入成功，error=null，失败error就是错误对象;</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token string">'内容'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span> error <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败！'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功！'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p><strong>域名（<a href="http://www.xxx.com）是用来方便记忆，而计算机会用DNS将其解析成ip地址。" target="_blank" rel="noopener">www.xxx.com）是用来方便记忆，而计算机会用DNS将其解析成ip地址。</a></strong><br><strong>IP和端口号</strong></p><ul><li><strong>IP地址用来定位计算机。</strong></li><li><strong>端口号用来定位具体的应用程序。</strong></li><li>一切需要连网的软件都会占用一个端口号</li><li>端口号的范围从0-65536</li><li>有一些默认的端口号，最好不要去使用，如http服务的80。</li></ul><p><strong>node可以非常轻松的构建一个web服务器</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//加载模块</span><span class="token comment" spellcheck="true">//创建web服务器，返回一个Server实例</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//request请求事件处理函数，需要两个参数</span><span class="token comment" spellcheck="true">//Request请求对象</span><span class="token comment" spellcheck="true">//Request响应对象</span><span class="token comment" spellcheck="true">//服务器的工作：发请求、接收请求、处理请求、反馈请求</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端的请求了,请求路径是：'</span><span class="token operator">+</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//告诉浏览器发送的编码格式。text/plain普通文本、text/html为html文本</span>    <span class="token comment" spellcheck="true">//尽量填写正确的格式。</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/plain; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//response有个方法write可以给客户端发送响应数据</span>    <span class="token comment" spellcheck="true">//write使用完后，一定要使用end来结束。</span>    <span class="token comment" spellcheck="true">//response.wirte('hello');</span>    <span class="token comment" spellcheck="true">//response.end();</span>    <span class="token comment" spellcheck="true">//也可以直接</span>    <span class="token comment" spellcheck="true">//response.end('hello');</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'index page'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'login page'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">'/pros'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> pros <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span><span class="token string">'apple'</span><span class="token punctuation">,</span>                price<span class="token punctuation">:</span> <span class="token number">8888</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span><span class="token string">'boluo'</span><span class="token punctuation">,</span>                price<span class="token punctuation">:</span> <span class="token number">1788</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span>                name<span class="token punctuation">:</span><span class="token string">'xiaolajiao'</span><span class="token punctuation">,</span>                price<span class="token punctuation">:</span> <span class="token number">4500</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//response.write('pros page');</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//绑定端口号，启动服务器</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功了，可以通过http://127.0.0.1:3000/访问'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>发送文件中的数据</strong></p><pre><code>index.html&lt;html&gt;    &lt;head&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;text&gt;首页&lt;/text&gt;                &lt;/body&gt;&lt;/html&gt;</code></pre><pre><code>123.jpg</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/plain;charset=utf-8'</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'文件读取失败，请稍后重试！'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">'/baby'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'123.jpg'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/plain;charset=utf-8'</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'文件读取失败，请稍后重试！'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span>'image<span class="token operator">/</span>jpeg<span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//绑定端口号，启动服务器</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功了，可以通过http://127.0.0.1:3000/访问'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取CPU信息</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">totalmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取内存</span></code></pre><h3 id="调用自己的模块"><a href="#调用自己的模块" class="headerlink" title="调用自己的模块"></a>调用自己的模块</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//b.js文件</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'ccc'</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'hello'</span>exports<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age</code></pre><p><strong>模块调用的原理就是，接收文件导出的exports的全体对象。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//a.js文件</span><span class="token keyword">var</span> bExports <span class="token operator">=</span>  <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bExports<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bExports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bExports<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><h3 id="服务器的资源访问"><a href="#服务器的资源访问" class="headerlink" title="服务器的资源访问"></a>服务器的资源访问</h3><p><strong>( Apache )实现服务器软件，通过一个目路，所有放在目路下的资源，都可以通过地址访问！</strong></p><pre class=" language-java"><code class="language-java">var http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>var fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>var server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>var Dir <span class="token operator">=</span> <span class="token string">'C:/app/www'</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    var url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    var filePath <span class="token operator">=</span> <span class="token string">'/index.html'</span>    <span class="token comment" spellcheck="true">//如果url不是在根目路下，就把路径值取出来，读取这个文件</span>    <span class="token comment" spellcheck="true">//如果在，因为filePath初始值就为主页面，先点击是他，后点击也会取路径。</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        filePath <span class="token operator">=</span> url    <span class="token punctuation">}</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span> Dir <span class="token operator">+</span> filePath <span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器开启'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>如何将对应请求发送的对应html页面中的数据替换掉？</strong></p><p><font color="#008000">通过各种API获取到你要的数据，不管是路径数据还是其它的数据，使用”双括号”模板引擎将其数据替换</font></p><p><strong>( Apache )服务器</strong><br><strong>template.html文件</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">...</span>item<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p><strong>.js文件</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> Dir <span class="token operator">=</span> <span class="token string">'C:/app/www'</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    <span class="token keyword">var</span> filePath <span class="token operator">=</span> <span class="token string">'/index.html'</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./template.html'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span> Dir <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//生成要替换的内容</span>            <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string">''</span>            <span class="token comment" spellcheck="true">//forEach()是循环接口函数，files接收到了一个列表，而item就是列表中的每个元素，index变量就是下标</span>            files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//EcmaScript6在这种字符串中，可以使用${}引用变量</span>                content <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;tr class='adr'></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/tr>`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//替换字符串，Item为html页面模板中的一个段字符串</span>            data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'Items'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器开启'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h3><p>最简单的方法就是使用npm指令安装：</p><blockquote><p>npm install art-template –save</p></blockquote><p><strong>在前端使用示例</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"node_modules/art-template/lib/template-web.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/template"</span> id<span class="token operator">=</span><span class="token string">"tpl"</span><span class="token operator">></span>nih<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>hfjds<span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//是哦那个template函数（标签id，数据）</span><span class="token comment" spellcheck="true">//模板不关系内容，只关心{{}}</span><span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'jagf'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>在服务器使用示例</strong><br>API文档：<a href="http://aui.github.io/art-template/" target="_blank" rel="noopener">http://aui.github.io/art-template/</a><br>模板引擎最开始就是使用在服务器中。</p><ul><li>安装<blockquote><p>npm install art-template –save</p></blockquote></li><li>加载<blockquote><p>var template = require(‘art-template’)</p></blockquote></li><li>使用API</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token keyword">var</span> tplStr <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;html>&lt;body>...我叫：{{name}}年龄：{{age}}我喜欢：{each hobbies} {{$value}} {{/each}}...&lt;/body>&lt;/html>`</span></span><span class="token keyword">var</span> ret <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>tplStr<span class="token punctuation">,</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'SY'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    hobbies<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">'打球'</span><span class="token punctuation">,</span>        <span class="token string">'唱歌'</span><span class="token punctuation">,</span>        <span class="token string">'跳舞'</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span></code></pre><p><strong>读取文件示例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//tpl.html</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">...</span>我叫：<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span>我喜欢：<span class="token punctuation">{</span>each hobbies<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>each<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./tpl.html'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'SY'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>        hobbies<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token string">'打球'</span><span class="token punctuation">,</span>            <span class="token string">'唱歌'</span><span class="token punctuation">,</span>            <span class="token string">'跳舞'</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>同步和异步渲染</strong><br>同步渲染：服务器渲染，只需要一次请求即可。增加了服务器的压力。可以被SEO搜索优化。<br>异步渲染：客户端渲染，需要两个以上的亲求，速度更快。不能被SEO搜索优化。</p><blockquote><p>目路<br>/<br>/node_model<br>/public<br>/public/css<br>/public/css/main.css<br>/public/js<br>/public/js/main.js<br>/public/lib<br>/public/lib/jquery.js<br>/views<br>/views/index.html</p></blockquote><p>.html<br><img src="/postImg/19-1.jpg"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//我们约定，把所有静态资源都存放在public目路中</span>var http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>var fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>var comments <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'张三1'</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'cold'</span>，        dataTime<span class="token operator">:</span> <span class="token string">'2021-05-31'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'张三2'</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'cold'</span>，        dataTime<span class="token operator">:</span> <span class="token string">'2021-05-31'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'张三3'</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'cold'</span>，        dataTime<span class="token operator">:</span> <span class="token string">'2021-05-31'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'张三4'</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'cold'</span>，        dataTime<span class="token operator">:</span> <span class="token string">'2021-05-31'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'张三5'</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'cold'</span>，        dataTime<span class="token operator">:</span> <span class="token string">'2021-05-31'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>http    <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用url.parse方法将路径解析为一个方便操作的对象，第二个参数true表示</span>        <span class="token comment" spellcheck="true">//直接将查询字符串转为一个对象（通过 query 属性来访问）    </span>        var parseObj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//单独获取不包含查询字符串之后的内容（不包含？之后的内容）</span>        var pathname <span class="token operator">=</span> parseObj<span class="token punctuation">.</span>pathname        <span class="token comment" spellcheck="true">//var url = req.url</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pathname <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">,</span><span class="token function">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                var htmlStr <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    comments<span class="token operator">:</span> comments                <span class="token punctuation">}</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'/post'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./view/post.html'</span><span class="token punctuation">,</span> <span class="token function">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'/public/'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  /public/css/main.css</span>            <span class="token comment" spellcheck="true">//  /public/js/main.js</span>            <span class="token comment" spellcheck="true">//  /public/lib/jquery.js</span>            <span class="token comment" spellcheck="true">//统一处理：</span>            <span class="token comment" spellcheck="true">//如果请求的路径是以 /public/开头的，</span>            <span class="token comment" spellcheck="true">//我们就可以把请求路径当作文件路径来直读取。</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.'</span> <span class="token operator">+</span> pathname<span class="token punctuation">,</span> <span class="token function">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'/pinglun'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//响应客户端内容</span>                <span class="token comment" spellcheck="true">//res.end(JSON.stringify(parseObj.query))</span>                <span class="token comment" spellcheck="true">//我们已经使用url模块的parse方法把请求路径中的查询字符串给解析成了一个对象</span>                <span class="token comment" spellcheck="true">//所以接下来要做：</span>                <span class="token comment" spellcheck="true">// 1、获取表单提交的数据 parseObj.query</span>                <span class="token comment" spellcheck="true">// 2、生成日期到数据对象中，然后存储到数组中</span>                <span class="token comment" spellcheck="true">// 3、让用户重定向跳转到首页 /</span>                var comment <span class="token operator">=</span> parseObj<span class="token punctuation">.</span>query                comment<span class="token punctuation">.</span>dateTime <span class="token operator">=</span> <span class="token string">'2021-05-31 22:06:23'</span>                comments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//如何通过服务器让客户端重定向</span>                <span class="token comment" spellcheck="true">// 1、状态码设置为302临时重定向</span>                <span class="token comment" spellcheck="true">// 2、在响应头中通过Location告诉客户端往哪重定向</span>                <span class="token comment" spellcheck="true">// 3、客户端发现手袋服务器的响应的状态码是302就会自动去响应头中找Location，然后对该地址发起新的请求</span>                res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">302</span>                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Location'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//其它的都处理成404找不到</span>            fs<span class="token punctuation">.</span><span class="token function">readFIle</span><span class="token punctuation">(</span><span class="token string">'./views/404.html'</span><span class="token punctuation">,</span> <span class="token function">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32</title>
      <link href="/2021/02/15/STM32/"/>
      <url>/2021/02/15/STM32/</url>
      
        <content type="html"><![CDATA[<h2 id="STM32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h2><h3 id="安装下载调试"><a href="#安装下载调试" class="headerlink" title="安装下载调试"></a>安装下载调试</h3><p>keil5安装包下载：<a href="http://www.aflasdkasda;lsdaksa;d;alskda;sd;alk" target="_blank" rel="noopener">www.aflasdkasda;lsdaksa;d;alskda;sd;alk</a><br>芯片支持包下载：<a href="https://www.keil.com/dd2/pack/" target="_blank" rel="noopener">https://www.keil.com/dd2/pack/</a><br><strong>1、烧写器方式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#JTAG</span> <span class="token number">1</span>    <span class="token number">3</span>    <span class="token number">5</span>       <span class="token number">7</span>          <span class="token number">9</span>      <span class="token number">11</span>     <span class="token number">13</span>        <span class="token number">15</span>    <span class="token number">17</span>  <span class="token number">19</span>VREF NC   TDI  TMS<span class="token operator">/</span>SWDIO  TCK<span class="token operator">/</span>SWCLK  NC   TDO<span class="token operator">/</span>SWDIO  RESET  NC  NC NC  GND  GND     GND        GND     GND    GND      GND   GND  GND  <span class="token number">2</span>    <span class="token number">4</span>    <span class="token number">6</span>       <span class="token number">8</span>          <span class="token number">10</span>      <span class="token number">12</span>     <span class="token number">14</span>       <span class="token number">16</span>    <span class="token number">18</span>  <span class="token number">20</span></code></pre><p><strong>2、串口方式</strong><br><strong>ISP</strong>（In-System Programming）在系统可编程，指电路板上的空白器件可以编程写入用户代码，而不需要取下器件。ISP通过芯片内部的自举程序（<strong>Bootloader</strong>，由芯片厂家烧写好，不得更改）来选定一种串行的外设，对芯片内部的FLASH进行编程。常用的ISP方式就是通过串口下载，最主要的优点就是成本低，缺点是只能用于下载程序，不能硬件仿真。普通ISP在下载程序的时候需要手动配置BOOT的启动方式</p><pre class=" language-python"><code class="language-python">BOOT0    BOOT1      启动方式 <span class="token number">0</span>         x        内部FLASH <span class="token number">1</span>         <span class="token number">0</span>        系统存储器 <span class="token number">1</span>         <span class="token number">1</span>        内部SRAM</code></pre><p><strong>注释：</strong>Bootloader是嵌入式系统在加电后执行的第一段代码，在它完成CPU和相关硬件的初始化之后，再将操作系统映像或固化的嵌入式应用程序装在到内存中然后跳转到操作系统所在的空间，启动操作系统运行 [2]  。<br>对于嵌入式系统，Bootloader是基于特定硬件平台来实现的。因此，几乎不可能为所有的嵌入式系统建立一个通用的Bootloader</p><pre class=" language-python"><code class="language-python">                     <span class="token operator">-</span><span class="token operator">></span>   RXD        PA9  USB <span class="token operator">-</span><span class="token operator">></span> CH340（USB转串口）        <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">></span>       单片机                           <span class="token operator">-</span><span class="token operator">></span>   TXD        PA10</code></pre><p>1、USB转串口模块在开发板上是一个独立的模块<br>2、只有USART1才具有串口下载的功能</p><h3 id="什么是STM32"><a href="#什么是STM32" class="headerlink" title="什么是STM32"></a>什么是STM32</h3><p><strong>stm32:</strong></p><ul><li><strong>ST</strong>——<strong>意法半导体</strong>，是一个公司名，即SOC厂商</li><li><strong>M</strong>——Microeconomics的缩写，表示<strong><code>微控制器</code></strong>，并不是<strong>微处理器</strong>。</li><li><strong>32</strong>——表示其是一个<strong>32bit的也是现今最高的微控制器</strong>，处理器现今出现64bit。</li></ul><p>注释：STM32 = ARM内核（Cortex-M） + SOC增加各种外设（GPIO、I2C、SPI等）</p><p><strong>自带常用的通信接口：</strong></p><ul><li><strong><code>串口USART</code></strong>：用于跟串口接口的设备通信，比如：USB转串口模块、ESP8266、WIFI、GSP模块、GSM模块、串口屏、指纹识别模块、语音识别模块。</li><li><strong>内部集成电路<code>I2C</code></strong>：用于跟I2C接口的设备通信，比如：EEPROM、电容屏、陀螺仪MPU6050、0.96寸OLED模块。</li><li><strong>串口通信接口<code>SPI</code></strong>：用于跟SPI接口的设备通信，比如：串行FLASH、以太网W5500、音频模块VS1052.</li><li>SDIO、FSMC、I2S、ADC、GPIO</li></ul><p><strong>内核分类：</strong></p><pre class=" language-javascript"><code class="language-javascript">Cortex<span class="token operator">-</span>M0    STM32<span class="token operator">-</span>F0      入门级             STM32<span class="token operator">-</span>L0      低功耗Cortex<span class="token operator">-</span>M3    STM32<span class="token operator">-</span>F1      基础型，主频72MHZ             STM32<span class="token operator">-</span>F2      高性能             STM32<span class="token operator">-</span>L1      低功耗Cortex<span class="token operator">-</span>M4    STM32<span class="token operator">-</span>F3      混合信号             STM32<span class="token operator">-</span>F4      高性能，主频180MHZ             STM32<span class="token operator">-</span>L4      低功耗Cortex<span class="token operator">-</span>M7    STM32<span class="token operator">-</span>F7      高性能</code></pre><p><strong>命名方法：</strong></p><pre class=" language-javascript"><code class="language-javascript">基础：STM32F103引脚数：C<span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">,</span>R<span class="token punctuation">:</span><span class="token number">64</span><span class="token punctuation">,</span>V<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>Z<span class="token punctuation">:</span><span class="token number">144</span><span class="token punctuation">,</span>B<span class="token punctuation">:</span><span class="token number">208</span><span class="token punctuation">,</span>N<span class="token punctuation">:</span><span class="token number">216</span>FLASH：C<span class="token punctuation">:</span>256KB<span class="token punctuation">,</span>E<span class="token punctuation">:</span>512KB<span class="token punctuation">,</span>I<span class="token punctuation">:</span>2048KB封装：T<span class="token punctuation">:</span>QFP封装温度：<span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">48</span>°<span class="token operator">~</span><span class="token operator">+</span><span class="token number">85</span>°</code></pre><h3 id="如何寻找引脚的功能"><a href="#如何寻找引脚的功能" class="headerlink" title="如何寻找引脚的功能"></a>如何寻找引脚的功能</h3><ul><li><strong><code>参考手册：</code></strong><ul><li><strong>片上外设的功能说明和寄存器没描述：</strong>对片上的每个外设的功能和使用做了详细的说明，包含寄存器的详细描述。编程的时候需要反复查询这个手册。</li></ul></li><li><strong><code>数据手册：</code></strong><ul><li><strong>功能概览：</strong>主要讲这个芯片有哪些功能</li><li><strong>引脚说明：</strong>详细描述每个引脚的功能</li><li><strong>内存映射：</strong>列举总线的地址和包含哪些外设</li><li><strong>封装特性：</strong></li></ul></li></ul><h3 id="什么是寄存器"><a href="#什么是寄存器" class="headerlink" title="什么是寄存器"></a>什么是寄存器</h3><p><img src="/postImg/18-2.jpg"><br><strong>内核（驱动单元）和外设（被动单元）之间通过总线传输数据，其中：</strong></p><ul><li><strong>ICode总线：</strong> <strong>I</strong>表示<code>Instruction</code>，即<strong>指令</strong>。<strong>我们写好的程序编译之后都是一条条指令，存放在FLASH中，内核要读取这些指令来执行程序就必须通过ICode总线</strong>，它几乎每时每刻都需要被使用，它是专门用来取指的。</li><li><strong>DCode总线：</strong> <strong>D</strong>表示<code>Data</code>，及<strong>数据</strong>，数据又分<strong>常量</strong>和<strong>变量</strong>两种，<strong>常量用关键字const修饰放到内部的FLASH中，变量不管是全局变量或局部变量都是放在SRAM中</strong>。因为<strong>数据可以被Dcode总线和DMA总线访问，所以为了避免访问冲突，在取数据的时候需要经过一个<code>总线矩阵来总裁</code></strong>，来决定哪个总线在取数据。</li><li><strong>DMA总线：</strong> 和Dcode作用相同，主要作用是<strong>搬数据</strong>，它省去了CPU中的通用寄存器作为数据中转，从而CPU只需要向DMA发送一条指令之后就可以处理其它事情。</li><li><strong>System总线：</strong> 主要<strong>读取<code>寄存器</code></strong>，而寄存器就是存在于<strong>外设中</strong>。</li></ul><p><table><tr><td bgcolor="orange"> 1、什么是存储器映射？</td></tr></table><br><u><strong>存储器本身不具有地址信息，它的地址是由芯片厂商或用户分配，给存储器分配地址的过程称为存储器映射。</strong></u><br>翻阅<strong>数据手册</strong>如下图示例。<br><img src="/postImg/18-3.jpg"></p><p><table><tr><td bgcolor="orange"> 2、什么是寄存器映射?</td></tr></table><br><u><strong>给有特定功能的内存单元取一个别名，这个别名就是我们经常说的寄存器，这个给已经分配好地址的有特定功能的内存单元取别名的过程就叫寄存器映射。</strong></u></p><p><strong>以操作GPIOB为例：</strong></p><p><font color="#008000">在参考手册中找到GPIO的ODR寄存器，偏移地址为0x0c，在寄存器映像表中也可以清楚的找到GPIOB的起始地址为0x4001,那么GPIOB端口输出寄存器地址就为0x40010C0C。</font><br><strong>全部输出高就为：</strong><br><strong><code>*( unsigned int * )(0x40010C0C) = 0xFFFF;</code></strong><br><strong><code>unsigned int *</code>：</strong> <strong>是强制转换为地址</strong>，不然编译器不知道。<br><strong><code>*</code>：</strong>是做指针操作</p><p><font color="#008000">之后可以通过寄存器别名方式访问内存单元：</font></p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_ODR (unsigned int*)(0x40010C0C)</span><span class="token operator">*</span> GPIO_ODR <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_ODR *(unsigned int*)(0x40010C0C)</span>GPIO_ODR <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span></code></pre><p><img src="/postImg/18-4.jpg"><br><strong>由参考手册中的寄存器映射表可以看出：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#总线基地址</span>名称     基地址         相对外设基地址的偏移APB1     <span class="token number">0x4000</span> <span class="token number">0000</span>   <span class="token number">0x0</span>APB2     <span class="token number">0x4001</span> <span class="token number">0000</span>   <span class="token number">0x0001</span> <span class="token number">0000</span>AHB      <span class="token number">0x4001</span> <span class="token number">8000</span>   <span class="token number">0x0001</span> <span class="token number">8000</span><span class="token comment" spellcheck="true">#GPIO基地址</span>名称     基地址         相对APB2总线的地址偏移GPIOA    <span class="token number">0x4001</span> <span class="token number">0800</span>   <span class="token number">0x0000</span> <span class="token number">0800</span>GPIOB    <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x0000</span> <span class="token number">0C00</span>GPIOC    <span class="token number">0x4001</span> <span class="token number">1000</span>   <span class="token number">0x0000</span> <span class="token number">1000</span>GPIOD    <span class="token number">0x4001</span> <span class="token number">1400</span>   <span class="token number">0x0000</span> <span class="token number">1400</span>GPIOE    <span class="token number">0x4001</span> <span class="token number">1800</span>   <span class="token number">0x0000</span> <span class="token number">1800</span>GPIOF    <span class="token number">0x4001</span> <span class="token number">1C00</span>   <span class="token number">0x0000</span> <span class="token number">1C00</span>GPIOG    <span class="token number">0x4001</span> <span class="token number">2000</span>   <span class="token number">0x0000</span> <span class="token number">2000</span><span class="token comment" spellcheck="true">#GPIO端口寄存器地址</span>名称        基地址         相对APB2基地址的偏移GPIOB_CRL   <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x00</span>GPIOB_CRH   <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x04</span>GPIOB_IDR   <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x08</span>GPIOB_ODR   <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x0C</span>GPIOH_BSRR  <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x10</span>GPIOH_BRR   <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x14</span>GPIOH_LCKR  <span class="token number">0x4001</span> <span class="token number">0C00</span>   <span class="token number">0x18</span></code></pre><p><table><tr><td bgcolor="sky-blue"> 用C语言封装寄存器</td></tr></table><br><strong>1、define封装</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*外设基地址*/</span><span class="token macro property">#<span class="token directive keyword">define</span> PERIPH_BASE           ((unsigned int)0x40000000)</span><span class="token comment" spellcheck="true">/*总线基地址*/</span><span class="token macro property">#<span class="token directive keyword">define</span> APB1PERIPH_BASE       PERIPH_BASE</span><span class="token macro property">#<span class="token directive keyword">define</span> APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000)</span><span class="token macro property">#<span class="token directive keyword">define</span> AHBPERIPH_BASE        ((unsigned int)0x00020000)</span><span class="token comment" spellcheck="true">/*GPIO外设基地址*/</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOA_BASE            (APB2PERIPH_BASE + 0x0800)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_BASE            (APB2PERIPH_BASE + 0x0C00)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOC_BASE            (APB2PERIPH_BASE + 0x1000)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOD_BASE            (APB2PERIPH_BASE + 0x1400)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOE_BASE            (APB2PERIPH_BASE + 0x1800)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOF_BASE            (APB2PERIPH_BASE + 0x1C00)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOG_BASE               (APB2PERIPH_BASE + 0x2000)</span><span class="token comment" spellcheck="true">/*寄存器基地址*/</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_CRL                (GPIOB_BASE + 0x00)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_BASE            (GPIOB_BASE + 0x04)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_IDR             (GPIOB_BASE + 0x08)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_ODR             (GPIOB_BASE + 0x0C)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_BSRR            (GPIOB_BASE + 0x10)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_BRR             (GPIOB_BASE + 0x14)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB_LCKR            (GPIOB_BASE + 0x18)</span></code></pre><p>操作PB0输出：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// PB0输出低电平</span>GPIOB_ODR <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PB0输出高电平</span>GPIOB_ODR <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2、结构体封装</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span>         <span class="token keyword">int</span>   uint32_t<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* 无符号32位变量 */</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>   <span class="token keyword">int</span>   uint16_t<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* 无符号16位变量 */</span><span class="token comment" spellcheck="true">/* GPIO寄存器列表 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    uint32_t CRL<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*GPIO端口配置低寄存器     地址偏移：0x00 */</span>    uint32_t ORH<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*GPIO端口配置高寄存器     地址偏移：0x04 */</span>    uint32_t IDR<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*GPIO数据输入寄存器       地址偏移：0x08 */</span>    uint32_t ODR<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*GPIO数据输出寄存器       地址偏移：0x0C */</span>    uint32_t BSRR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*GPIO位设置/清除寄存器    地址偏移：0x10 */</span>    uint32_t BRR<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*GPIO端口位清除寄存器     地址偏移：0x14 */</span>    uint32_t LCKR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*GPIO配置锁定寄存器       地址偏移：0x18 */</span><span class="token punctuation">}</span>GPIO_TypeDef<span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp">GPIO TypeDef <span class="token operator">*</span> GPIOx<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义一个GPIO_TypeDef型结构体指针GPIOx</span>GPIOx <span class="token operator">=</span> GPIO_BASE<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把指针地址设置为宏GPIOH_BASE地址</span>GPIOx<span class="token operator">-</span><span class="token operator">></span>IDR <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>GPIOx<span class="token operator">-</span><span class="token operator">></span>ODR <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>uint32_t temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> GPIOx<span class="token operator">-</span><span class="token operator">></span>IDR<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//读取GPIOB_IDR寄存器的值到变量temp中</span></code></pre><p>或者</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* 使用GPIO_TypeDef把地址强制转换成指针 */</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOA       ((GPIO_TypeDef *) GPIOA_BASE)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOB       ((GPIO_TypeDef *) GPIOB_BASE)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOC       ((GPIO_TypeDef *) GPIOC_BASE)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOD       ((GPIO_TypeDef *) GPIOD_BASE)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOE       ((GPIO_TypeDef *) GPIOE_BASE)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOF       ((GPIO_TypeDef *) GPIOF_BASE)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOG       ((GPIO_TypeDef *) GPIOG_BASE)</span><span class="token macro property">#<span class="token directive keyword">define</span> GPIOH       ((GPIO_TypeDef *) GPIOH_BASE)</span><span class="token comment" spellcheck="true">/*使用定义好的宏直接访问*/</span><span class="token comment" spellcheck="true">/*访问GPIOB端口的寄存器*/</span>GPIOB<span class="token operator">-</span><span class="token operator">></span>BSRR <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>GPIO<span class="token operator">-</span><span class="token operator">></span>CRL <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>GPIOB<span class="token operator">-</span><span class="token operator">></span>ODR <span class="token operator">=</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>uint32_t temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> GPIOB<span class="token operator">-</span><span class="token operator">></span>IDR<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶之资源调用</title>
      <link href="/2021/02/10/Python%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B5%84%E6%BA%90%E8%B0%83%E7%94%A8/"/>
      <url>/2021/02/10/Python%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B5%84%E6%BA%90%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="第三方库应用"><a href="#第三方库应用" class="headerlink" title="第三方库应用"></a>第三方库应用</h2><h3 id="openpyxl（excel操作应用）"><a href="#openpyxl（excel操作应用）" class="headerlink" title="openpyxl（excel操作应用）"></a>openpyxl（excel操作应用）</h3><p><strong>用途：</strong>读取和修改Excel文档，读写xltm、xltx、xlsm、xlsx等类型的文件，可以处理数据量较大的Excel文件。</p><p>第三方库文档：<a href="https://openpyxl.readthedocs.io/en/stable/usage.html" target="_blank" rel="noopener">https://openpyxl.readthedocs.io/en/stable/usage.html</a><br>中文文档：<a href="https://www.osgeo.cn/openpyxl/index.html" target="_blank" rel="noopener">https://www.osgeo.cn/openpyxl/index.html</a><br>其他相似库列表：<a href="http://www.python-excel.org/" target="_blank" rel="noopener">http://www.python-excel.org/</a></p><p><strong>openpyxl 与 xlrd/xlwt 的比较：</strong><br>两者都是对于excel文件操作的模块，其主要区别在于：<br><strong>写操作：</strong><br>xlwt：针对Ecxec2007之前的版本（.xls），无法生成xlsx文件。<br>openpyxl：主要针对Excel2007之后的版本（.xlsx）。<br><strong>读写速度：</strong><br>xlrd/xlwt在读写方面的速度都要优于openpyxl。<br><strong>文件大小：</strong><br>xlrd/xlwt：对单个sheet不超过65535行。<br>openpyxl：对文件大小没有限制。</p><p>示例参考网站1：<a href="https://www.cnblogs.com/juno3550/p/13363847.html" target="_blank" rel="noopener">https://www.cnblogs.com/juno3550/p/13363847.html</a></p><h4 id="获取workbook与sheet对象"><a href="#获取workbook与sheet对象" class="headerlink" title="获取workbook与sheet对象"></a>获取workbook与sheet对象</h4><p><strong>创建新文件：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token comment" spellcheck="true"># 创建工作簿对象</span>wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 激活sheet；拿到当前文件对象中默认操作的一个sheet，如上次关闭文件时所打开的sheet</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active<span class="token comment" spellcheck="true"># 表格在被创建的时候会自动的有一个名字。它们被命名在一个队列中（sheet, ...），可以使用title属性在任何时候来改变它们的名字。</span>ws<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"tmp"</span><span class="token comment" spellcheck="true"># 删除sheet</span>wb<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建sheet</span>ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">"tmp1"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 默认在最后插入新sheet</span>ws2 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">"tmp2"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在索引为0的位置插入</span><span class="token comment" spellcheck="true"># 保存文件（覆盖同名文件的全部内容）</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"文件名称.xlsx"</span><span class="token punctuation">)</span></code></pre><p><strong>打开已有文件：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打开已有文件</span><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token comment" spellcheck="true"># 打开指定文件</span>wb <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">"e:\\test.xlsx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看所有sheet名</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回列表</span><span class="token comment" spellcheck="true"># 遍历所有sheet名</span><span class="token keyword">for</span> sheet <span class="token keyword">in</span> wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 选择sheet</span>ws3 <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">"tmp3"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 方法1：名称可以作为key进行查找</span>ws4 <span class="token operator">=</span> wb<span class="token punctuation">.</span>get_sheet_by_name<span class="token punctuation">(</span><span class="token string">"tmp4"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 方法2</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3 <span class="token keyword">is</span> ws4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># 在原有内容上进行修改并保存</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"e:\\test.xlsx"</span><span class="token punctuation">)</span></code></pre><h4 id="访问单元格及其值"><a href="#访问单元格及其值" class="headerlink" title="访问单元格及其值"></a>访问单元格及其值</h4><p>注意：当一个工作表在内存中被创建时，它里面默认是没有表格对象的，它们只有在第一次被访问的时候才会被创建，从而减少内存占用。因为这个特性，我们要循环表格而不是直接访问它们，这样会将所有的表格对象在内存中创建，就算你没有访问它们中的任何一个值。</p><p>openpyxl 读写单元格时，单元格的坐标位置起始值是（1,1），即下标最小值为1。</p><p><strong>访问单个单元格:</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取最大行列（返回数值）</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">.</span>max_column<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法1：指定行列</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">[</span><span class="token string">"A2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法2：指定行列</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 行号和列号从1开始</span><span class="token comment" spellcheck="true"># 方法3：只要访问就会创建对应单元格对象</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ws4<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre><p><strong>行列序号转换:</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_column_letter<span class="token punctuation">,</span> column_index_from_string<span class="token comment" spellcheck="true"># 根据列的数字返回字母</span><span class="token keyword">print</span><span class="token punctuation">(</span>get_column_letter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># B</span><span class="token comment" spellcheck="true"># 根据字母返回列的数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>column_index_from_string<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span></code></pre><p><strong>访问多个单元格:</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 访问指定行数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 方法1：索引从1开始</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 切片方式，返回二维元组</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>ws3<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 方法2：索引从0开始，sheet.rows为生成器, 里面是每一行的数据，每一行又由一个tuple包裹</span><span class="token comment" spellcheck="true"># 遍历获取每个单元格的值</span><span class="token keyword">for</span> cell <span class="token keyword">in</span> ws3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 访问指定列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>ws3<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 访问第2列单元格</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">[</span><span class="token string">"A:C"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回二维元组</span><span class="token comment" spellcheck="true"># 指定范围</span><span class="token comment" spellcheck="true"># 方法1</span><span class="token keyword">print</span><span class="token punctuation">(</span>ws3<span class="token punctuation">[</span><span class="token string">"A1:B4"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法2：最多访问两行两列的单元格</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ws3<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 行号和列号从1开始</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''执行结果：&lt;Cell 'tmp3'.A1>&lt;Cell 'tmp3'.B1>&lt;Cell 'tmp3'.A2>&lt;Cell 'tmp3'.B2>'''</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ws3<span class="token punctuation">.</span>iter_cols<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 行号和列号从1开始</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''注意与上述iter_rows的获取顺序不同&lt;Cell 'tmp3'.A1>&lt;Cell 'tmp3'.A2>&lt;Cell 'tmp3'.B1>&lt;Cell 'tmp3'.B2>'''</span></code></pre><p><strong>矩阵置换:</strong></p><pre class=" language-python"><code class="language-python">rows <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 传入二维序列时需要解包</span><span class="token triple-quoted-string string">'''执行结果：[('Number', 2, 3, 4, 5, 6, 7), ('data1', 40, 40, 50, 30, 25, 50), ('data2', 30, 25, 30, 10, 5, 10)]'''</span><span class="token comment" spellcheck="true"># 注意：该方法会舍弃缺少数据的列(行)</span>a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''执行结果：[(1, 4), (2, 5)]'''</span></code></pre><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><p><strong>写入单元格值：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 写入常规值</span><span class="token comment" spellcheck="true"># 方法1</span>ws3<span class="token punctuation">[</span><span class="token string">"A1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 方法2：行号和列号从1开始</span>ws3<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"A2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法3：追加一行数据（即最下方空白处的最左第一个单元格开始）</span>ws3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 写时间</span><span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 方法1</span>now_time_1 <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ws3<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">=</span>now_time_1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法2</span><span class="token keyword">import</span> localelocale<span class="token punctuation">.</span>setlocale<span class="token punctuation">(</span>locale<span class="token punctuation">.</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">'en'</span><span class="token punctuation">)</span>locale<span class="token punctuation">.</span>setlocale<span class="token punctuation">(</span>locale<span class="token punctuation">.</span>LC_CTYPE<span class="token punctuation">,</span> <span class="token string">'chinese'</span><span class="token punctuation">)</span>now_time_2 <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年%m月%d日 %H:%M:%S"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 自动传入当前时间</span>ws3<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">=</span>now_time_2<span class="token punctuation">)</span></code></pre><p><strong>合并单元格</strong><br>合并单元格以合并区域的左上角的那个单元格为基准，覆盖其他单元格，使之称为一个大的单元格。</p><p>相反，拆分单元格后将这个大单元格的值返回到原来的左上角位置。</p><pre class=" language-python"><code class="language-python">ws3<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span><span class="token string">'A1:B1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 合并一行中的几个单元格</span>ws3<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span><span class="token string">'B2:C11'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 合并一个矩形区域中的单元格</span></code></pre><p>合并后只可以往左上角写入数据，也就是区间中最左上角的坐标。</p><p>如果这些要合并的单元格都有数据，只会保留左上角的数据，其他则丢弃。换句话说若合并前不是在左上角写入数据，那么合并后的单元格则不会有数据。</p><p><strong>拆分单元格</strong></p><pre class=" language-python"><code class="language-python">ws3<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span><span class="token string">'A1:B1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 拆分后，值回写到A1位置</span>ws3<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span><span class="token string">'B2:C11'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 拆分后，值回写到B2位置</span></code></pre><h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><p><strong>sheet标签颜色：</strong></p><pre class=" language-python"><code class="language-python">ws3<span class="token punctuation">.</span>sheet_properties<span class="token punctuation">.</span>tabColor <span class="token operator">=</span> <span class="token string">"1072BA"</span></code></pre><p><strong>行高与列宽：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第2行行高</span>ws3<span class="token punctuation">.</span>row_dimensions<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">40</span><span class="token comment" spellcheck="true"># C列列宽</span>ws3<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">30</span></code></pre><p><strong>单元格样式：</strong></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''字体'''</span><span class="token comment" spellcheck="true"># 等线24号，加粗斜体，字体颜色红色</span>bold_italic_24_font <span class="token operator">=</span> Font<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'等线'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> italic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> color<span class="token operator">=</span>colors<span class="token punctuation">.</span>RED<span class="token punctuation">,</span> bold<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直接使用cell的font属性，将Font对象赋值给它</span>ws3<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>font <span class="token operator">=</span> bold_italic_24_font<span class="token triple-quoted-string string">'''对齐方式'''</span><span class="token comment" spellcheck="true"># 设置B1中的数据垂直居中和水平居中（除了center，还可以使用right、left等参数）</span>ws3<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> vertical<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">)</span></code></pre><h3 id="pywinauto（windows自动化GUI）"><a href="#pywinauto（windows自动化GUI）" class="headerlink" title="pywinauto（windows自动化GUI）"></a>pywinauto（windows自动化GUI）</h3><p><strong>pywinauto</strong>是一组用于自动化Microsoft Windows GUI的python模块。 最简单的是，它允许您将鼠标和键盘操作发送到窗口对话框和控件。<strong>但有些软件本身就是不可被访问的，还有就是中文问题。</strong><br>第三方库文档：<a href="https://pywinauto.readthedocs.io/en/latest/getting_started.html" target="_blank" rel="noopener">https://pywinauto.readthedocs.io/en/latest/getting_started.html</a><br>中文文档：<a href="https://www.kancloud.cn/gnefnuy/pywinauto_doc/1193046" target="_blank" rel="noopener">https://www.kancloud.cn/gnefnuy/pywinauto_doc/1193046</a><br>参考网站：<a href="https://www.bbsmax.com/A/Vx5MYanL5N/" target="_blank" rel="noopener">https://www.bbsmax.com/A/Vx5MYanL5N/</a></p><h4 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h4><p><strong>需要管理员权限打开的的进程</strong>【报错：pywintypes.error: (740, ‘CreateProcess’, ‘请求的操作需要提升。’)】<br><strong>解决方法：</strong><br><strong>①</strong>打包.exe后用管理员方式打开<br><strong>②</strong>代码实现管理员权限</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> ctypes<span class="token punctuation">,</span> sys<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ctypes<span class="token punctuation">.</span>windll<span class="token punctuation">.</span>shell32<span class="token punctuation">.</span>IsUserAnAdmin<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> is_admin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里写入需要管理员权限执行的操作</span>    <span class="token comment" spellcheck="true"># app = Application(backend = "uia").start(r"D:\XXXX.exe")</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        ctypes<span class="token punctuation">.</span>windll<span class="token punctuation">.</span>shell32<span class="token punctuation">.</span>ShellExecuteW<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">"runas"</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>executable<span class="token punctuation">,</span> __file__<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><strong>报错：pywinauto打开程序时报错pywinauto.application.AppStartError: Could not create the process “MDK527pre：</strong><br><strong>解决方法：</strong><br>将start(‘F:\KEIL527\MDK527pre.exe’) 改为<code>start(r&#39;F:\\KEIL527\\MDK527pre.exe&#39;)</code>或者<code>start(r&#39;F:/KEIL527/MDK527pre.exe&#39;)</code></p><p><strong>自动安装腾讯QQ:(软件默认为win32)</strong></p><pre><code>from pywinauto import applicationimport time#QQ自动安装例子**app = application.Application().start(&#39;D:\software_用户软件\QQ9.0.3.exe&#39;)time.sleep(2)#2.获取 执行程序的窗体# 在不知道窗体名称,可以报错的方式查找窗体名称# window_title=[&#39;无标题-记事本&#39;]# print(app[window_title].wrapper_object())window_title=&#39;腾讯QQ安装向导&#39;#3.查看一个窗体含有的控件，子窗体，菜单# print(app[window_title].print_control_identifiers())#4.触发窗体含有的控件，子窗体，菜单#触发方式:app[window_title].child_window(title=&#39;窗体名&#39;,class_name=&quot;窗体类名&quot;)#.click() 点击事件#.set_edit_text() 设置Edit# 更多方式可以 通过help(app[window_title].child_window(class_name=&quot;Edit&quot;))查到#点开QQ安装自定义选项app[window_title].child_window(title=&quot;自定义选项&quot;).click()time.sleep(1)#修改默认安装路径app[window_title].child_window(class_name=&quot;Edit&quot;).set_edit_text(r&#39;D:\Program Files (x86)\Tencent\QQ&#39;)#取消自启动app[window_title].child_window(title=&quot;添加到快速启动栏&quot;).click()app[window_title].child_window(title=&quot;开机自动启动&quot;).click()#执行安装# print(app[window_title].print_control_identifiers())# help(app[window_title].child_window(class_name=&quot;#32770&quot;).child_window(title=&quot;立即安装&quot;, class_name=&quot;Button&quot;).click())app[window_title].child_window(class_name=&quot;#32770&quot;).child_window(title=&quot;立即安装&quot;, class_name=&quot;Button&quot;).click()time.sleep(40)# print(app[window_title].print_control_identifiers())app[window_title].child_window(class_name=&quot;#32770&quot;).child_window(title=&quot;安装QQ浏览器&quot;, class_name=&quot;Button&quot;).uncheck_by_click()app[window_title].child_window(class_name=&quot;#32770&quot;).child_window(title=&quot;安装QQ游戏 免费获取专属礼包&quot;, class_name=&quot;Button&quot;).uncheck_by_click()app[window_title].child_window(class_name=&quot;#32770&quot;).child_window(title=&quot;安装QQ音乐播放器&quot;, class_name=&quot;Button&quot;).uncheck_by_click()app[window_title].child_window(class_name=&quot;#32770&quot;).child_window(title=&quot;完成安装&quot;, class_name=&quot;Button&quot;).click()</code></pre><p>自动安装话务软件:(软件默认为uia),这个软件自动安装有点特殊,启动的进程不是窗口进程,所有拿不到窗口对象,所以采用connect 进程号的方式去获取 启动的窗口对象.</p><pre><code>from pywinauto import applicationimport timeimport psutilimport reimport osos.popen(&#39;D:\software_用户软件\X-Lite电话系统.exe&#39;)time.sleep(1)PID = 0for proc in psutil.process_iter():    try:        pinfo = proc.as_dict(attrs=[&#39;pid&#39;, &#39;name&#39;])    except psutil.NoSuchProcess:        pass    else:        if re.match(r&#39;^is.*?.tmp$&#39;,pinfo[&#39;name&#39;]):            PID = pinfo[&#39;pid&#39;]# print(PID)app = application.Application(backend=&#39;uia&#39;).connect(process=PID)# print(app.window(class_name=&#39;TWizardForm&#39;).print_control_identifiers())# print(dir(app.window(class_name=&#39;TWizardForm&#39;)))app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;Next &gt;&quot;,control_type=&quot;Button&quot;).click()# print(app.window(class_name=&#39;TWizardForm&#39;).print_control_identifiers())app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;I accept the agreement&quot;, control_type=&quot;RadioButton&quot;).click()app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;Next &gt;&quot;, control_type=&quot;Button&quot;).click()# print(app.window(class_name=&#39;TWizardForm&#39;).print_control_identifiers())app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;To continue, click Next. If you would like t&quot;                                                        &quot;o select a different folder, click Browse.&quot;,                                                  control_type=&quot;Edit&quot;).set_edit_text(r&#39;D:\Program Files (x86)\CounterPath\X-Lite&#39;)app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;Next &gt;&quot;,control_type=&quot;Button&quot;).click()app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;Next &gt;&quot;,control_type=&quot;Button&quot;).click()time.sleep(2)# print(app.window(class_name=&#39;TWizardForm&#39;).print_control_identifiers())# print(dir(app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;Launch X-Lite&quot;, control_type=&quot;CheckBox&quot;)))app.window(class_name=&#39;TWizardForm&#39;).child_window(title=&quot;Finish&quot;, control_type=&quot;Button&quot;).click()</code></pre><h3 id="pywin32-GUI"><a href="#pywin32-GUI" class="headerlink" title="pywin32(GUI)"></a>pywin32(GUI)</h3><h3 id="问题记录："><a href="#问题记录：" class="headerlink" title="问题记录："></a>问题记录：</h3><p><strong>打包版本和pywin不兼容：</strong>The application can not locate Python39.dll (126)找不到指定的模块。<br><strong>解决方法：</strong><br>出错版本： pyinstaller 4.1 pywin32 300<br>修改后： pyinstaller 4.1 pywin32 226</p><h4 id="模拟按键模拟键盘按键按下放开"><a href="#模拟按键模拟键盘按键按下放开" class="headerlink" title="模拟按键模拟键盘按键按下放开"></a>模拟按键模拟键盘按键按下放开</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> win32con<span class="token keyword">import</span> win32api<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 模拟A</span>win32api<span class="token punctuation">.</span>keybd_event<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#按下</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">#延迟一会儿</span>win32api<span class="token punctuation">.</span>keybd_event<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>win32con<span class="token punctuation">.</span>KEYEVENTF_KEYUP<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#松开</span>键盘按键和键盘对应代码表：A <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">65</span> B <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">66</span> C <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">67</span> D <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">68</span>E <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">69</span> F <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">70</span> G <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">71</span> H <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">72</span>I <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">73</span> J <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">74</span> K <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">75</span> L <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">76</span>M <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">77</span> N <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">78</span> O <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">79</span> P <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">80</span>Q <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">81</span> R <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">82</span> S <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">83</span> T <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">84</span>U <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">85</span> V <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">86</span> W <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">87</span> X <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">88</span>Y <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">89</span> Z <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">90</span> <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">48</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">49</span><span class="token number">2</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">50</span> <span class="token number">3</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">51</span> <span class="token number">4</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">52</span> <span class="token number">5</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">53</span><span class="token number">6</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">54</span> <span class="token number">7</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">55</span> <span class="token number">8</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">56</span> <span class="token number">9</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">57</span>数字键盘 <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">96</span> 数字键盘 <span class="token number">2</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">97</span> 数字键盘 <span class="token number">3</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">98</span>数字键盘 <span class="token number">4</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">99</span> 数字键盘 <span class="token number">5</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">100</span> 数字键盘 <span class="token number">6</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">101</span>数字键盘 <span class="token number">7</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">102</span> 数字键盘 <span class="token number">8</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">103</span> 数字键盘 <span class="token number">9</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">104</span>数字键盘 <span class="token number">0</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">105</span>乘号 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">106</span> 加号 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">107</span> Enter <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">108</span> 减号 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">109</span>小数点 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">110</span> 除号 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">111</span>F1 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">112</span> F2 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">113</span> F3 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">114</span> F4 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">115</span>F5 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">116</span> F6 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">117</span> F7 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">118</span> F8 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">119</span>F9 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">120</span> F10 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">121</span> F11 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">122</span> F12 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">123</span>F13 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">124</span> F14 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">125</span> F15 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">126</span>Backspace <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">8</span>Tab <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">9</span>Clear <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">12</span>Enter <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">13</span>Shift <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">16</span>Control <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">17</span>Alt <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">18</span>Caps Lock <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">20</span>Esc <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">27</span>空格键 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">32</span>Page Up <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">33</span>Page Down <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">34</span>End <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">35</span>Home <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">36</span>左箭头 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">37</span>向上箭头 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">38</span>右箭头 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">39</span>向下箭头 <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">40</span>Insert <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">45</span>Delete <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">46</span>Help <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">47</span>Num Lock <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">144</span><span class="token punctuation">;</span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">186</span><span class="token operator">=</span> <span class="token operator">+</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">187</span><span class="token operator">-</span> _ <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">189</span><span class="token operator">/</span> ? <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">191</span>` <span class="token operator">~</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">192</span><span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">219</span><span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">220</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">221</span><span class="token string">''</span> ' <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">222</span></code></pre><h3 id="PyUserInput-键盘、鼠标模拟"><a href="#PyUserInput-键盘、鼠标模拟" class="headerlink" title="PyUserInput(键盘、鼠标模拟)"></a>PyUserInput(键盘、鼠标模拟)</h3><h4 id="问题记录：-1"><a href="#问题记录：-1" class="headerlink" title="问题记录："></a>问题记录：</h4><p>Python：ModuleNotFoundError: No module named ‘windows’：<br>前往网站-&gt;<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>  下载PyHook</p><p>想要使用PyKeyboard，需要先安装：pywin32-&gt;pyHook-&gt;PyUserInput</p>]]></content>
      
      
      <categories>
          
          <category> 软件语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语言</title>
      <link href="/2021/01/22/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/01/22/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><em>——<strong>取自崇天老师的视频(中国大学MOOC)</strong>，文章不适合新手，此文章只作为记忆记录方便查阅，记录的标准为方便自己再次学习和直接利用资源——</em></p><p>官方文档：<a href="http://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">http://docs.python.org/zh-cn/3/</a><br><strong>建议作为某些疑惑内容深入理解和查阅，不建议初学阅读和学习教程。</strong></p><blockquote><p><strong>pip 安装第三方库速度太慢</strong><br>可设置 pip 从国内的镜像源下载安装:</p><ul><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣 <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul></blockquote><blockquote><p>设置方法，以清华镜像源为例：</p><ul><li>临时使用<br>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> xxxxxxx</li><li>永久设置<br>pip config set global.index-url <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul></blockquote><p>Python语言诞生与1990年，创立者是Guido van Rossum，他为Python注入了一种开源、开放、可持续发展的一种精神，也是Python能持续发展的原因。Python是一种脚本语言，说到脚本，这里就不得不提到编译和解释，<code>源代码</code>：采用某种编程语言编写的计算机程序，人类可读，<code>目标代码</code>：计算机可直接执行。<strong><code>编译：</code>是将源代码一次性转换为目标代码的过程，之后不再需要源码</strong>，<strong><code>解释</code>：是将代码逐条转换为目标代码同时逐条运行的过程，每次程序运行都是随时翻译随及执行</strong>。而使用编译执行的语言叫做静态语言，如C/C++、Java。而使用解释执行的语言叫脚本语言，如Python、JS、PHP。</p><p><strong>❤求解计算问题的精简步骤，也是通用的一种语言编写思路：</strong><br><strong>确定IPO：</strong>明确计算部分及功能边界，将程序分成输入、输出和计算三大部分。<br><strong>编写程序：</strong>价格计算求解的设计变成现实<br><strong>调试程序：</strong>确保程序按照正确逻辑能够正确运行</p><p><strong>Python连接：</strong><br>Python官网：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br>Pyhon123平台：<a href="https://python123.io/student/download" target="_blank" rel="noopener">https://python123.io/student/download</a></p><p><strong>Python的两种编程方式：</strong><br>交互式：对每隔输入语句即时运行结果，适合语法练习<br>文件式：批量执行一组语句并运行结果，编程的主要方式</p><h1 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h1><h2 id="实例：温度转换"><a href="#实例：温度转换" class="headerlink" title="实例：温度转换"></a>实例：温度转换</h2><p>两种温度体系摄氏度和华氏度相互转换</p><pre class=" language-javascript"><code class="language-javascript">#温度转换TempStr <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入带有符号的温度值："</span><span class="token punctuation">)</span><span class="token keyword">if</span> TempStr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    C <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>TempStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1.8</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"{:.2f}C"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span>elif TempStr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    F <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>TempStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.8</span> <span class="token operator">+</span> <span class="token number">32</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"{:.2f}F"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入格式错误"</span><span class="token punctuation">)</span></code></pre><p><strong>#</strong>：为注释<br><strong>‘’’ （这里） ‘’’</strong>：为多行注释，这其实是套用的字符串语法<br><strong>缩进</strong>：程序严格采用缩进分隔段落，也是唯一。<br><strong>命名规则</strong>：<strong><code>大小写字母、数字、下划线和中文组合，（大小写敏感，首字母不能是数字，不能是保留字）</code></strong><br><strong>保留字</strong>：</p><pre class=" language-python"><code class="language-python"><span class="token operator">and</span>、<span class="token keyword">elif</span>、<span class="token keyword">import</span>、<span class="token keyword">raise</span>、<span class="token keyword">global</span><span class="token keyword">as</span>、<span class="token keyword">else</span>、<span class="token keyword">in</span> 、<span class="token keyword">return</span>、nonlocal<span class="token keyword">assert</span>、<span class="token keyword">except</span>、<span class="token keyword">is</span>、<span class="token keyword">try</span>、<span class="token boolean">True</span><span class="token keyword">break</span>、<span class="token keyword">finally</span>、<span class="token keyword">lambda</span>、<span class="token keyword">while</span>、<span class="token boolean">False</span><span class="token keyword">class</span>、<span class="token keyword">for</span>、<span class="token operator">not</span>、<span class="token keyword">with</span>、None<span class="token keyword">continue</span>、<span class="token keyword">from</span>、<span class="token operator">or</span>、<span class="token keyword">yield</span>、<span class="token keyword">async</span><span class="token keyword">def</span>、<span class="token keyword">if</span>、<span class="token keyword">pass</span>、<span class="token keyword">del</span>、<span class="token keyword">await</span></code></pre><p><strong>列表</strong>：使用[]表示，采用’,’分割元素，如<strong>[‘F’，’f’]表示两个元素。使用<code>in</code>判断前者是否在列表中</strong>。<br><strong>赋值语句</strong>：=  ，如c = 9.<br><strong>分支语句</strong>：if、elif、else<br><strong>函数</strong>：类似于数学中的y=f(x),采用<strong>&lt;函数名&gt;([参数])</strong>方式使用<br><strong>输入函数</strong>：<strong>TempStr = input()</strong>，用户输入信息以字符串类型保存在变量TempStr中<br><strong>输出函数</strong>：<strong>print(“转换后温度为：{:.2f}C”.format(C))</strong><br><strong>评估函数eval()</strong>：去掉参数最外侧引号并执行余下语句的函数，如，<strong>eval(‘print(“Hello”)’)</strong></p><pre class=" language-javascript"><code class="language-javascript">#货币转换RR <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> RR<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"RMB"</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"USD{:.2f}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>RR<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6.78</span><span class="token punctuation">)</span><span class="token punctuation">)</span>elif RR<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"USD"</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"RMB{:.2f}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>RR<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6.78</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>计算机计数的演进过程：</strong></p><ul><li>1946-1981：计算机系统结构时代（35年）</li><li>1981-2008：网络和视窗时代（27年）2008年安卓诞生</li><li>2008-2016：复杂信息系统时代（8年）</li><li>2016 : 人工智能时代</li></ul><p><strong>不同编程语言的初心：</strong><br><strong><code>C</code></strong>：学习<strong>指针、内存、数据类型</strong>，本质是<strong>理解计算机系统结构</strong>，<strong>解决的是性能问题</strong>。<br><strong><code>Java</code></strong>：学习<strong>对象、跨平台、运行</strong>，本质是<strong>理解主客体关系</strong>，<strong>解决的是跨平台问题</strong>。<br><strong><code>C++</code></strong>：学习<strong>对象、多态、继承</strong>，本质是<strong>理解主客体关系</strong>，<strong>解决的是大规模程序问题</strong>。<br><strong><code>VB</code></strong>：学习<strong>对象、按钮、文本框</strong>，本质是<strong>理解交互逻辑</strong>，<strong>解决的是桌面应用问题</strong>。<br><strong><code>Python</code></strong>：学习<strong>编程逻辑、第三方库</strong>，本质<strong>理解问题求解</strong>，<strong>解决的是问题本身</strong>。</p><p><strong>编程语言的大致分类：</strong></p><ul><li>机器语言：<ul><li>一种二进制语言，直接使用二进制代码表达指令</li><li>计算机硬件可以直接执行，与具体CPU型号有关</li></ul></li><li>汇编语言：<ul><li>一种将二进制代码直接对应注记符的编程语言</li><li>汇编也与CPU型号有关</li></ul></li><li>高级语言：<ul><li>更接近自然语言，同时更容易描述计算问题</li><li>高级语言代码与具体CPU型号无关，编译后运行</li></ul></li><li>超级语言<ul><li>具有庞大计算生态，可以很容易利用已有代码功能</li><li>编程思维不再是刀工火种，而是集成开发</li></ul></li></ul><h2 id="turtle库"><a href="#turtle库" class="headerlink" title="turtle库"></a>turtle库</h2><p><img src="/postImg/16-3.jpg"><br><strong>import 保留字，引入了一个绘图库，名字叫turtle，没错就是海龟。</strong></p><p>turtle绘图体系诞生与1969年，主要用于程序设计入门，是python标准库之一。<br><strong><code>Python计算生态 = 标准库 + 第三方库：</code></strong></p><ul><li><strong>标准库</strong>：随解释器直接安装的功能模块。</li><li><strong>第三方库</strong>：需经过安装才能使用的功能模块。</li><li><strong>库Library、包Package、模块Module，统称模块。</strong></li></ul><p><strong>turtle的原理：有一只海龟，在窗体正中心，在画布上游走，走的轨迹形成了回值的图形。画布空间最小单位是像素。</strong></p><h3 id="turtle空间体系"><a href="#turtle空间体系" class="headerlink" title="turtle空间体系"></a>turtle空间体系</h3><p>了解之前你一定能够要知道，海龟只有在落在地面上(默认)才可以画出线条，还有海龟有专门的转向方法和前后走的方法，默认右为前。</p><p><strong><code>turtle画布使用数学中的绝对坐标，海龟最开始的坐标为(0,0)。</code></strong></p><p><strong>1、turtle.setup()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> startx<span class="token punctuation">,</span> starty<span class="token punctuation">)</span></code></pre><ul><li><strong>width</strong>和<strong>height</strong>两个参数调整画布的大小，<strong>startx</strong>和<strong>starty</strong>两个参数调整画布左上角距屏幕左上角的距离。</li></ul><p><strong><code>(0,0)坐标在画布的最中心位置。</code></strong></p><p><strong>2、turtle.goto()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre><ul><li>此语句可以直接跳到相应的绝对坐标上。</li></ul><p><strong><code>turtle画布使用海龟自身的前后左右为方向，海龟的前方为前方，可以通过方向函数改变其行进轨迹</code></strong></p><p><strong>3、turtle.circle()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> angle<span class="token punctuation">)</span></code></pre><ul><li><strong>r</strong>：正值代表圆心在海龟的左侧的距离，负值代表圆心在海龟的右侧的距离。</li><li><strong>angle</strong>绘制的角度，默认360度</li></ul><p><strong>4、turtle.bk()、turtle.fd()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">bk</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>   #向后turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>   #向前  原名turtle<span class="token punctuation">.</span>forward</code></pre><ul><li><strong>d</strong>为要走的距离，单位是像素</li></ul><p><strong><code>turtle画布在前后左右的基础上，使用数学中的角度坐标</code></strong></p><p><strong>5、turtle.seth()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>  #原名turtle<span class="token punctuation">.</span><span class="token function">setheading</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>angle</strong>为角度，-90就是向下</li></ul><p><strong>6、turtle.left()、turtle.right()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>    #意为向左turtle<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>   #意为向左</code></pre><ul><li><strong>angle</strong>为角度值，turtle.left(50)就是向左转动50度。</li></ul><p><strong>7、RGB色彩体系</strong><br>RGB是红绿蓝三个通道的颜色组合，几乎覆盖视力所能感知的所有颜色</p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">colormode</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css">white：   <span class="token number">255</span>，<span class="token number">255</span>，<span class="token number">255</span> or <span class="token number">1</span>，   <span class="token number">1</span>，   <span class="token number">1</span>     白色yellow：  <span class="token number">255</span>，<span class="token number">255</span>，<span class="token number">0</span>   or <span class="token number">1</span>，   <span class="token number">1</span>，   <span class="token number">0</span>     黄色magenta： <span class="token number">255</span>，<span class="token number">0</span>，  <span class="token number">255</span> or <span class="token number">1</span>，   <span class="token number">0</span>，   <span class="token number">1</span>     洋红cyan：    <span class="token number">0</span>，  <span class="token number">255</span>，<span class="token number">255</span> or <span class="token number">0</span>，   <span class="token number">1</span>，   <span class="token number">1</span>     青色blue：    <span class="token number">0</span>，  <span class="token number">0</span>，  <span class="token number">255</span> or <span class="token number">0</span>，   <span class="token number">0</span>，   <span class="token number">1</span>     蓝色black：   <span class="token number">0</span>，  <span class="token number">0</span>，  <span class="token number">0</span>   or <span class="token number">0</span>，   <span class="token number">0</span>，   <span class="token number">0</span>     黑色seashell：<span class="token number">255</span>，<span class="token number">245</span>，<span class="token number">238</span> or <span class="token number">1</span>，   <span class="token number">0.96</span>，<span class="token number">0.93</span>  海贝色gold：    <span class="token number">255</span>，<span class="token number">215</span>，<span class="token number">0</span>   or <span class="token number">1</span>，   <span class="token number">0.84</span>，<span class="token number">0</span>     金色pink：    <span class="token number">255</span>，<span class="token number">192</span>，<span class="token number">203</span> or <span class="token number">1</span>，   <span class="token number">0.75</span>，<span class="token number">0.80</span>  粉红色brown：   <span class="token number">165</span>，<span class="token number">42</span>， <span class="token number">42</span>  or <span class="token number">0.65</span>，<span class="token number">0.16</span>，<span class="token number">0.16</span>  棕色purple：  <span class="token number">160</span>，<span class="token number">32</span>， <span class="token number">240</span> or <span class="token number">0.63</span>，<span class="token number">0.13</span>，<span class="token number">0.94</span>  紫色tomato：  <span class="token number">255</span>，<span class="token number">99</span>， <span class="token number">71</span>  or <span class="token number">1</span>，   <span class="token number">0.39</span>，<span class="token number">0.28</span>  番茄色</code></pre><p><strong>8、turtle.up()、turtle.down()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">penup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     #画笔抬起   别名是turtle<span class="token punctuation">.</span><span class="token function">pu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">pendown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   #画笔落下   别名是turtle<span class="token punctuation">.</span><span class="token function">pd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>9、turtle.pensize()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">pensize</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span>     #线条宽度  别名是turtle<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span></code></pre><ul><li><strong>width</strong>为线条宽度，单位为像素</li></ul><p><strong>10、turtle.pencolor()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">pencolor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span></code></pre><ul><li><strong>color</strong>为线条颜色，可以是颜色字符串、RGB的小数、RGB的元组值</li><li>turtle.pencolor(“purple”)</li><li>turtle.pencolor(0.63，0.13，0.94)</li><li>turtle.pencolor((0.63，0.13，0.94))</li></ul><p><strong>10、turtle.done()</strong></p><pre class=" language-javascript"><code class="language-javascript">turtle<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>     #窗体手动退出</code></pre><h3 id="import用法"><a href="#import用法" class="headerlink" title="import用法"></a>import用法</h3><pre class=" language-javascript"><code class="language-javascript">一：<span class="token keyword">import</span> <span class="token operator">&lt;</span>库名<span class="token operator">></span>                       <span class="token keyword">import</span> turtle           <span class="token operator">&lt;</span>库名<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token operator">></span><span class="token punctuation">)</span>                  turtle<span class="token punctuation">.</span><span class="token function">pensize</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>二：<span class="token keyword">from</span> <span class="token operator">&lt;</span>库名<span class="token operator">></span> <span class="token keyword">import</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>函数名<span class="token operator">></span> or <span class="token operator">*</span> <span class="token punctuation">]</span>  <span class="token keyword">from</span> turtle <span class="token keyword">import</span> <span class="token operator">*</span><span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>函数参数<span class="token operator">></span><span class="token punctuation">)</span>                    <span class="token function">pensize</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>三：<span class="token keyword">import</span> <span class="token operator">&lt;</span>库名<span class="token operator">></span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>自起名字<span class="token operator">></span>           <span class="token keyword">import</span> turtle <span class="token keyword">as</span> t  <span class="token operator">&lt;</span>库别名<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token operator">></span><span class="token punctuation">)</span>                 t<span class="token punctuation">.</span><span class="token function">pensize</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span></code></pre><p><code>注意：第二种方法容易和程序其它名字重名。</code></p><p><strong>一些代码实例：</strong></p><pre class=" language-javascript"><code class="language-javascript">#六边形的绘制<span class="token keyword">import</span>  turtleturtle<span class="token punctuation">.</span><span class="token function">pencolor</span><span class="token punctuation">(</span><span class="token string">"tomato"</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">pensize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     turtle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>     turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">#八角图形的绘制<span class="token keyword">import</span> turtle <span class="token keyword">as</span> tt<span class="token punctuation">.</span><span class="token function">pensize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">#折叠图形的绘制<span class="token keyword">import</span>  turtleturtle<span class="token punctuation">.</span><span class="token function">pencolor</span><span class="token punctuation">(</span><span class="token string">"tomato"</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">pensize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     turtle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>     turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">#风轮绘制<span class="token keyword">import</span>  turtleturtle<span class="token punctuation">.</span><span class="token function">pencolor</span><span class="token punctuation">(</span><span class="token string">"tomato"</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">pensize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">135</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">135</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">seth</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span><span class="token function">fd</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span></code></pre><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>整数与数学中的整数的概念一致，可正可负，<strong>没有取值范围限制</strong>，<code>pow(x,y)</code>，计算x的y次方，想算多大算多大。<br>python中，整数有四种表示形式<strong>十进制</strong>0、<strong>二进制</strong>0b00、<strong>八进制</strong>0o00、<strong>十六进制</strong>0x00</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>与数学中实数的概念一致，带有小数点及小数的数字，取值值范围约-10的307次方到10的308次方，<strong>精度数量级10的-16次方</strong>。</p><p><code>浮点数间的运算存在不确定尾数</code>，<strong>大多数的语言都存在这个问题</strong>，比如0.1+0.2可能得到的是0.30000000000000004。这是因为<strong>将二进制数0.1转换成十进制数是不能完全相等的</strong>，只是无限接近的数值。<br>比如二进制0.1为:<br><strong>0.00011001100110011001100110011001100110011001100110011010</strong><br>而是转化为十进制0.1时为：<br><strong>0.1000000000000000055511151231257827021181583404541015625</strong></p><p>我们可以强制输出1位小数来解决，round( 0.1+0.2 ,  1 ) = 0.3，不确定尾数一般发生在10-16次方左右，所以round()十分有效。</p><p><strong>浮点数可以采用科学计数法表示</strong>，4.3e-3 = 0.0043、9.6E5 = 960000.0</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>与数学中的复数概念一致。<br>z = 1.23e-4  +   6.5e+89j 中，1.23e-4 为实部，6.5e+89j为虚部。</p><h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h3><p><code>x + y</code>  <strong>求和</strong><br><code>x - y</code>  <strong>求差</strong><br><code>x * y</code>  <strong>求积</strong><br><code>x / y</code>  <strong>求商</strong>，带小数<br><code>x // y</code> <strong>整除</strong>，不留小数<br><code>-y</code> <strong>负的y</strong><br><code>+y</code> <strong>就是y</strong><br><code>x % y</code> <strong>求余数</strong><br><code>x ** y</code> <strong>幂运算</strong>，<strong>当y为正为x的y次方，当y为负是x开y次方</strong>。<br>同时也支持像 x += y 这样的操作。</p><p><strong><code>类型间可以进行混合运算，生成结果为“最宽”类型</code></strong></p><h3 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h3><p><img src="/postImg/16-4.jpg"></p><h3 id="实例：天天向上的力量"><a href="#实例：天天向上的力量" class="headerlink" title="实例：天天向上的力量"></a>实例：天天向上的力量</h3><p><strong>问题1：</strong>每天进步千分之一，一年后会进步多少？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#每天进步千分之一</span>dayup <span class="token operator">=</span> pow<span class="token punctuation">(</span><span class="token number">1.001</span><span class="token punctuation">,</span><span class="token number">365</span><span class="token punctuation">)</span>daydown <span class="token operator">=</span> pow<span class="token punctuation">(</span><span class="token number">0.999</span><span class="token punctuation">,</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向上：{:.2f}，向下：{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dayup<span class="token punctuation">,</span>daydown<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>结果是向上1.44倍和向下0.67倍</li></ul><p><strong>问题2：</strong>每天进步千分之5呢？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#每天进步千分之5</span>dayfactor <span class="token operator">=</span> <span class="token number">0.005</span>dayup <span class="token operator">=</span> pow<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> dayfactor<span class="token punctuation">,</span><span class="token number">365</span><span class="token punctuation">)</span>daydown <span class="token operator">=</span> pow<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> dayfactor<span class="token punctuation">,</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"向上：{:.2f}，向下：{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dayup<span class="token punctuation">,</span>daydown<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>结果是向上6.17倍，向下0.16倍</li><li>换做1%，结果为向上37.78倍，和向下0.03倍</li></ul><p><strong>问题3：</strong>工作日进步1%，休息日退步1%</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#工作日进步1%，休息日退步1%</span>dayup <span class="token operator">=</span> <span class="token number">1.0</span>dayfactor <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        dayup <span class="token operator">=</span> dayup<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> dayfactor<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        dayup <span class="token operator">=</span> dayup<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> dayfactor<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"工作日的力量：{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dayup<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>结果是4.63</li></ul><p><strong>问题4：</strong>休息日退步1%，那工作日要多努力才能达到每天1%呢?</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#休息日退步1%，那工作日要多努力才能达到每天1%呢?</span><span class="token keyword">def</span> <span class="token function">dayup</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    dayup <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            dayup <span class="token operator">=</span> dayup<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.01</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dayup <span class="token operator">=</span> dayup<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> df<span class="token punctuation">)</span>    <span class="token keyword">return</span> dayupdayfactor <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">while</span> dayup<span class="token punctuation">(</span>dayfactor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">37.78</span><span class="token punctuation">:</span>    dayfactor <span class="token operator">+=</span> <span class="token number">0.001</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"工作日的努力参数：{:.3f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dayfactor<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>结果是1.9%</li><li>另外如果每天进步1.9%，那一年就是962.89倍!</li></ul><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p><strong>1、字符串的表示</strong></p><ul><li>由0个或多个字符组成的有序字符序列，由一对单引号或一对双引号表示。</li><li><strong>如果想在字符串中带有单引号或双引号字符，那再最外侧再加一对单引号或双引号。</strong></li><li>如果两个都相表示字符，那最外侧加三引号’’’。</li></ul><p>由一对单引或一对双引号表示，如：”你好”、’F’。<br>字符串是字符的有序序列，可以对其中的字符进行索引，如”你”是”你好”的第0个字符。</p><p><strong>2、切片索引操作</strong><br><img src="/postImg/16-2.jpg"></p><ul><li><strong>索引</strong>：返回字符串中单个字符   &lt;字符串&gt;[M]，如<strong>“你好”[0] == ‘你’’</strong></li><li><strong>切片</strong>：返回字符串中一段字符串   &lt;字符串&gt;[M : N]，如<strong>“你好今天”[1:2] == “好今”</strong></li></ul><p><strong>切片进阶：</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>字符串<span class="token operator">></span><span class="token punctuation">[</span>M<span class="token punctuation">:</span> N<span class="token punctuation">:</span> K<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#其中k为步长</span></code></pre><p>“123456789”[1:8:2]的结果为”2468”<br>“123456789”[ : :-1]的结果为”987654321”<br>“123456789”[1，3]它也等同于”123456789”[1，-9]，结果为”23”</p><p><strong>3、python同具有转移字符操作</strong></p><pre class=" language-python"><code class="language-python">\n 换行（光标移动到下行行首<span class="token operator">**</span>）\r 回车（光标移动到本行首） <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><strong>4、字符串操作符</strong><br><code>x + y</code> 连接两个字符串<br><code>n * x 或 x * n</code>  幅值n次字符串x<br><code>x in s</code>  如果x是s的子串，返回True,否则返回False。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#根据输入，获取星期</span>weekStr <span class="token operator">=</span> <span class="token string">"一二三四五六日"</span>weekId <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入星期数字(1-7):"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"星期"</span> <span class="token operator">+</span> weekStr<span class="token punctuation">[</span>weekId<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>5、字符串处理的函数、方法</strong></p><p><img src="/postImg/16-5.jpg"></p><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><ul><li>之前大多只有英文，国际上广泛使用Ascll码来表示所有英文字符，随着计算机应用到世界各地，世界上的一批学者统一了一种编码，<strong>几乎涵盖了所有字符的编码形式</strong>。</li><li><strong>从0到1114111</strong>(0x10FFFF)空间，每个编码对应一个字符</li><li><strong><code>Pyhton3中字符串的每个字符都是Unicode编码字符</code></strong>，也使得Python的程序能供不限于地方语言和地域</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>chr<span class="token punctuation">(</span><span class="token number">10004</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#输出一个特殊字符</span><span class="token string">'✔'</span><span class="token operator">>></span><span class="token operator">></span>str<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">"♉"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#查询一个字符的Unicode值</span><span class="token number">9801</span></code></pre><h3 id="字符串类型格式化format-方法"><a href="#字符串类型格式化format-方法" class="headerlink" title="字符串类型格式化format()方法"></a>字符串类型格式化format()方法</h3><p>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"{}:计算机{}的CPU占用率为{}%"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"2020"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>#输出结果为    <span class="token number">2020</span>：计算机C的CPU占用率为<span class="token number">10</span><span class="token operator">%</span>#槽<span class="token punctuation">{</span><span class="token punctuation">}</span>和format中逗号分隔的参数顺序是一样的</code></pre><p><strong><code>{ }</code>内部对字符串的格式化配置方法如下：</strong><br><img src="/postImg/16-6.jpg"></p><h2 id="Time库"><a href="#Time库" class="headerlink" title="Time库"></a>Time库</h2><p><strong>time库是python中处理时间的标准库</strong></p><ul><li>计算机时间的表达</li><li>提供获取系统时间并格式化输出功能</li><li>提供系统级精确计时功能，用于程序性能分析</li></ul><p><strong>1、时间获取</strong><br><code>time.time()</code>   获取当前时间戳，一个浮点数，从1970年1约1日凌晨00点开始的到现在一直累加的一个时间数值，单位是s。<br><code>time.ctime()</code> 获取当前时间，转换成易读的字符串形式输出。<br><code>time.gmtime()</code> 获取当前时间，表示为计算机可以处理的时间格式。</p><p><strong>2、时间格式化</strong><br>将时间合理的展示出来<br><code>time.strftime(tpl , ts)</code> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> timet <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">strftime</span><span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>#输出为<span class="token string">"2020-10-18 19:46:20"</span></code></pre><p><strong>其中控制符：</strong><br><strong><code>%Y</code></strong>：<strong>年份</strong>——0000-9999<br><strong><code>%m</code></strong>：<strong>月份</strong>——01-12<br><strong><code>%B</code></strong>：<strong>月份名称</strong>——January-December<br><strong><code>%b</code></strong>：<strong>月份缩写</strong>——Jan - Dec<br><strong><code>%d</code></strong>：<strong>日期</strong>——01-31<br><strong><code>%A</code></strong>：<strong>星期</strong>——Monday-Sunday<br><strong><code>%a</code></strong>：<strong>星期缩写</strong>——Mon-Sun<br><strong><code>%H</code></strong>：<strong>小时</strong>——0-24<br><strong><code>%I</code></strong>：<strong>小时</strong>——0-12<br><strong><code>%p</code></strong>：<strong>上/下午</strong>——AM，PM<br><strong><code>%M</code></strong>：<strong>分钟</strong>——00-59<br><strong><code>%S</code></strong>：<strong>秒</strong>——00-59</p><p><code>time.strptime(tpl , ts)</code> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> timet <span class="token operator">=</span> <span class="token string">'2020-10-18 19:46:20'</span>time<span class="token punctuation">.</span><span class="token function">strptime</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>#与time<span class="token punctuation">.</span><span class="token function">strftime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法反向操作</code></pre><p><strong>3、程序计时</strong><br><code>time.perf_counter()</code> 获取CPU级别的精确时间值，可通过两次调用算出精确的延时时间。单位是秒。<br><code>time.sleep(s)</code>休眠时间，time.sleep(3.3)意为程序等待3.3s</p><pre class=" language-javascript"><code class="language-javascript">#文本进度条 简单的开始<span class="token keyword">import</span> timescale <span class="token operator">=</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"------执行开始------"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>scale<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> i    b <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>scale <span class="token operator">-</span> i<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>scale<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"{:^3.0f}%[{}->{}]"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"------执行结束------"</span><span class="token punctuation">)</span>#文本进度条 单行动态刷新<span class="token keyword">import</span> time<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r{:3}%"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>#文本进度条<span class="token keyword">import</span> timescale <span class="token operator">=</span> <span class="token number">50</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"执行开始"</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span>scale<span class="token comment" spellcheck="true">//2,'-'))</span>start <span class="token operator">=</span> <span class="token function">time_perf_counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>scale <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'*'</span><span class="token operator">*</span>i    b <span class="token operator">=</span> <span class="token string">'.'</span><span class="token operator">*</span><span class="token punctuation">(</span>scale<span class="token operator">-</span>i<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>sclae<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>    dur <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time_perf_counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r{:^3.0f}%[{}->{}]{:.2f}s"</span><span class="token punctuation">,</span><span class="token function">format</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>dur<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"执行结束"</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span>scale<span class="token comment" spellcheck="true">//2,'-'))</span></code></pre><p><strong>不同文本进度条的设计函数：</strong><br><img src="/postImg/16-7.jpg"></p><p><strong>一些代码实例：</strong></p><pre class=" language-javascript"><code class="language-javascript">#三次方格式化n <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n3 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"{:-^20}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">)</span># 星号三角形n <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"{0:^{1}}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>#凯撒密码s <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'a'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">:</span>         t <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span> <span class="token punctuation">)</span>    elif <span class="token string">'A'</span> <span class="token operator">&lt;=</span> c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">:</span>        t <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span> <span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        t <span class="token operator">+</span><span class="token operator">=</span> c<span class="token function">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>#字符串分段组合s <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"{}+{}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ls<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="程序的控制结构"><a href="#程序的控制结构" class="headerlink" title="程序的控制结构"></a>程序的控制结构</h2><p>python语法其中有很多其实和C语言或与其它语言都很相似，也可以说这些语法是通用的逻辑不同的表达</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p><strong>1、单分支</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">#例子tem <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> tem <span class="token operator">==</span> <span class="token number">99</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"猜对了"</span><span class="token punctuation">)</span></code></pre><p><strong>2、二分支结构</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句一<span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句二<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">#例子tem <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> tem <span class="token operator">==</span> <span class="token number">99</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"猜对了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"猜错了"</span><span class="token punctuation">)</span></code></pre><p><strong><code>二分之紧凑式：</code></strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>表达式<span class="token number">1</span><span class="token operator">></span> <span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token keyword">else</span> <span class="token operator">&lt;</span>表达式<span class="token number">2</span><span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">#例子tem <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"猜{}了"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"对"</span> <span class="token keyword">if</span> tem <span class="token operator">==</span> <span class="token number">99</span> <span class="token keyword">else</span> <span class="token string">"错"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果条件为真就输出左边，否则输出右边，缺点就是不能赋值使用。</p><p><strong>3、多分支</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句一<span class="token operator">></span>elif<span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句二<span class="token operator">></span>   <span class="token operator">...</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句N<span class="token operator">></span></code></pre><p><strong>4、判断操作符：</strong><br>&lt;、&lt;=、&gt;、&gt;=、==、!=，以及逻辑操作符and、or、not</p><pre class=" language-javascript"><code class="language-javascript">#例子guess <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> guess <span class="token operator">&lt;</span> <span class="token number">99</span> or guess <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"猜错了"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"猜对了"</span><span class="token punctuation">)</span></code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句一<span class="token operator">></span>excpt<span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句二<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">#例子<span class="token keyword">try</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"亲输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>excpt<span class="token punctuation">:</span>                               #只要程序出错就会进入excpt    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数"</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句一<span class="token operator">></span>excpt <span class="token operator">&lt;</span>异常类型<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句二<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">#例子<span class="token keyword">try</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"亲输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>excpt NameError<span class="token punctuation">:</span>      #只要程序触发NameError类型错误就会进入excpt    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数"</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">#异常处理高级使用<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span>excpt<span class="token punctuation">:</span>                   #异常进入    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span><span class="token keyword">else</span>：                   #没进异常就进入    <span class="token operator">&lt;</span>语句<span class="token number">3</span><span class="token operator">></span><span class="token keyword">finally</span>：                #最后一定会执行<span class="token keyword">finally</span>    <span class="token operator">&lt;</span>语句<span class="token number">4</span><span class="token operator">></span></code></pre><p><strong>身体质量指数BMI</strong><br>Body Mass Index</p><ul><li>国际上常用的衡量人体肥胖和健康程度的重要标准，主要用于统计分析</li><li>定义：<strong>BMI</strong> = 体重(<strong>kg</strong>) <strong>/ </strong> 身高²(<strong>m²</strong>)</li></ul><p><strong>健康标准：</strong></p><ul><li><strong>偏瘦</strong> 国际【 &lt; 18.5 】 国内【 &lt; 18.5 】</li><li><strong>正常</strong> 国际【 18.5 ~ 25 】   国内【 18.5 ~ 24 】</li><li><strong>偏胖</strong> 国际【 25 ~ 30 】  国内【 24 ~ 28 】</li><li><strong>肥胖</strong> 国际【 &gt;= 30 】  国内【 &gt;= 28 】</li></ul><pre class=" language-javascript"><code class="language-javascript">#BMI健康指数height<span class="token punctuation">,</span>weight <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入身高（米）和体重（公斤）[逗号隔开]："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bmi <span class="token operator">=</span> weight <span class="token operator">/</span> <span class="token function">pow</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token keyword">if</span> bmi <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">:</span>     who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"偏瘦"</span><span class="token punctuation">,</span><span class="token string">"偏瘦"</span>elif <span class="token number">18.5</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">:</span>     who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"正常"</span><span class="token punctuation">,</span><span class="token string">"正常"</span>elif <span class="token number">24</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span><span class="token number">25</span><span class="token punctuation">:</span>     who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"正常"</span><span class="token punctuation">,</span><span class="token string">"偏胖"</span>elif <span class="token number">25</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">:</span>     who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"偏胖"</span><span class="token punctuation">,</span><span class="token string">"偏胖"</span>elif <span class="token number">28</span> <span class="token operator">&lt;=</span> bmi <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">:</span>     who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"偏胖"</span><span class="token punctuation">,</span><span class="token string">"肥胖"</span><span class="token keyword">else</span><span class="token punctuation">:</span>     who<span class="token punctuation">,</span>nat <span class="token operator">=</span> <span class="token string">"肥胖"</span><span class="token punctuation">,</span><span class="token string">"肥胖"</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"BMI指标为：国际'{0}'，国内'{1}'"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>who<span class="token punctuation">,</span>nat<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="遍历循环"><a href="#遍历循环" class="headerlink" title="遍历循环"></a>遍历循环</h3><p><strong>1、遍历某个结构形成的循环运行方式：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token operator">&lt;</span>循环变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>遍历结构<span class="token operator">></span><span class="token punctuation">:</span>      #循环变量可以是命名规则中的任意名字    <span class="token operator">&lt;</span>语句<span class="token operator">></span></code></pre><ul><li>由保留字for和in组成，完成遍历所有元素后结束</li><li>每此循环，所获得元素放入循环变量，并执行一次语句块</li></ul><p><strong>2、计数循环（N次）</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>      #循环N次    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> #or <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"nihao:"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span></code></pre><ul><li>遍历由range()函数产生的数字序列，产生循环</li></ul><pre class=" language-javascript"><code class="language-javascript">#循环遍历高级用法<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>M，N，K<span class="token punctuation">)</span><span class="token punctuation">:</span>      #循环N<span class="token operator">-</span>M次，步长为K    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">#例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello:"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>Hello<span class="token punctuation">:</span> <span class="token number">1</span>Hello<span class="token punctuation">:</span> <span class="token number">3</span>Hello<span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p><strong>3、字符串遍历循环：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> c <span class="token keyword">in</span> s <span class="token punctuation">:</span>       #s是个字符串遍历字符串中每个字符    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><ul><li>s是字符串，遍历字符串的每个字符，产生循环</li></ul><pre class=" language-javascript"><code class="language-javascript">#例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"Python"</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span>P<span class="token punctuation">,</span>y<span class="token punctuation">,</span>t<span class="token punctuation">,</span>h<span class="token punctuation">,</span>o<span class="token punctuation">,</span>n<span class="token punctuation">,</span></code></pre><p><strong>4、列表遍历循环：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> item <span class="token keyword">in</span> ls <span class="token punctuation">:</span>  #ls是个列表，遍历其每个元素    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><ul><li>ls是一个列表，遍历其每个元素，产生循环</li></ul><pre class=" language-javascript"><code class="language-javascript">#例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"PY"</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token number">123</span><span class="token punctuation">,</span>PY<span class="token punctuation">,</span><span class="token number">456</span></code></pre><p><strong>5、文件遍历循环</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> line <span class="token keyword">in</span> fi <span class="token punctuation">:</span>  #fi是个文件，遍历其每一行    <span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>    #并输出每一行</code></pre><ul><li>fi是一个文件标识符，遍历其每一行，产生循环</li></ul><p><strong>for in 遍历循环其实就是遍历其数据结构的每个元素（<code>只要结构包含多个元素</code>），其中它也可以遍历<code>元组</code>、<code>字典</code>等数据类型</strong></p><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token punctuation">:</span>     #直到条件不满足时结束    <span class="token operator">&lt;</span>语句<span class="token operator">></span></code></pre><p><strong>1、循环控制保留字：</strong><br><strong><code>break</code>：</strong> <strong>跳出并结束当前循环</strong><br><strong><code>continue</code>：</strong> <strong>结束本次循环，继续之后的循环</strong><br>注意：它们都搭配for和while使用，如果循环有嵌套，<code>break只能跳出一层循环</code>。而continue是结束当此循环，但还在循环中，并没有跳出循环本身。</p><pre class=" language-javascript"><code class="language-javascript">#例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"PYTHON"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">"T"</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>PYHON#例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"PYTHON"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">"T"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>PY#双层循环例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>s <span class="token operator">=</span> <span class="token string">"PYTHON"</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">while</span> s <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>PYTHONPYTHOPYTHPYTPYP</code></pre><p><strong>2、循环的高级用法：循环 + else</strong></p><pre class=" language-javascript"><code class="language-javascript">#循环的高级用法：循环 <span class="token operator">+</span> <span class="token keyword">else</span><span class="token keyword">for</span> <span class="token operator">&lt;</span>变量<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>遍历结构<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>              #正常结束循环后一定进入，就是没有被<span class="token keyword">break</span>跳出一定进入    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span>#或者是<span class="token keyword">while</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句<span class="token number">1</span><span class="token operator">></span><span class="token keyword">else</span>：             #正常结束循环后一定进入，就是没有被<span class="token keyword">break</span>跳出一定进入    <span class="token operator">&lt;</span>语句<span class="token number">2</span><span class="token operator">></span></code></pre><ul><li>当循环没有倍break语句退出时，执行else语句块</li><li>else语句块作为“正常”完成循环的奖励</li><li>这里else的用法与异常处理中else用法相似</li></ul><pre class=" language-javascript"><code class="language-javascript">#例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"PYTHON"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">"T"</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"正常退出"</span><span class="token punctuation">)</span>PYTHON正常退出#例子<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"PYTHON"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">"T"</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"正常退出"</span><span class="token punctuation">)</span>PY</code></pre><p><strong><code>以上是python语法中的全部分支结构！如果你看过一边，那你已经掌握了所有关于分支循环的语法知识了！</code></strong></p><h3 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h3><p>random库是使用随机数的python标准库</p><ul><li>伪随机数：采用梅森旋转算法生成的伪随机序列中元素</li><li>random库主要用于生成随机数</li><li>使用random库：import random</li><li>基本随机数函数：seed(),random()</li><li>扩展随机数函数：randint(),getrandbits(),uniform(),randrange(),choice(),shuffle()</li></ul><p><strong>计算机要产生随机数，需要一个随机数种子比如10</strong>,然后通过<strong><code>梅森旋转算法</code></strong>，产生一些列随机序列0.5714025946899135、0.4288890546751146、0.5780913011344704……并且，一个种子确定一个随机数序列。</p><p>♈、(a=None)   初始化给定的随机数种子，默认为第一次调用random时所对应的系统时间</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#产生种子10对应的序列</span><span class="token operator">></span><span class="token number">0.57</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>建议使用给定的种子，因为种子一样随机数也一样，可以方便的复现之前程序运行的情况</p><p>♉、<strong>random( ) </strong>生成一个0.0到1.0之间的随机小数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0.5714025946899135</span></code></pre><p>♊、<strong>randint( a , b )</strong> 生成一个a到b之间的整数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token number">64</span></code></pre><p>♋、<strong>randrange(m,n[,k]) </strong>生成一个[m,n)之间以k为步长的随机整数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">80</span></code></pre><p>♌、<strong>getrandbits( k )</strong> 生成一个k比特长的随机整数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token number">37885</span></code></pre><p>♍、<strong>uniform( a , b ) </strong>生成一个[a,b]之间的随机小数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token number">13.096321648808136</span></code></pre><p>♎、<strong>choice( seq )</strong> 从序列seq中随机选择一个元素</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">8</span></code></pre><p>♏、<strong>shuffle( seq )</strong>将序列seq中元素随机排列，返回打乱后的序列</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><h3 id="计算圆周率"><a href="#计算圆周率" class="headerlink" title="计算圆周率"></a>计算圆周率</h3><p><strong>1、圆周率的近似计算公式</strong><br><img src="/postImg/16-8.jpg"><br>运用计算公式编写：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#CAl.py</span>pi <span class="token operator">=</span> <span class="token number">0</span>N <span class="token operator">=</span> <span class="token number">100</span>    <span class="token comment" spellcheck="true">#最大值计算到100</span><span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    pi <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">/</span>pow<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>   \    <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>k<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率值是：{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>2、使用蒙特卡罗方法</strong><br><img src="/postImg/16-8-1.jpg"><br>蒙特卡罗方式是采用散点的方法，在正方形上进行随机散点，通过扇形内部点的数量和正方形上所有点的数量的比值，计算圆周率</p><p>运用蒙特卡罗方法编写：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#python</span><span class="token keyword">from</span> random <span class="token keyword">import</span> random<span class="token keyword">from</span> time <span class="token keyword">import</span> perf_counterDARTS <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span>hits <span class="token operator">=</span> <span class="token number">0.0</span>start <span class="token operator">=</span> perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>DARTS<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     x<span class="token punctuation">,</span>y <span class="token operator">=</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>     dist <span class="token operator">=</span> pow<span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#计算点到圆心的距离</span>     <span class="token keyword">if</span> dist <span class="token operator">&lt;=</span> <span class="token number">1.0</span><span class="token punctuation">:</span>          hits <span class="token operator">=</span> hits <span class="token operator">+</span><span class="token number">1</span>pi <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>hits<span class="token operator">/</span>DARTS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#扇形内/正方型内 然后×4</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率值时：{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运行时间是：{:.5f}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>3、理解方法思维：</strong></p><ul><li>数学思维：找到公式，利用公式求解</li><li>计算思维：抽象一种过程，用计算机自动化求解</li></ul><p><strong>一些代码实例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1-2+3-4...966‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬</span>s <span class="token operator">=</span> <span class="token number">0</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> count <span class="token operator">&lt;=</span><span class="token number">966</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> count<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        s <span class="token operator">-=</span> count    <span class="token keyword">else</span><span class="token punctuation">:</span>        s <span class="token operator">+=</span> count    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#三位水仙花数</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将整数变为字符串！！！！！！！</span>    <span class="token keyword">if</span> pow<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> pow<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> pow<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> i <span class="token punctuation">:</span>        s <span class="token operator">+=</span> <span class="token string">"{},"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#四位玫瑰数</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将整数变为字符串！！！！！！！</span>    <span class="token keyword">if</span> pow<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> pow<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> pow<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> pow<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> i <span class="token punctuation">:</span>        ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#用户登录的三次机会</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'Kate'</span><span class="token operator">and</span> password <span class="token operator">==</span> <span class="token string">'666666'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3次用户名或者密码均有误！退出程序。"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#找出100内所有素数</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#难点：</span>    <span class="token comment" spellcheck="true">#1.range(2,2) 返回空值，直接跳过循环，未执行break,else语句会被执行</span>    <span class="token comment" spellcheck="true">#2.for.j循环执行完毕后，如果未找到满足i%j==0的数值，证明其是素数，break不会被执行，else会被执行；如果找到i%j==0的数值，证明其不是素数，break会被执行，else则不会被执行；</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> i<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#print("{0}不是素数".format(i));</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print("{0}是素数".format(i));</span>            ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#print(ls);</span><span class="token comment" spellcheck="true">#求和</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> k <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    s <span class="token operator">+=</span> k<span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#运行结果</span><span class="token comment" spellcheck="true">#[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>一、函数定义</strong></p><ul><li><strong>函数是一段代码的表示</strong><ul><li>函数是一段具有特定功能的、可重用的语句组</li><li>函数是一种<strong>功能的抽象</strong>，一般函数表达特定功能，</li><li>两个作用：<strong>①降低编程难度</strong>和<strong>②代码复用</strong><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token number">0</span>或多个<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>函数体<span class="token operator">></span><span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算n!</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  s <span class="token operator">*=</span> i<span class="token keyword">return</span> s</code></pre></li></ul></li><li><p><strong>类似像数学中的函数 <code>y = f( x )</code></strong></p><ul><li>函数定义时，所指定的参数是一种占位符</li><li>函数定义后，如果不经过调用，不会被执行</li><li>函数定义时，参数是输入、函数体时处理、结果是输出（IPO）。</li></ul></li><li><p><strong>调用是运行函数代码的方式</strong></p><ul><li>调用时要给出实际参数</li><li>实际参数替换定义中的参数</li><li>函数调用后得到返回值</li></ul></li></ul><p><strong>二、参数</strong></p><p><strong>函数可以有参数，也可以没有参数，但必须保留括号</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我也是函数"</span><span class="token punctuation">)</span></code></pre><p><strong>1、函数定义时还可以为某些参数指定默认值，构成可选参数</strong></p><ul><li>Python中要求在设定或定义函数的时候 ，所有的可选参数，必须放在非可选参数之后，非可选参数也就是必选参数，也就是说你调用这个函数的时候必须要有这个参数，必须要有你就放在前面，这是一种强制约定。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token operator">&lt;</span>非可选参数<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>可选参数<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算n!//m       //为整除</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#如果调用时不给出m的值，m就为1</span>    s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">*=</span> i    <span class="token keyword">return</span> s<span class="token operator">//</span>m</code></pre><p><strong>2、可变参数传递</strong></p><ul><li>即不确定多少个</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token operator">&lt;</span>非可选参数<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>函数体<span class="token operator">></span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算n!</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">*=</span> i    <span class="token keyword">for</span> item <span class="token keyword">in</span> b<span class="token punctuation">:</span>        s <span class="token operator">*=</span> item    <span class="token keyword">return</span> s<span class="token operator">>></span><span class="token operator">></span>fact<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#就是10！*2*6*5</span></code></pre><p><strong>3、参数传递的两种方式</strong></p><ul><li>如def一个函数fact( n , m = 1 )<br>可以有fact( 10 , 5 ) ,这是按照位置传参<br>也可以有fact( m = 5, n = 10 ),这是按照名称传参</li></ul><p><strong>三、函数的返回值</strong></p><ul><li>函数可以有返回0个或多个结果<ul><li>return保留字用来传递返回值</li><li>函数可以有返回值，可以刻没有，<strong>可以有return，也可以没有 </strong></li><li><strong>return可以传递0个或多个返回值</strong></li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例子</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">*=</span> i    <span class="token keyword">return</span> s<span class="token operator">//</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token operator">>></span><span class="token operator">></span>fact<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">725760</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回的是元组类型</span></code></pre><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><p><strong>①局部变量和全局变量是不同的变量</strong></p><ul><li><strong>局部变量是函数内部的占位符</strong>，与全局变量可以重名但不同</li><li>函数运算结束后，局部变量被释放</li><li><strong>可以使用global保留字在函数内部使用全局变量。</strong></li></ul><pre class=" language-python"><code class="language-python">n<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span>     <span class="token operator">//</span>此处为全局变量<span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">1</span>          <span class="token operator">//</span>此处未用<span class="token keyword">global</span>声明，所以s是局部变量    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token operator">*=</span> i        <span class="token keyword">return</span> s<span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>fact<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token number">3628800</span><span class="token punctuation">,</span> <span class="token number">100</span>      <span class="token comment" spellcheck="true">#全局变量并未改动</span>n<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> s          <span class="token operator">//</span>声明s是全局变量    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token operator">*=</span> i        <span class="token keyword">return</span> s<span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>fact<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token number">3628800</span><span class="token punctuation">,</span> <span class="token number">3628800</span></code></pre><p><strong>② 局部变量为组合数据类型且未在函数内部创建，它等同于全局变量</strong></p><pre class=" language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#通过使用[]真实创建了一个全局变量列表ls</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#此处ls是列表类型，未创建则等同于全局变量</span>    <span class="token keyword">return</span>func<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#通过使用[]真实创建了一个全局变量列表ls</span><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true">#此处真实创建列表类型</span>    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#此处ls是列表类型，未创建则等同于全局变量</span>    <span class="token keyword">return</span>func<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span></code></pre><ul><li>在Pytho中，组合数据类型是由指针来体现的，所以函数中，没有真实创建组合数据类型，它使用的变量是使用的指针，而指针指向的是外部的全局变量</li></ul><h3 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h3><p><strong>lambda函数返回函数名作为结果</strong></p><ul><li>lambda函数是一种匿名函数，即没有名字的函数</li><li>使用lambda保留字定义，<strong>函数名是返回结果</strong></li><li>lambda函数用于定义简单的、能够在一行内表示的函数</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>函数名<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">&lt;</span>参数<span class="token operator">></span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>表达式<span class="token operator">></span>    它等价于  <span class="token keyword">def</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>参数<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                <span class="token operator">&lt;</span>函数体<span class="token operator">></span>                                                <span class="token keyword">return</span> <span class="token operator">&lt;</span>返回值<span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y <span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token operator">>></span><span class="token operator">></span>f<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">>></span><span class="token operator">></span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> <span class="token string">"lambda函数"</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">lambda</span>函数</code></pre><p><strong>谨慎使用lambda函数</strong>，它主要用作与一些特定函数方法的参数。<br><strong>一般情况下，建议使用def定义的普通函数</strong></p><h3 id="七段数码管显示日期时间"><a href="#七段数码管显示日期时间" class="headerlink" title="七段数码管显示日期时间"></a>七段数码管显示日期时间</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#SevenDigitsDrawV2.py</span><span class="token keyword">import</span> turtle<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">drawGap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#绘制数码管间隔</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawLine</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#绘制单段数码管</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> draw <span class="token keyword">else</span> turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDigit</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#根据数字绘制七段数码管</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> date<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'年'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'月'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'日'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            drawDigit<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    drawDate('2018-10=10+')</span>    drawDate<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m=%d+'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong><code>理解方法思维：</code></strong></p><ul><li><strong>模块化思维</strong>：确定模块接口，封装功能</li><li><strong>规则化思维</strong>：抽象过程为规则，计算机自动执行</li><li><strong>化繁为简</strong>：将大功能拆分为小功能组合，分而治之</li></ul><h3 id="代码复用与函数递归"><a href="#代码复用与函数递归" class="headerlink" title="代码复用与函数递归"></a>代码复用与函数递归</h3><p><strong>一、代码复用：</strong></p><ul><li><p><strong>把代码当成资源进行抽象</strong><br><strong>①代码资源化</strong>：程序代码是一种用来表达计算的“资源”<br><strong>②代码抽象化</strong>：使用函数等方法对代码赋予更高级别的定义<br><strong>③代码复用</strong>：同一份代码在需要时可以被重复使用</p></li><li><p><strong>函数和对象是代码复用的两种方式</strong><br><code>函数</code><strong>是将代码名在代码层面建立了初步抽象</strong><br><code>对象</code><strong>的属性和方法（即&lt; a &gt;.&lt; b &gt;&lt; a &gt;.&lt; b &gt;()）在函数之上再次组值进行抽象</strong>。</p></li></ul><p><strong>二、模块化设计</strong></p><ul><li><p>分而治之<br>通过函数或对象封装将程序分为模块及模块间的表达<br>具体包括：主程序、子程序和子程序间关系<br><strong>分而治之</strong>：是一种分成抽象、体系化的设计思想</p></li><li><p>耦合<br>紧耦合：两个部分之间交流很多，无法独立存在<br>松耦合：两个部分之间交流较少，可以独立存在<br><strong>模块内部紧耦合、模块之间松耦合。</strong></p></li></ul><p><strong>三、递归</strong></p><ul><li><strong>函数递归的定义：函数中调用函数自身的方式</strong>，<ul><li>类似于数学归纳法。是归纳法用编程思维的体现。</li></ul></li><li>两个关键特征：<ul><li><strong>链条</strong>：计算过程存在递归链条</li><li><strong>基例</strong>：存在一个或多个不需要再次递归的基例</li></ul></li><li>函数+分支<ul><li>递归本身是一个函数，需要函数定义方式描述</li><li>函数内部，采用分支语句对输入参数进行判断</li><li>基例和链条，分别编写对应代码</li></ul></li></ul><p><img src="/postImg/16-9.jpg"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#实现s[::-1]</span><span class="token keyword">def</span> <span class="token function">rvs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> rvs<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>s<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p><strong>例子解析</strong></p><ul><li><strong>斐波那契数列</strong>,也称黄金分割数列，费式数列，神奇数列<br>即0，0，1，2，3，5，8，13，21，34，55，89…….<br>即每一项都等于前一项和前前一项之和，前一项和后一项之比越来越靠近0.618<br>F(n) = F(n-1) + F(n-2)</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span></code></pre><ul><li><strong>汉诺塔</strong></li></ul><pre class=" language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> count    <span class="token keyword">if</span> n <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}:{}->{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        hanoi<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> dst<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}:{}->{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        hanoi<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>hanoi<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">:</span>A<span class="token operator">-</span><span class="token operator">></span>C<span class="token number">2</span><span class="token punctuation">:</span>A<span class="token operator">-</span><span class="token operator">></span>B<span class="token number">1</span><span class="token punctuation">:</span>C<span class="token operator">-</span><span class="token operator">></span>B<span class="token number">3</span><span class="token punctuation">:</span>A<span class="token operator">-</span><span class="token operator">></span>C<span class="token number">1</span><span class="token punctuation">:</span>B<span class="token operator">-</span><span class="token operator">></span>A<span class="token number">2</span><span class="token punctuation">:</span>B<span class="token operator">-</span><span class="token operator">></span>C<span class="token number">1</span><span class="token punctuation">:</span>A<span class="token operator">-</span><span class="token operator">></span>C<span class="token number">7</span></code></pre><p><strong><code>我们只知道递归过程只关心链条，我们只关心当圆盘数量为n的时候，它怎么拆解为当前与当前n-1之间的一个关系，至于n-1下面怎么去做，我们不需要去关心</code></strong></p><p>如何理解递归？</p><ul><li>看过《盗梦空间吗》？本质上就是递归</li><li>学过数学归纳法吗？本质上就是递归</li><li>听过这个故事吗？“从前有座山，山里有座庙，庙里有个老和尚在讲故事…”</li><li>假设有个捡金币游戏，每一条路都有两个分叉路口，每过一个分叉路口都能捡到1金币，假设在第10个路的尽头放着10枚金币，并且没有路可走了，你只能原路回来，请问你能捡到几枚金币？</li></ul><h3 id="科赫雪花"><a href="#科赫雪花" class="headerlink" title="科赫雪花"></a>科赫雪花</h3><p>分型几何是一种迭代的几何图形，广泛存在与自然界中<br><img src="/postImg/16-9-1.jpg"><br>代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#KochDrawV1.py</span><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">koch</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>           koch<span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    koch<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 0阶科赫曲线长度，阶数</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#KochDrawV2.py</span><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">koch</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>           koch<span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    level <span class="token operator">=</span> <span class="token number">3</span>      <span class="token comment" spellcheck="true"># 3阶科赫雪花，阶数</span>    koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span>         turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>    koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>    koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>还有康托尔集、谢尔宾斯基三角形、门格海绵…</li></ul><h3 id="PyInstaller库"><a href="#PyInstaller库" class="headerlink" title="PyInstaller库"></a>PyInstaller库</h3><p>PyInstaller第三方库的作用式可以将.py源代码转换成Windows、Linux、Mac OS X 下无需源代码的可执行文件.exe。</p><ul><li>PyInstaller库是第三方库<br>官方网站：<a href="http://www.pyinstaller.org" target="_blank" rel="noopener">http://www.pyinstaller.org</a></li></ul><p>使用pip工具安装，pip一般默认和python一起安装。因为式第三方库，所以需要在命令行使用。</p><ul><li><p><strong>安装：</strong><br>(cmd命令行) pip install pyinstaller</p></li><li><p><strong>打包成exe：</strong><br>(cmd命令行) pyinstaller -F &lt;文件名.py&gt;</p></li><li><p><strong>添加图标打包成exe：</strong><br>(cmd命令行) pyinstaller -i &lt;图片名.ico&gt; -F &lt;文件名.py&gt;</p></li></ul><p><strong>常用参数</strong>：<br><code>-h</code> 查看帮助<br><code>--clean</code> 清理打包过程中的临时文件<br><code>-D，--onedir</code> 默认值，生成dist文件夹<br><code>-F，--onedir</code> 在dist文件夹中只生成独立的打包文件<br><code>-i&lt;图标文件名.ioc&gt;</code> 指定打包过程使用的图标(icon)文件</p><pre class=" language-javascript"><code class="language-javascript">#<span class="token number">1</span>、以整数<span class="token number">17</span>为随机数种子，获取用户输入整数N为长度，产生<span class="token number">3</span>个长度为N位的密码，密码的每位是一个数字。每个密码单独一行输出。<span class="token keyword">import</span> randomdef <span class="token function">genpwd</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token punctuation">(</span>length<span class="token number">-1</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">"{}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>length <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>random<span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">genpwd</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>#<span class="token number">2</span>、获得用户输入数字N，计算并输出从N开始的<span class="token number">5</span>个质数，单行输出，质数间用逗号<span class="token punctuation">,</span>分割。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬注意：需要考虑用户输入的数字N可能是浮点数，应对输入取整数；最后一个输出后不用逗号。def <span class="token function">prime</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">0</span>    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> m    <span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  # 缩小遍历的范围，提升速度        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>            ls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> lsn <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>  # 因为可能输入有浮点数    n <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>  # 保证输入<span class="token number">5.0</span>时，输出为整数<span class="token number">5</span>。这里只根据题目中只输入正浮点或者正整数时做的处理    n <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span># 上面的<span class="token keyword">if</span><span class="token operator">...</span><span class="token keyword">else</span>可以用一行代码搞定# n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>ls <span class="token operator">=</span> <span class="token function">prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>length <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">for</span>  i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>length<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span># 看了答案后优化的版本def <span class="token function">prime</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> m <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> False    <span class="token keyword">else</span><span class="token punctuation">:</span>        end <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> m<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> False        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Truen <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>  # 因为可能输入有浮点数    n <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>  # 保证输入<span class="token number">5.0</span>时，输出为整数<span class="token number">5</span>。这里只根据题目中只输入正浮点或者正整数时做的处理    n <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token function">prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        count <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>    n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span></code></pre><h2 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h2><p>3.14是一个数据，但程序中要处理的往往是一组数据。那如何让程序更好的组织一组数据？<br>Python中有三大类组合数据类型：</p><ul><li><strong>集合</strong>类型</li><li><strong>序列</strong>类型<ul><li>元组类型</li><li>列表类型</li></ul></li><li><strong>字典</strong>类型</li></ul><h3 id="一、集合类型及操作"><a href="#一、集合类型及操作" class="headerlink" title="一、集合类型及操作"></a>一、集合类型及操作</h3><p><strong>1、集合类型的定义</strong></p><ul><li>集合是多个元素的无序组合<ul><li>集合类型与数学中的集合概念一致，集合元素之间无序，<strong>每一个元素唯一，不存在相同元素</strong>。</li><li><strong><code>集合元素不可更改!</code></strong>，不能是可变数据类型。</li></ul></li><li>集合是多个元素的<strong>无序组合</strong><ul><li><strong>集合用大括号<code>{}</code>表示，元素间用<code>逗号</code>分隔</strong>。</li><li><strong>建集合类型用{}或set(),<code>建立空集合类型时必须使用set()</code></strong></li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用{}建立集合，其中包含字符串、元组、整数等众多类型数据</span><span class="token operator">>></span><span class="token operator">></span> A <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">}</span>   <span class="token punctuation">{</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"py123"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#使用set()建立集合</span><span class="token punctuation">{</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>C <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">#集合元素不重复</span><span class="token punctuation">{</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span></code></pre><p><strong>2、集合操作符</strong></p><ul><li><strong><code>S | T</code> 并</strong></li><li><strong><code>S &amp; T</code> 交</strong></li><li><strong><code>S - T</code> 差</strong></li><li><strong><code>S ^ T</code> 补</strong></li><li>并且可以使用<strong>真假判断</strong>操作S &lt;= T</li><li>可以使用增强操作符：<strong>|=、-=、&amp;=、^=</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用{}建立集合，其中包含字符串、元组、整数等众多类型数据</span><span class="token operator">>></span><span class="token operator">></span>A <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>B <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">"pypy123"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token operator">-</span>B      <span class="token comment" spellcheck="true">#A中有的但B没有的</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>B<span class="token operator">-</span>A<span class="token punctuation">{</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token operator">&amp;</span>B<span class="token punctuation">{</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token operator">|</span>B<span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>A<span class="token operator">^</span>B<span class="token punctuation">{</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">}</span></code></pre><p><strong>3、集合处理方法</strong></p><ul><li><strong><code>S.add(x)</code> 如果x不在集合S中，将x增加到S</strong></li><li><strong><code>S.discard(x)</code> 移除S中元素x，如果x不在集合S中，不报错</strong></li><li><strong><code>S.remove(x)</code> 移除S中元素x，如果x不在集合S中，产生KeyError</strong></li><li><strong><code>S.clear()</code> 移除S中所有元素</strong></li><li><strong><code>S.pop()</code> 从S中取出一个元素，更新S(即S数少1)若S为空产生KeyError异常</strong></li><li><strong><code>S.copy()</code> 返回集合S的一个副本</strong></li><li><strong><code>S.len(S)</code> 返回集合S的元素个数</strong></li><li><strong><code>x in S</code> 判断S中元素x，x在集合中返回True，否则返回False</strong></li><li><strong><code>x not in S</code> 判断S中元素x，x不在集合中返回True，否则返回False</strong></li><li><strong><code>set(x)</code> 将其他类型变量x转变为集合类型</strong></li></ul><pre class=" language-javascript"><code class="language-javascript">#其中的pop方法，可以配合<span class="token keyword">try</span>，except使用<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> True<span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    except<span class="token punctuation">:</span>        passp123y<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>A<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       #A变成了一个空集合<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>A<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token keyword">for</span> item <span class="token keyword">in</span> A<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>p123y<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>A<span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">}</span>     #集合定义后顺序不定相同#包含关系<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token string">"p"</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span>True<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">}</span> <span class="token operator">>=</span> <span class="token punctuation">{</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span>False#数据去重！！！：集合类型所有元素无重复<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>s <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>   #利用了集合无重复元素的特点<span class="token punctuation">{</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>lt <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  #还可以将集合转换为列表<span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span></code></pre><h3 id="二、序列类型及操作"><a href="#二、序列类型及操作" class="headerlink" title="二、序列类型及操作"></a>二、序列类型及操作</h3><p><strong>1、序列类型定义</strong></p><p><strong>序列是具有先后关系的一组元素</strong></p><ul><li><strong>序列是一维元素向量，元素类型可以不同</strong></li><li>类似数学元素序列：s0,s1,……sn-1</li><li>元素间由序号引导，<strong>通过下标访问序列的特定元素</strong></li></ul><p><strong>序列是基类类型</strong></p><ul><li>它衍生出：<strong>①字符串类型、②元组类型、③列表类型</strong></li><li><strong>字符串继承</strong>了它的元素下标定义，及<strong>①反向递减序号和②正向递增序号。</strong></li></ul><p><strong>2、序列处理函数及方法</strong></p><ul><li><strong><code>S + T</code> 连接两个序列S和T</strong></li><li><strong><code>S * n 或 n * S</code> 将序列复制n次</strong></li><li><strong><code>S[i]</code> 索引，返回S中的第i个元素</strong></li><li><strong><code>S[i:j]或S[i:j:k]</code> 切片，返回序列S中第i到第j以k为步长的元素子序列</strong></li><li><strong><code>x in S</code> 判断S中元素x，x在集合中返回True，否则返回False</strong></li><li><strong><code>x not in S</code> 判断S中元素x，x不在集合中返回True，否则返回False</strong></li><li><strong><code>len(S)</code> 返回序列S的元素个数</strong></li><li><strong><code>min(S)</code> 返回序列S中最小元素，S中元素需要可以比较</strong></li><li><strong><code>max(S)</code> 返回序列S中最大元素，S中元素需要可以比较</strong></li><li><strong><code>S.index(x)或S.index(x,i,j)</code> 返回序列S从i开始到j位置中第一次出现元素x的位置</strong></li><li><strong><code>S.count(x)</code> 返回序列S中出现x的总次数</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">".io"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>len<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#查看序列S的元素个数</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span>s <span class="token operator">=</span> <span class="token string">"python123.io"</span><span class="token operator">>></span><span class="token operator">></span>max<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#查看序列S中最大元素</span><span class="token string">'y'</span></code></pre><h4 id="元组类型及操作方法"><a href="#元组类型及操作方法" class="headerlink" title="元组类型及操作方法"></a>元组类型及操作方法</h4><p><strong>1、元组类型的定义</strong></p><p><strong>元组是序列类型的一张扩展：</strong></p><ul><li>元组是一种序列类型，一旦创建就不能被修改。</li><li>使用小括号()或tuple()创建，元素间用逗号，分隔</li><li>可以使用或不使用小括号</li></ul><pre class=" language-javascript"><code class="language-javascript">def <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>     #<span class="token number">1</span>，<span class="token number">2</span>本身就是一个元组类型</code></pre><p>元组类型就是将元素有序的排列，它的元素的每个值是不能改变的</p><p><strong>元组继承序列类型的全部通用操作：</strong></p><ul><li><strong>元组因为创建后不能修改，因此没有特殊操作</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>TTT <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">,</span><span class="token string">"human"</span><span class="token operator">>></span><span class="token operator">></span>TTT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true">#倒序输出</span><span class="token punctuation">(</span><span class="token string">'human'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x001100</span><span class="token punctuation">,</span><span class="token string">"python123.io"</span><span class="token punctuation">,</span>TTT<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>color<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#索引</span><span class="token string">'tiger'</span><span class="token operator">>></span><span class="token operator">></span>color<span class="token punctuation">(</span><span class="token number">0x001100</span><span class="token punctuation">,</span><span class="token string">"python123.io"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token string">'human'</span><span class="token punctuation">)</span></code></pre><h4 id="列表类型及操作"><a href="#列表类型及操作" class="headerlink" title="列表类型及操作"></a>列表类型及操作</h4><p>列表是序列类型的一种扩展，<strong>十分常用</strong></p><ul><li>列表是一种序列类型，创建后可以随意被修改</li><li>使用方括号[]或list()创建，元素间用逗号，分隔</li><li>列表中各元素类型可以不同，无长度限制</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>ls<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>lt <span class="token operator">=</span> ls<span class="token operator">>></span><span class="token operator">></span>lt         <span class="token comment" spellcheck="true">#并没有创建两个列表，只是lt和ls同时指向了同一列表</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span></code></pre><p>注：方括号[]真正创建一个列表，赋值仅传递引用</p><p><strong>1、列表类型操作函数和方法</strong></p><ul><li><strong><code>ls[i] = x</code> 替换列表ls第i元素为x</strong></li><li><strong><code>ls[i:j:k] = lt</code> 用列表lt替换ls切片后对应元素子列表</strong></li><li><strong><code>del ls[i]</code> 删除列表ls中第i元素</strong></li><li><strong><code>del ls[i:j:k]</code> 删除列表ls中第i到第j以k为步长的元素</strong></li><li><strong><code>ls += lt</code> 更新列表ls，将列表lt元素增加到列表ls中</strong></li><li><strong><code>ls *= n</code> 更新列表ls，将其元素重复n次</strong></li><li><strong><code>ls.append(x)</code> 在列表ls最后增加一个元素x</strong></li><li><strong><code>ls.clear()</code> 删除列表ls中所有元素</strong></li><li><strong><code>ls.insert(i,x)</code> 在列表ls的第i位置增加元素x</strong></li><li><strong><code>ls.pop(i)</code> 将列表ls中第i位置元素取出并删除该元素</strong></li><li><strong><code>ls.remove(x)</code>将列表ls中出现的第一个元素删除</strong></li><li><strong><code>ls.reverse()</code>将列表ls中的元素反转</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>ls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#向[1到2）元素间替换元素为1，2，3，4</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">del</span> ls<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">#删除以3为步长的元素</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>ls<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"human"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token string">'human'</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token string">'human'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span>cat<span class="token punctuation">]</span>lt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                   <span class="token comment" spellcheck="true">#定义一个空列表</span>lt <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true">#向lt新增5个元素</span>lt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>                 <span class="token comment" spellcheck="true">#修改lt中第二个元素</span>lt<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#向lt中第二个位置增加一个元素</span><span class="token keyword">del</span> lt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                 <span class="token comment" spellcheck="true">#从lt中第一个位置删除一个元素</span><span class="token keyword">del</span> lt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>               <span class="token comment" spellcheck="true">#删除lt中第1-3位置元素</span><span class="token number">0</span> <span class="token keyword">in</span> lt           <span class="token comment" spellcheck="true">#判断lt中是否包含数字0</span>lt<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#向lt新增数字0</span>lt<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#返回数字0所在lt中的索引</span>len<span class="token punctuation">(</span>lt<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#lt的长度</span>max<span class="token punctuation">(</span>lt<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#lt中最大元素</span>lt<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#清空lt</span></code></pre><h4 id="序列类型应用场景"><a href="#序列类型应用场景" class="headerlink" title="序列类型应用场景"></a>序列类型应用场景</h4><ul><li>元组用于元素不改变的应用场景，更多用于固定搭配场景</li><li>列表更加灵活，它是最常用的序列类型</li><li>最主要作用：表示一组有序数据，进而操作它们</li></ul><p><strong>1、元素遍历</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>由于元组类型数据具有不可改变元素的特点，它可以对数据进行保护。</p><p><strong>2、数据保护</strong></p><ul><li><strong>如果不希望数据被程序改变，转换成元组类型。</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"tiger"</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>lt tuple<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>lt<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'tiger'</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span></code></pre><p>如果在多人参与的项目中，需要保护数据，就让接口使用元组类型进行传递，也间接的保护了数据</p><h4 id="基本统计值计算"><a href="#基本统计值计算" class="headerlink" title="基本统计值计算"></a>基本统计值计算</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#CalStatisticsV1.py</span><span class="token keyword">def</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true">#获取用户不定长度的输入</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    iNumStr <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入数字(回车退出): "</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> iNumStr <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>iNumStr<span class="token punctuation">)</span><span class="token punctuation">)</span>        iNumStr <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入数字(回车退出): "</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> nums<span class="token keyword">def</span> <span class="token function">mean</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#计算平均值</span>    s <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> num    <span class="token keyword">return</span> s <span class="token operator">/</span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dev</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> mean<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#计算方差</span>    sdev <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        sdev <span class="token operator">=</span> sdev <span class="token operator">+</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> mean<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">return</span> pow<span class="token punctuation">(</span>sdev <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">median</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#计算中位数</span>    sorted<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    size <span class="token operator">=</span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>    <span class="token keyword">if</span> size <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        med <span class="token operator">=</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>size<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        med <span class="token operator">=</span> numbers<span class="token punctuation">[</span>size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> medn <span class="token operator">=</span>  getNum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#主体函数</span>m <span class="token operator">=</span>  mean<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均值:{},方差:{:.2},中位数:{}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>m<span class="token punctuation">,</span> dev<span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span>median<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>能力扩展：</p><ul><li>获取多个数据：从控制台获取多个不确定数据的方法</li><li>分隔多个函数：模块化设计方法</li><li>充分利用函数：充分利用Python提供的内容函数</li></ul><h3 id="字典类型及操作"><a href="#字典类型及操作" class="headerlink" title="字典类型及操作"></a>字典类型及操作</h3><h4 id="字典类型定义"><a href="#字典类型定义" class="headerlink" title="字典类型定义"></a>字典类型定义</h4><ul><li>理解”<strong>映射</strong>“<ul><li><strong>映射是一种键(索引)和值(数据)的对应</strong></li></ul></li><li>字典类型是“映射”的体现<ul><li>键值对：键是数据索引的扩展</li><li><strong>字典是键值对的集合，键值对之间无序</strong></li><li>采用大括号{}和dict()创建，键值对用冒号:表示，之间用逗号分隔</li></ul></li><li>在字典变量中，通过键获得值<ul><li>[]用来向字典变量中索引或增加元素 </li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript">#例<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"中国"</span><span class="token punctuation">:</span><span class="token string">"beijing"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">:</span><span class="token string">"华盛顿"</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>d<span class="token punctuation">[</span><span class="token string">"中国"</span><span class="token punctuation">]</span><span class="token string">'beijing'</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>de <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">type</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span>     #<span class="token function">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 返回变量x的类型<span class="token operator">&lt;</span>classs <span class="token string">'dict'</span><span class="token operator">></span></code></pre><p><strong>1、字典类型处理函数及方法</strong></p><ul><li><strong><code>del d[k]</code> 删除字典中键值k对应的数据值</strong></li><li><strong><code>k in d</code> 判断键值k是否在字典d中，是返回True，否则返回False</strong></li><li><strong><code>d.keys()</code> 返回字典d中所有键的信息</strong></li><li><strong><code>d.values()</code> 返回字典d中所有的值的信息</strong></li><li><strong><code>d.items()</code> 返回字典d中所有键值对信息</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"中国"</span><span class="token punctuation">:</span><span class="token string">"beijing"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">:</span><span class="token string">"华盛顿"</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"中国"</span> <span class="token keyword">in</span> d<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'中国'</span>，<span class="token string">'美国'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这些数据可以用for in 遍历，但不能当作列表操作</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'beijing'</span>，<span class="token string">'华盛顿'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li><strong><code>d.get(k,&lt;default&gt;)</code> 键k存在，则返回相应值，不在则返回&lt; default &gt;值</strong></li><li><strong><code>d.pop(k,&lt;default&gt;)</code> 键k存在，则取出相应值，不在则返回&lt; default &gt;值</strong></li><li><strong><code>d.popitem</code> 随机从字典d中取出一个键值对，以元组形式返沪</strong></li><li><strong><code>d.clear()</code> 删除所有的键值对</strong></li><li><strong><code>len(d)</code> 返回字典d中元素的个数</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"中国"</span><span class="token punctuation">:</span><span class="token string">"beijing"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">:</span><span class="token string">"华盛顿"</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">,</span><span class="token string">"意大利"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#如果中国在就返回对应的值，不在就返回 意大利</span><span class="token string">'北京'</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"巴基斯坦"</span><span class="token punctuation">,</span><span class="token string">"伊斯兰堡"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#巴基斯坦不在，所以返回伊斯兰堡</span><span class="token string">"伊斯兰堡"</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'美国'</span><span class="token punctuation">,</span><span class="token string">'华盛顿'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#定义一个空字典</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>     <span class="token comment" spellcheck="true">#向d新增2个键值对元素</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>      <span class="token comment" spellcheck="true">#修改第2个元素</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"C"</span> <span class="token keyword">in</span> d        <span class="token comment" spellcheck="true">#判断字符"C"是否是d的键</span><span class="token operator">>></span><span class="token operator">></span>len<span class="token punctuation">(</span>d<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#计算d的长度</span><span class="token operator">>></span><span class="token operator">></span>d<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#清空d</span></code></pre><ul><li><strong>创建字典时，如果相同键对应不同值，字典采用最后（最新）一个”键值对”。</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">3</span></code></pre><p><strong>2、字典类型应用场景</strong><br>映射的表达</p><ul><li>映射无处不在，键值对无处不在</li></ul><p>①元素的遍历</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token operator">&lt;</span>语句块<span class="token operator">></span></code></pre><p>注：</p><ul><li>映射关系采用键值对表达</li><li>字典类型使用{}和dic()创建，键值对之间用:分隔</li><li>d[key]方式既可以索引，也可以赋值</li><li>字典类型由一批操作方法和函数，最重要的是.get()</li></ul><h3 id="jieba库"><a href="#jieba库" class="headerlink" title="jieba库"></a>jieba库</h3><ul><li>jieba是优秀的中文分词第三方库<ul><li>中文文本需要通过分词获得单个的词语</li><li>jieba是优秀的中文分词第三方库，需要额外安装</li></ul></li></ul><p><strong>1、jieba库的安装</strong><br><strong>(cmd命令行)<code>pip install jieba</code></strong></p><p><strong>2、jieba分词的原理</strong></p><ul><li>利用一个中文词库，确定中文字符之间的关联的概率</li><li>中文字符之间概率大的组成词组，形成分词结果</li><li>除了分词，用户还可以添加自定义的词语</li></ul><p><strong>3、jieba分词的三种模式</strong></p><ul><li>精确模式、全模式、搜索引擎模式</li><li><strong>精确模式</strong>：把文本精确的切分开，不存在沉余</li><li><strong>全模式</strong>：把文本中所有可能的词语都扫描出来，有沉余</li><li><strong>搜索引擎模式</strong>：在精确模式基础上，对长词再次切分</li></ul><p><strong>4、jieba库常用函数</strong></p><ul><li><strong><code>jieba.lcut(s)</code> 精确模式，返回一个列表类型的分词结果</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span><span class="token string">"中国是一个伟大的国家"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'一个'</span><span class="token punctuation">,</span><span class="token string">'伟大'</span><span class="token punctuation">,</span><span class="token string">'的'</span><span class="token punctuation">,</span><span class="token string">'国家'</span><span class="token punctuation">]</span></code></pre><ul><li><strong><code>jieba.lcut(s,cut_all=True)</code> 全模式，返回一个列表类型的分词结果，存在沉余</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span><span class="token string">"中国是一个伟大的国家"</span><span class="token punctuation">,</span>cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'国是'</span><span class="token punctuation">,</span><span class="token string">'一个'</span><span class="token punctuation">,</span><span class="token string">'伟大'</span><span class="token punctuation">,</span><span class="token string">'的'</span><span class="token punctuation">,</span><span class="token string">'国家'</span><span class="token punctuation">]</span></code></pre><ul><li><strong><code>jieba.lcut_for_search()</code> 搜索引擎模式，返回一个列表类型的分词结果，存在沉余</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>jieba<span class="token punctuation">.</span>lcut_for_search<span class="token punctuation">(</span><span class="token string">"中华人民共和国是伟大的"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'中华'</span><span class="token punctuation">,</span><span class="token string">'华人'</span><span class="token punctuation">,</span><span class="token string">'人民'</span><span class="token punctuation">,</span><span class="token string">'共和'</span><span class="token punctuation">,</span><span class="token string">'共和国'</span><span class="token punctuation">,</span><span class="token string">'中华人民共和国'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'伟大'</span><span class="token punctuation">,</span><span class="token string">'的'</span><span class="token punctuation">]</span></code></pre><ul><li><strong><code>jieba.add_word(w)</code> 向分词词典增加新词</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>jieba<span class="token punctuation">.</span>add<span class="token punctuation">.</span>word<span class="token punctuation">(</span><span class="token string">"蟒蛇语言"</span><span class="token punctuation">)</span></code></pre><p><strong>5、文本词频统计</strong></p><pre class=" language-javascript"><code class="language-javascript">#哈姆雷特#CalHamletV1<span class="token punctuation">.</span>pydef <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    txt <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hamlet.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    txt <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">'!"#$%&amp;()*+,-./:;&lt;=>?@[\\]^_‘{|}~'</span><span class="token punctuation">:</span>        txt <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>   #将文本中特殊字符替换为空格    <span class="token keyword">return</span> txthamletTxt <span class="token operator">=</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>words  <span class="token operator">=</span> hamletTxt<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>                counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  #如果单次出现过就<span class="token operator">+</span><span class="token number">1</span>，没出现键添加items <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>key<span class="token operator">=</span>lambda x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span>True<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span> count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    print <span class="token punctuation">(</span><span class="token string">"{0:&lt;10}{1:>5}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>#三国演义#CalThreeKingdomsV1<span class="token punctuation">.</span>py<span class="token keyword">import</span> jiebatxt <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"threekingdoms.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>words  <span class="token operator">=</span> jieba<span class="token punctuation">.</span><span class="token function">lcut</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  items <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>key<span class="token operator">=</span>lambda x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span>True<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span> count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    print <span class="token punctuation">(</span><span class="token string">"{0:&lt;10}{1:>5}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span>#三国修正#CalThreeKingdomsV2<span class="token punctuation">.</span>py<span class="token keyword">import</span> jiebaexcludes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"将军"</span><span class="token punctuation">,</span><span class="token string">"却说"</span><span class="token punctuation">,</span><span class="token string">"荆州"</span><span class="token punctuation">,</span><span class="token string">"二人"</span><span class="token punctuation">,</span><span class="token string">"不可"</span><span class="token punctuation">,</span><span class="token string">"不能"</span><span class="token punctuation">,</span><span class="token string">"如此"</span><span class="token punctuation">}</span>txt <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"threekingdoms.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>words  <span class="token operator">=</span> jieba<span class="token punctuation">.</span><span class="token function">lcut</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    elif word <span class="token operator">==</span> <span class="token string">"诸葛亮"</span> or word <span class="token operator">==</span> <span class="token string">"孔明曰"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"孔明"</span>    elif word <span class="token operator">==</span> <span class="token string">"关公"</span> or word <span class="token operator">==</span> <span class="token string">"云长"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"关羽"</span>    elif word <span class="token operator">==</span> <span class="token string">"玄德"</span> or word <span class="token operator">==</span> <span class="token string">"玄德曰"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"刘备"</span>    elif word <span class="token operator">==</span> <span class="token string">"孟德"</span> or word <span class="token operator">==</span> <span class="token string">"丞相"</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> <span class="token string">"曹操"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rword <span class="token operator">=</span> word    counts<span class="token punctuation">[</span>rword<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>rword<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">for</span> word <span class="token keyword">in</span> excludes<span class="token punctuation">:</span>    del counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span>items <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>key<span class="token operator">=</span>lambda x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span>True<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word<span class="token punctuation">,</span> count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    print <span class="token punctuation">(</span><span class="token string">"{0:&lt;10}{1:>5}"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字典反转输出</span>s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    e <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>        e<span class="token punctuation">[</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入错误"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#沉默的羔羊最多单词</span><span class="token keyword">import</span> jiebaf <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"沉默的羔羊.txt"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#ls = f.read().split()</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> w <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    d<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>maxc <span class="token operator">=</span> <span class="token number">0</span>maxw <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">if</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> maxc <span class="token operator">and</span> len<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>        maxc <span class="token operator">=</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span>        maxw <span class="token operator">=</span> k    <span class="token keyword">if</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> maxc <span class="token operator">and</span> len<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">and</span> k <span class="token operator">></span> maxw<span class="token punctuation">:</span>        maxw <span class="token operator">=</span> k<span class="token keyword">print</span><span class="token punctuation">(</span>maxw<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一个数中，含有的不同数字之和</span>n <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>ss <span class="token operator">=</span> set<span class="token punctuation">(</span>n<span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ss<span class="token punctuation">:</span>    s <span class="token operator">+=</span> eval<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#人名最多统计</span>s <span class="token operator">=</span> <span class="token triple-quoted-string string">'''双儿 洪七公 赵敏 赵敏 逍遥子 鳌拜 殷天正 金轮法王 乔峰 杨过 洪七公 郭靖        杨逍 鳌拜 殷天正 段誉 杨逍 慕容复 阿紫 慕容复 郭芙 乔峰 令狐冲 郭芙        金轮法王 小龙女 杨过 慕容复 梅超风 李莫愁 洪七公 张无忌 梅超风 杨逍        鳌拜 岳不群 黄药师 黄蓉 段誉 金轮法王 忽必烈 忽必烈 张三丰 乔峰 乔峰        阿紫 乔峰 金轮法王 袁冠南 张无忌 郭襄 黄蓉 李莫愁 赵敏 赵敏 郭芙 张三丰        乔峰 赵敏 梅超风 双儿 鳌拜 陈家洛 袁冠南 郭芙 郭芙 杨逍 赵敏 金轮法王        忽必烈 慕容复 张三丰 赵敏 杨逍 令狐冲 黄药师 袁冠南 杨逍 完颜洪烈 殷天正        李莫愁 阿紫 逍遥子 乔峰 逍遥子 完颜洪烈 郭芙 杨逍 张无忌 杨过 慕容复        逍遥子 虚竹 双儿 乔峰 郭芙 黄蓉 李莫愁 陈家洛 杨过 忽必烈 鳌拜 王语嫣        洪七公 韦小宝 阿朱 梅超风 段誉 岳灵珊 完颜洪烈 乔峰 段誉 杨过 杨过 慕容复        黄蓉 杨过 阿紫 杨逍 张三丰 张三丰 赵敏 张三丰 杨逍 黄蓉 金轮法王 郭襄        张三丰 令狐冲 赵敏 郭芙 韦小宝 黄药师 阿紫 韦小宝 金轮法王 杨逍 令狐冲 阿紫        洪七公 袁冠南 双儿 郭靖 鳌拜 谢逊 阿紫 郭襄 梅超风 张无忌 段誉 忽必烈        完颜洪烈 双儿 逍遥子 谢逊 完颜洪烈 殷天正 金轮法王 张三丰 双儿 郭襄 阿朱        郭襄 双儿 李莫愁 郭襄 忽必烈 金轮法王 张无忌 鳌拜 忽必烈 郭襄 令狐冲        谢逊 梅超风 殷天正 段誉 袁冠南 张三丰 王语嫣 阿紫 谢逊 杨过 郭靖 黄蓉        双儿 灭绝师太 段誉 张无忌 陈家洛 黄蓉 鳌拜 黄药师 逍遥子 忽必烈 赵敏        逍遥子 完颜洪烈 金轮法王 双儿 鳌拜 洪七公 郭芙 郭襄 赵敏'''</span>ls <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>max_name<span class="token punctuation">,</span> max_cnt <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>    <span class="token keyword">if</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> max_cnt<span class="token punctuation">:</span>        max_name<span class="token punctuation">,</span> max_cnt <span class="token operator">=</span> k<span class="token punctuation">,</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>max_name<span class="token punctuation">)</span></code></pre><h2 id="文件和数据格式化"><a href="#文件和数据格式化" class="headerlink" title="文件和数据格式化"></a>文件和数据格式化</h2><h3 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h3><p>文件是数据的抽象和集合</p><ul><li>文件是存储在辅助存储器上的数据序列</li><li>文件是数据存储的一种形式</li><li>文件展现形态：文本文件和二进制文件</li></ul><p>文本文件 VS 二进制文件</p><ul><li>文本文件和二进制文件只是文件的展示方式</li><li><strong>本质上，所有文件都是二进制形式存储</strong> </li><li>形式上，所有文件采用两种方式展示</li></ul><p>文件是数据的抽象和集合</p><ul><li>文本文件<ul><li>由<strong>单一特定编码</strong>组成的文件，如UTF-8编码</li><li>由于存在编码，也被看成存储着的长字符串</li><li>适用于例如：.txt、.py、…</li></ul></li><li>二进制文件<ul><li>直接由比特0和1组成，<strong>没有统一字符编码</strong></li><li>一般存在于二进制0和1组织结构</li><li>适用于：.png、.avi、…</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token string">"中国是个伟大的国家！"</span>二进制：中国是个伟大的国家！二进制：b<span class="token string">'\xd6\xd0\xb9\xfa\xca\...............'</span>f<span class="token punctuation">.</span>txt文件保存：<span class="token string">"中国是个伟大的国家！"</span><span class="token comment" spellcheck="true">#文本形式打开文件</span>tf <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"rt"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#rt为文本，rb为二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>中国是个伟大的国家!tf <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#rt为文本，rb为二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>b'\xd6\xd0\xb9\xfa\xca\<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><strong>文件处理的步骤：打开 - 操作 - 关闭</strong></p><ul><li>读文件<ul><li><strong>a.read(size)</strong></li><li><strong>a.readline(size)</strong></li><li><strong>a.readlines(hint)</strong></li></ul></li><li>写文件<ul><li><strong>a.write(s)</strong></li><li><strong>a.writelines(lines)</strong></li><li><strong>a.seek(offset)</strong></li></ul></li></ul><p><strong>1、文件的打开</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>变量名<span class="token operator">></span> <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token operator">&lt;</span>文件名<span class="token operator">></span>，<span class="token operator">&lt;</span>打开模式<span class="token operator">></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#文件句柄    文件路径和名称    文本or二进制</span><span class="token comment" spellcheck="true"># windows的路径使用的是'\'，而在python是转移字符，需要用'/'代替，也可以用\\</span>例子：D<span class="token punctuation">:</span>\PCC\f<span class="token punctuation">.</span>txt<span class="token string">"D:/PCC/f.txt"</span>  或者  <span class="token string">"D:\\PCC\\f.txt"</span>这是绝对路径，而  相对路径  是文件和程序之间的路径：<span class="token string">"./PY/f.txt"</span></code></pre><p>打开模式：<br><strong><code>&#39;r&#39;</code></strong>：<strong>只读模式</strong>，默认值，如果文件不存在，返回FlieNotFoundError<br><strong><code>&#39;w&#39;</code></strong>：<strong>覆盖写模式</strong>，文件不存在则创建，存在则完全覆盖<br><strong><code>&#39;x&#39;</code></strong>：<strong>创建写模式</strong>，文件不存在则创建，存在则返回FlieExistsError<br><strong><code>&#39;a&#39;</code></strong>：<strong>追加写模式</strong>，文件不存在则创建，存在则在文件最后追加内容<br><strong><code>&#39;b&#39;</code></strong>：<strong>二进制文件模式</strong><br><strong><code>&#39;t&#39;</code></strong>：<strong>文本文件模式</strong>，默认值<br><strong><code>&#39;+&#39;</code></strong>：<strong>追加模式</strong>，与r/w/x/a/一同使用，在原功能基础上增加同时读写功能</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#文本形式、只读模式、默认值 等同于f = open("f.txt"，"rt") </span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#文本形式、追加写模式、不可读</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"f.txt"</span><span class="token punctuation">,</span><span class="token string">"a+"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#文本形式、追加写模式、可读</span></code></pre><p><strong>2、文件的关闭</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>文件名<span class="token operator">></span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>3、文件内容的读取</strong><br><strong><code>&lt;f&gt;.read(size=-1)</code></strong>   读入全部内容，如果给出参数，读入前size长度<br><strong><code>&lt;f&gt;.readline(size=-1)</code></strong>   读入一行内容，如果给出参数，<strong>读入该行</strong>前size长度<br><strong><code>&lt;f&gt;.readlines(hint=-1)</code></strong>   读入文件所有行，以每行为元素形成列表，如果给出参数，读入前hint行</p><p><strong>4、文件全文本操作</strong><br>遍历全文本：方法一</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#一次性读入</span>fname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入要打开的文件名称："</span><span class="token punctuation">)</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#对全文本txt进行处理</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>对于一个大文件，一次性读入全部会占用大量的内存！<br><strong>遍历全文本：方法一</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#分次读入</span>fname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入要打开的文件名称："</span><span class="token punctuation">)</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#读入两个字节</span>    <span class="token keyword">while</span> txt <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#对全文本txt进行处理</span>    txt <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>逐行遍历文件：方法一</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#一次读入分行处理</span>fname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入要打开的文件名称："</span><span class="token punctuation">)</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#所有信息以行生成一个列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>逐行遍历文件：方法二</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#分行读入，逐行处理</span>fname <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入要打开的文件名称："</span><span class="token punctuation">)</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>5、数据的文件写入</strong></p><p><strong><code>&lt;f&gt;.write(s)</code></strong> 向文件写入一个字符串或字节流<br><strong><code>&lt;f&gt;.writelines(s)</code></strong> 将一个元素为字符串的列表拼接写入文件<br><strong><code>&lt;f&gt;.seek(offset)</code></strong> 改变当前文件操作指针的位置，offset含义如下：0-文件开头；1-当前位置；2-文件结尾</p><pre class=" language-python"><code class="language-python">f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#回到文件开头</span></code></pre><p><strong><code>一定要关心写入文件的指针的位置变化！！！</code></strong></p><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"fs.txt"</span><span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"中国"</span><span class="token punctuation">,</span><span class="token string">"法国"</span><span class="token punctuation">,</span><span class="token string">"美国"</span><span class="token punctuation">]</span>fo<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#缺少这句，下面就不会输出正确！！因为指针在文件的末尾</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="自动轨迹绘制"><a href="#自动轨迹绘制" class="headerlink" title="自动轨迹绘制"></a>自动轨迹绘制</h3><ul><li>不是写代码，而是写数据绘制</li><li><strong>数据脚本是自动化最重要的第一步</strong></li></ul><p>基本思路</p><ul><li>步骤一：定义数据文件格式（接口）</li><li>步骤二：编写程序，根据文件接口解析参数绘制图形</li><li>步骤三：编制数据文件</li></ul><p>接口定义：</p><pre class=" language-python"><code class="language-python"><span class="token number">300</span><span class="token punctuation">,</span>      <span class="token number">0</span><span class="token punctuation">,</span>           <span class="token number">144</span><span class="token punctuation">,</span>       <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token number">300</span><span class="token punctuation">,</span>      <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token number">144</span><span class="token punctuation">,</span>       <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span>行进距离   转向判断<span class="token number">0</span>左    转向角度    RGB</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#AutoTraceDraw.py</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> tt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'自动轨迹绘制'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数据读取</span>datals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    datals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>eval<span class="token punctuation">,</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#自动绘制</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>datals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span>datals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>datals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>datals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>datals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> datals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>rt<span class="token punctuation">(</span>datals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>lt<span class="token punctuation">(</span>datals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>理解方法思维：</strong></p><ul><li><strong>自动化思维</strong>：数据和功能分离，数据驱动的自动运行</li><li><strong>接口化设计</strong>：格式化设计接口，清晰明了</li><li>二维数据应用：应用纬度组值数据，二维数据最常用</li></ul><h3 id="一二纬数据的格式化"><a href="#一二纬数据的格式化" class="headerlink" title="一二纬数据的格式化"></a>一二纬数据的格式化</h3><p><strong>一纬数据</strong>由对等关系的有序或无序数组构成，采用线性方式组值，对应列表、数组和集合等概念</p><p><strong>二维数据</strong>由多个一纬数据构成，是一纬数据的组合形式<br><strong>多维数据</strong>是由一纬或er纬数据在新的纬度上的扩展形成<br><strong>高纬数据</strong>仅利用最基本的二元关系展示数据间的复杂结构（字典）</p><p><strong>数据的操作周期</strong><br>存储  &lt; - &gt;  表示  &lt; - &gt;  操作</p><p><strong>1、一纬数据的表示</strong></p><ul><li>如果数据间有序，使用列表类型</li><li>如果数据间无序，使用集合类型</li></ul><p><strong>一纬数据的存储</strong><br>存储方式一：空格分隔</p><ul><li>使用一个或多个空格分隔进行存储，不换行</li><li>缺点：数据中不能存在空格</li></ul><p>存储方式二：逗号分隔</p><ul><li>使用英文半角逗号分隔进行存储，不换行</li><li>缺点：数据中不能存在英文逗号</li></ul><p>存储方式三：采用特殊符号</p><ul><li>缺点：通用性差</li></ul><p><strong>数据的处理</strong></p><ul><li>将存储的数据读入程序</li><li>将程序表示的数据写入文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从空格分隔的文件中读入数据</span>txt <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> txt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从特殊分隔的文件中读入数据,假设%</span>txt <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> txt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span>   f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#采用空格分隔方式将数据写入文件</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'中国'</span>，<span class="token string">'美国'</span>，<span class="token string">'日本'</span><span class="token punctuation">]</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>2、二纬数据的表示</strong><br>使用二维列表类型表达二维数据</p><ul><li>基础操作使用时，二维列表几乎可以操作所有的二维数据</li></ul><p>使用列表类型</p><ul><li>使用两层for循环遍历每个元素</li><li>外层列表中每个元素可以对应一行，也可以对应一列</li></ul><p><strong>CSV数据存储格式</strong><br>CSV：Comma-Separated Values</p><ul><li><strong>国际通用的一二纬数据存储格式，一般.CSV扩展名</strong></li><li><strong>每行一个一纬数据，采用逗号分隔，无空行</strong></li><li><strong>Excel和一般编辑软件都可以读入或另存为CSV文件</strong></li><li><strong>如果某个元素缺失，逗号仍要保留</strong></li><li>二维数据的表示可以作为数据存储，也可以另行存储</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从CSV格式的文件中读入数据</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span>fname<span class="token punctuation">)</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> fo<span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将数据写入CSV格式的文件中</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#二维列表</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span>fname，<span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#遍历</span>ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span>，<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span>，<span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span>，<span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#二维列表</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    <span class="token keyword">for</span> column <span class="token keyword">in</span> row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span></code></pre><h3 id="wordcloud库"><a href="#wordcloud库" class="headerlink" title="wordcloud库"></a>wordcloud库</h3><p><img src="/postImg/16-10.jpg"><br>wordcloud是优秀的词云展示第三方库</p><ul><li>词云以词语为基础单位，更加直观和艺术的展示文本</li></ul><p><strong>安装：<code>(cmd命令行) pip install wordcloud</code></strong></p><p>wordcloud库把词云当作一个WordCloud对象</p><ul><li>wordcloud.WordCloud()代表一个文本对应的词云</li><li>可以根据文本中词语出现的频率等参数绘制词云</li><li>绘制词云的形状、尺寸和颜色都可以设定</li></ul><p><strong>方法：</strong><br><strong><code>w.generate(txt)</code>向WordCloud对象w中加载文本txt</strong><br><strong><code>w.to_flie(fliename)</code>将词云输出为图像文件，.png或.jpg格式</strong></p><p><strong>步骤：</strong><br>1：配置对象参数、2：加载词云文本、3：输出词云文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> wordcloudc <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">"wordcloud by Python"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>to_flie<span class="token punctuation">(</span><span class="token string">"123.png"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1、默认输出400*200像素</span><span class="token comment" spellcheck="true">#2、需要给它一个以空格分隔单词的大字符串！！</span></code></pre><p><strong>配置对象参数：</strong><br><strong><code>w = wordcloud.WordCloud(&lt;参数&gt;)</code></strong><br><strong>width</strong>：宽度<br><strong>height</strong>： 高度<br><strong>min_font_size</strong>：最小字号<br><strong>max_font_size</strong>：最大字号<br><strong>font_step</strong>：步进间隔，默认1<br><strong>font_path</strong>：指定字体文件路径 </p><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>font_path <span class="token operator">=</span> <span class="token string">"msyh.ttc"</span><span class="token punctuation">)</span></code></pre><p><strong>max_words</strong>：指定词云显示的最大单词数，默认200</p><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>max_words <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><p><strong>stop_words</strong>：指定不显示的单词列表</p><pre class=" language-python"><code class="language-python">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>stop_words<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Python"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>mask</strong>：指定词云形状，默认为长方形，需要引用imread()函数</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>misc <span class="token keyword">import</span> imread<span class="token operator">>></span><span class="token operator">></span>mk<span class="token operator">=</span>imread<span class="token punctuation">(</span><span class="token string">"pic.png"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>mask<span class="token operator">=</span>mk<span class="token punctuation">)</span></code></pre><p><strong>background_color</strong>：指定词云的背景颜色，默认黑色</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloudtxt <span class="token operator">=</span> "程序设计语言是计算机能够理解和\设别用户操作意图的一种交互式体系，它按照\特定。"w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">,</span>\            font_path<span class="token operator">=</span><span class="token string">"msyh.ttc"</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>to_flie<span class="token punctuation">(</span><span class="token string">"py.png"</span><span class="token punctuation">)</span></code></pre><h3 id="词云实例：工作报告"><a href="#词云实例：工作报告" class="headerlink" title="词云实例：工作报告"></a>词云实例：工作报告</h3><p><strong>用词云简化报告：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token comment" spellcheck="true">#f = open("新时代中国特色社会主义.txt","r",encoding="utf-8")</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"关于实施乡村振兴战略的意见.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>t <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>t<span class="token punctuation">)</span>txt <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span> font_path <span class="token operator">=</span> <span class="token string">"msyh.ttc"</span><span class="token punctuation">,</span>\                         width <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">,</span> background_color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>\                         max_words <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment" spellcheck="true">#最大单词数</span>                         <span class="token punctuation">)</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"grwordcloud1.png"</span><span class="token punctuation">)</span></code></pre><p><strong>如果想要生成不同形状的词语，需要找一张那样形状的图片，然后引入一个新库，将图片变成一个变量，再将词云付给这个变量</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">import</span> wordcloud<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>misc <span class="token keyword">import</span> imreadmask <span class="token operator">=</span> imread<span class="token punctuation">(</span><span class="token string">"fivestart.png"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#图片文件</span><span class="token comment" spellcheck="true">#f = open("新时代中国特色社会主义.txt","r",encoding="utf-8")</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"关于实施乡村振兴战略的意见.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>t <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>t<span class="token punctuation">)</span>txt <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span> font_path <span class="token operator">=</span> <span class="token string">"msyh.ttc"</span><span class="token punctuation">,</span>mask <span class="token operator">=</span> mask\                         width <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">,</span> background_color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span>\                         max_words <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment" spellcheck="true">#最大单词数</span>                         <span class="token punctuation">)</span>w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"grwordcloud1.png"</span><span class="token punctuation">)</span></code></pre><p><strong>实例1</strong>：打印输出附件文件的有效行数，注意：空行不计算为有效行数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getfile</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    lines <span class="token operator">=</span> open<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#注意不能加.read(),会拆分</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">0</span>    <span class="token keyword">return</span> count<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">"latex.log"</span>     <span class="token comment" spellcheck="true">#这是加载的文件</span>    count <span class="token operator">=</span> getfile<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共{}行"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#---------------------------------------------</span>t <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"latex.log"</span><span class="token punctuation">,</span><span class="token string">"rt"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>    i<span class="token operator">=</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    s<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共{}行"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例2</strong>：统计附件文件的小写字母a-z的字符分布，即出现a-z字符的数量，并输出结果。</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"latex.log"</span><span class="token punctuation">,</span><span class="token string">"rt"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>t<span class="token operator">=</span>t<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token number">0</span>t<span class="token operator">=</span>list<span class="token punctuation">(</span>t<span class="token punctuation">)</span>counts <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>    <span class="token keyword">if</span> i<span class="token operator">&lt;=</span><span class="token string">'z'</span> <span class="token operator">and</span> i<span class="token operator">>=</span><span class="token string">'a'</span><span class="token punctuation">:</span>        counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    s<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共{}字符"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#控制输出97是a的Unicode，122是z的Unicode。</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">",{}:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>counts<span class="token punctuation">[</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><p><strong>实例3</strong>：统计附件文件中与其他任何其他行都不同的行的数量，即独特行的数量。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#即与其它行重复的叫做独特行，多个重复只有一行为非独特行</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"latex.log"</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> set<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    ls<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>t <span class="token operator">=</span> set<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共{}独特行"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例4</strong>：附件是一个CSV文件，请将每行按照列逆序排列后输出，不改变各元素格式（如周围空格布局等）。</p><pre class=" language-python"><code class="language-python">f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">)</span>line<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> line<span class="token punctuation">:</span>    i<span class="token operator">=</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    a<span class="token operator">=</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#&lt;=</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例5</strong>：附件是一个CSV文件，其中每个数据前后存在空格，请对其进行清洗，要求如下：<br>（1）去掉每个数据前后空格，即数据之间仅用逗号(,)分割；<br>（2）清洗后打印输出。</p><pre class=" language-python"><code class="language-python">f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">)</span>line<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> line<span class="token punctuation">:</span>    i<span class="token operator">=</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    i<span class="token operator">=</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    a<span class="token operator">=</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例6</strong>：打印输出附件文件的平均列数，计算方法如下：<br>（1）有效行指包含至少一个字符的行，不计算空行；<br>（2）每行的列数为其有效字符数；<br>（3）平均列数为有效行的列数平均值，采用四舍五入方式取整数进位。</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"latex.log"</span><span class="token punctuation">)</span>s<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#for line in f获取的line包含每行最后的换行符（\n），所以，去掉该换行符进行统计。</span>    <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    s <span class="token operator">+=</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    c <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>round<span class="token punctuation">(</span>s <span class="token operator">/</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例7</strong>：附件是一个CSV格式文件，提取数据进行如下格式转换：<br>（1）按行进行倒序排列；<br>（2）每行数据倒序排列；<br>（3）使用分号（;）代替逗号（,）分割数据，无空格；<br>按照上述要求转换后将数据输出。</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>ls <span class="token operator">=</span> ls<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>lt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> ls<span class="token punctuation">:</span>    item <span class="token operator">=</span> item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    lt <span class="token operator">=</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    lt <span class="token operator">=</span> lt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lt<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="程序设计方法学"><a href="#程序设计方法学" class="headerlink" title="程序设计方法学"></a>程序设计方法学</h2><h3 id="体育竞技分析"><a href="#体育竞技分析" class="headerlink" title="体育竞技分析"></a>体育竞技分析</h3><p><img src="/postImg/16-11.jpg"></p><p><strong>问题分析：</strong></p><ul><li>需求：毫厘是多少呢？如何科学分析体育竞技比赛？</li><li>输入：球员的水平</li><li>输出：可预测的比赛成绩</li></ul><p><strong>体育竞技分析：模拟N场比赛</strong></p><ul><li>计算思维：抽象 + 自动化</li><li>模拟：抽象比赛过程 + 自动化执行N场比赛</li><li>当N越大时，比赛结果分析会越科学</li></ul><p><strong>解决复杂问题的有效方法：自顶向下</strong></p><ul><li>将一个总问题表达为若干个小问题组成的形成</li><li>使用同样的方法进一步解决小问题</li><li>直至，小问题可以用计算机简单明了的解决</li></ul><p><strong>逐步组建复杂系统的有效测试方法：自底向上</strong></p><ul><li>分单元测试，逐步组装</li><li>按照自顶向下相反的路径操作</li><li>直至，系统各部分以组装的思路都经过测试和验证</li></ul><p><strong>程序总体框架及步骤</strong></p><ul><li>步骤1：打印程序的介绍性信息式                    <strong>-printInfo()</strong></li><li>步骤2：获得程序运行参数：proA,proB,n        <strong>-getInputs()</strong></li><li>步骤3：利用球员A和B的能力值，模拟n局比赛   <strong>-simNGames()</strong></li><li>步骤4：输出球员A和B获胜比赛的场次及概率      <strong>-printSummary()</strong></li></ul><p><strong>第一阶段：程序总体框架及步骤</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#主函数的框架</span>    printInntro<span class="token punctuation">(</span><span class="token punctuation">)</span>    probA<span class="token punctuation">,</span>probB<span class="token punctuation">,</span> n <span class="token operator">=</span> getInputs<span class="token punctuation">(</span><span class="token punctuation">)</span>    winsA<span class="token punctuation">,</span> winsB <span class="token operator">=</span> simNGames<span class="token punctuation">(</span>n<span class="token punctuation">,</span>probA<span class="token punctuation">,</span>probB<span class="token punctuation">)</span>    printSummary<span class="token punctuation">(</span>winsA<span class="token punctuation">,</span>winsB<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">printIntro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#介绍性内容，提高用户体验</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个程序模拟两个选手A和选手B的某种竞技比赛"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序运行需要A和B的能力值(0~1)"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入选手A的能力值(0-1):"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入选手B的能力值(0-1):"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"模拟比赛的场次:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token keyword">def</span> <span class="token function">printSummary</span><span class="token punctuation">(</span>winsA<span class="token punctuation">,</span> winsB<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> winsA <span class="token operator">+</span>winsB    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"竞技分析开始，共模拟{}场比赛"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选手A获胜{}场比赛，占比{:0.1%}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>winsA<span class="token punctuation">,</span> winsA<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选手B获胜{}场比赛，占比{:0.1%}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>winsB<span class="token punctuation">,</span> winsB<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>第二阶段：模拟N局比赛</strong><br>需要调用N次一局比赛</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">simNGames</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> probA<span class="token punctuation">,</span> probB<span class="token punctuation">)</span><span class="token punctuation">:</span>    winsA<span class="token punctuation">,</span> winsB <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        scoreA<span class="token punctuation">,</span>scoreB <span class="token operator">=</span> simOneGame<span class="token punctuation">(</span>probA<span class="token punctuation">,</span>probB<span class="token punctuation">)</span>        <span class="token keyword">if</span> scoreA <span class="token operator">></span> scoreB<span class="token punctuation">:</span>            winsA <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            winsB <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> winsA<span class="token punctuation">,</span> winsB</code></pre><p><strong>第三阶段：模拟N局比赛</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">simOneGame</span><span class="token punctuation">(</span>probA<span class="token punctuation">,</span> probB<span class="token punctuation">)</span><span class="token punctuation">:</span>    scoreA<span class="token punctuation">,</span> scoreB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    serving <span class="token operator">=</span> <span class="token string">"A"</span>    <span class="token keyword">while</span> <span class="token operator">not</span> gameOver<span class="token punctuation">(</span>scoreA<span class="token punctuation">,</span> scoreB<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> serving <span class="token operator">==</span> <span class="token string">"A"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> probA<span class="token punctuation">:</span>                scoreA <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                serving <span class="token operator">=</span> <span class="token string">"B"</span>                <span class="token keyword">if</span> serving <span class="token operator">==</span> <span class="token string">"A"</span><span class="token punctuation">:</span>        <span class="token keyword">else</span>"            <span class="token keyword">if</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> probB<span class="token punctuation">:</span>                scoreB <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                serving <span class="token operator">=</span> <span class="token string">"A"</span>    <span class="token keyword">return</span> scoreA<span class="token punctuation">,</span> scoreB<span class="token keyword">def</span> <span class="token function">gameOver</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">==</span><span class="token number">15</span> <span class="token operator">or</span> b<span class="token operator">==</span><span class="token number">15</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>这个程序模拟了两个选手A和B的某种竞技比赛程序运行需要A和B的能力值请输入选手A的能力值<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0.45</span>请输入选手B的能力值<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0.50</span>模拟比赛场次<span class="token punctuation">:</span><span class="token number">1000</span>竞技分析开始，共模拟<span class="token number">1000</span>场比赛选手A获胜<span class="token number">365</span>场比赛，占比<span class="token number">36.5</span><span class="token operator">%</span>选手B获胜<span class="token number">635</span>场比赛，占比<span class="token number">63.5</span><span class="token operator">%</span></code></pre><h3 id="计算思维与程序设计"><a href="#计算思维与程序设计" class="headerlink" title="计算思维与程序设计"></a>计算思维与程序设计</h3><p><strong>三种人类思维特征：</strong></p><ul><li><strong>逻辑思维</strong>：推理和演绎，数学为代表，A-&gt;B B-&gt;C A-&gt;C</li><li><strong>实证思维</strong>：实验和验证，物理为代表，引力波&lt;-实验</li><li><strong>计算思维</strong>：设计和构造，计算机为代表，汉诺塔递归</li></ul><p><strong>计算思维：抽象和自动化</strong></p><ul><li>计算思维：Computational Thinking</li><li><strong>抽象问题的计算过程，利用计算机自动化求解</strong></li><li>计算思维是基于计算机的思维方式</li></ul><p><strong>抽象问题的计算过程，利用计算机自动化求解</strong></p><ul><li><strong>计算思维基于计算机强大的算力及海量数据</strong></li><li>抽象计算过程，关注设计和构造，而非因果</li><li>以计算机程序设计实现的主要手段</li><li>编程是将计算思维变成现实的手段</li></ul><h3 id="计算生态与Python语言"><a href="#计算生态与Python语言" class="headerlink" title="计算生态与Python语言"></a>计算生态与Python语言</h3><p><strong>1983年，Richard Stallman启动GNU项目，1989年，GNU通用许可协议诞生，自由软件时代诞生</strong>。<br>1991年，Linus Torvalds发布了Linus内核，1998年，网景浏览器开源，产生了Mozilla，开源生态逐步建立。开源思想深入演化和发展，形成了计算生态，<strong>计算生态没有顶层设计、以功能为单位</strong>、具备竞争发展、相互依存、迅速更迭三个特点。</p><ul><li>以开源项目为代表的大量第三方库，多达15W。</li><li>库之间相互关联，逐级封装。</li><li>社区庞大，新技术更迭迅速，<strong>AlphaGo深度学习算法采用Python语言开源</strong>。</li></ul><p><strong>计算生态的运用</strong>：</p><ul><li><strong>编程的起点不是算法而是系统</strong></li><li>编程如同搭积木，利用计算生态为主要模式</li><li><strong><code>编程的目的是快速解决问题</code></strong></li></ul><h3 id="用户体验与软件产品"><a href="#用户体验与软件产品" class="headerlink" title="用户体验与软件产品"></a>用户体验与软件产品</h3><p><strong>实现功能、关注体验</strong></p><ul><li>用户体验指用户对产品建立的主观感受和认识</li><li>关心功能是实现，更要关心用户体验，才能做出好产品</li><li>编程只是手段，不是目的，程序最终为人类服务</li></ul><p><strong>提高用户体验的方法：</strong></p><ul><li><strong>进度展示</strong><ul><li>如果程序要计算时间，可能产生等待，请增加进度展示</li><li>如果程序有若干步骤，需要提示用户，请增加进度展示</li><li>如果程序可能存在大量次数的循环，请增加进度展示</li></ul></li><li><strong>异常处理</strong><ul><li>当获得用户输入，对合规性需要检查，需要异常处理</li><li>当读写文件时，对结果进行判断，需要异常处理</li><li>当进行输入输出时，对运算结果进行判断</li></ul></li><li><strong>打印输出</strong>：特定位置，输出程序运行的过程信息</li><li><strong>日志文件</strong>：对程序异常及用户使用进行定期记录</li><li><strong>帮助信息</strong>：给用户多种方式提供帮助信息  </li></ul><p><strong><code>用户体验时程序到产品的关键环节</code></strong></p><h3 id="基本的程序设计模式"><a href="#基本的程序设计模式" class="headerlink" title="基本的程序设计模式"></a>基本的程序设计模式</h3><p><strong>从IPO开始</strong></p><ul><li>确定IPO：明确计算部分及功能边界</li><li>编写程序：将计算求解的设计变成现实</li><li>调试程序：确保程序按照正确逻辑能够正确运行</li></ul><p><strong>自顶向下设计</strong><br><img src="/postImg/16-11.jpg"></p><p><strong>模块化设计</strong></p><ul><li>通过函数对象封装将程序划分为模块及模块间的表达</li><li>具体包含：主程序、子程序和子程序间关系</li><li>分而治之：分层抽象、体系化的设计思想</li><li>模块内部紧耦合、模块之间松耦合</li></ul><p><strong>配置化设计：</strong></p><ul><li><strong><code>引擎+配置</code></strong>：程序执行和配置分离，将可选参数配置化</li><li>将程序开发变成配置文件编写，扩展功能而不修改程序</li><li>关键在于接口设计，清晰明了、灵活可扩展</li></ul><p><strong>应用开发的四个步骤</strong></p><ul><li><strong>产品定义</strong>：对应用需求充分了解和明确定义，产品定义，而不仅时功能定义，需要考虑商业模式</li><li><strong>系统架构</strong>：以系统方式思考产品的技术实现，系统架构，关注数据流、模块化、体系架构</li><li><strong>设计与实现</strong>：结合架构完成关键设计及系统实现，结合可扩展性、灵活性等进行设计优化</li><li><strong>用户体验</strong>：从用户角度思考应用效果，用户至上，体验优先，以用户为中心</li></ul><h3 id="Python第三方库安装"><a href="#Python第三方库安装" class="headerlink" title="Python第三方库安装"></a>Python第三方库安装</h3><p>Python社区：<a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a>( 13万个第三方库 )<br>PyPI</p><ul><li>Python Package Index</li><li>PSF维护的战术全球Python计算生态</li><li>学会检索并利用PyPI，找到合适的第三方库开发程序</li></ul><p>实例：开发与区块链相关的程序</p><ul><li>第一步：在pypi.org搜索blockchain</li><li>第二步：挑选合适开发目标的第三方库作为基础</li><li>第三步：完成自己需要的功能</li></ul><h4 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h4><p>方法一：使用pip命令<br>方法二：集成安装方法<br>方法三：文件安装方法</p><p><strong>更新pip</strong><br><code>python -m pip install --user --upgrade pip</code></p><p><strong>如果安装的时候出现Requirement already satisfied:</strong><br><strong><code>pip install 库名 --target=路径</code></strong>就需要跟上路径</p><p><strong>pip安装方法</strong><br>支持Windows、MacOS、Linus三大平台，适合99%以上情况，需要联网<br>在命令行中打出<strong>pip -h</strong>可以打印帮助信息<br><strong><code>pip install &lt;第三方库名&gt;</code></strong>就可以<strong>安装</strong>指定的第三方库<br><strong><code>pip install -U &lt;第三方库名&gt;</code></strong>就可以对指定的第三方库进行版本<strong>更新</strong><br><strong><code>pip uninstall &lt;第三方库名&gt;</code></strong>就可以<strong>卸载</strong>指定的第三方库<br><strong><code>pip download &lt;第三方库名&gt;</code></strong>就可以<strong>下载</strong>指定的第三方库，但不安装<br><strong><code>pip show &lt;第三方库名&gt;</code></strong>就可以列出指定的第三方库的<strong>详细信息</strong><br><strong><code>pip search &lt;关键词&gt;</code></strong>就可以在全部第三方库中<strong>搜索</strong>和关键词有关系的第三方库<br><strong><code>pip list</code></strong>就可以列出当前<strong>系统已经安装</strong>的第三方库</p><p><strong>集成安装方法</strong><br>结合特定Python开发工具的批量安装<br><strong>Anaconda</strong>：<a href="http://www.continuum.io" target="_blank" rel="noopener">http://www.continuum.io</a></p><ul><li>支持近800个第三方库</li><li><strong>适合数据计算领域开发</strong></li></ul><p><strong>文件安装方法</strong><br>为什么有些第三方库用pip可以下载，但无法安装？</p><ul><li>某些第三方库pip下载后，需要编译在安装</li><li>如果操作系统没有编译环境，则能下载但不能安装</li><li>可以直接下载编译后的版本用于安装吗？</li></ul><p>文件安装方法：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/（仅适用于windows）" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/（仅适用于windows）</a></p><p><strong>在UCI页面上搜索相关库，下载相应版本的文件，使用<code>pip install &lt;文件名&gt;</code>安装</strong></p><h3 id="OS库的使用"><a href="#OS库的使用" class="headerlink" title="OS库的使用"></a>OS库的使用</h3><p>os库提供通用的、基本的操作系统交互功能，支持三大主流操作系统，os库是python标准库，包含几百个函数，常用路径操作、进程管理、环境参数等几类。<br><strong>路径操作</strong><br>os.path字库以path为入口，用于操作和处理文件路径<br><strong><code>import os.path</code></strong>     或者  <strong><code>import os.path as op</code></strong><br><img src="/postImg/16-11-1.jpg"></p><p><strong>进程管理</strong><br><strong><code>os.system(command)</code></strong></p><ul><li>执行程序或命令command</li><li>在windows系统中，返回值为cmd的调用返回信息</li></ul><p>示例：windows下的计算器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32\\calc.exe"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">0</span></code></pre><p>示例：windows下的画图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span>"C<span class="token punctuation">:</span>\\Windows\\System32\\mspaint<span class="token punctuation">.</span>exe  \            D<span class="token punctuation">:</span>\\PYECourse\\grwordcloudpng" <span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">0</span></code></pre><p><strong>环境参数</strong><br>获取改变系统环境信息<br><strong><code>os.chdir(path)</code></strong> ：修改当前程序操作路径<br><strong><code>os.getcwd()</code></strong> ：返回程序的当前路径<br><strong><code>os.getlogin()</code></strong> ：获取当前系统登陆用户名称<br><strong><code>os.cpu_count()</code></strong> ：获取当前系统的CPU数量<br><strong><code>os.urandom(n)</code></strong> ：获取n个字节长度的随机字符串，通常用于加解密运算</p><h3 id="第三方库自动安装脚本"><a href="#第三方库自动安装脚本" class="headerlink" title="第三方库自动安装脚本"></a>第三方库自动安装脚本</h3><p><strong>Numpy</strong>：N维数据表示和运算<br><strong>Matplotlib</strong>：二维数据可视化<br><strong>PIL</strong>：图像处理<br><strong>Scikit-Learn</strong>：机器学习和数据挖掘<br><strong>Requests</strong>：HTTP协议访问及网络爬虫<br><strong>jieba</strong>：中文分词<br><strong>Beautiful Soup</strong>：HTML和MXL解释器<br><strong>Wheel</strong>：Python第三方库文件打包工具<br><strong>PyInstaller</strong>：打包Python源文件为可执行文件<br><strong>Django</strong>：Python最流行的Web开发框架<br><strong>Flask</strong>：轻量级Web开发框架<br><strong>WeRoBot</strong>：微信机器人开发框架<br><strong>SymPy</strong>：数学符号计算工具<br><strong>Pandas</strong>：高效数据分析和计算工具<br><strong>Networkx</strong>：复杂网络和图结构的建模和分析<br><strong>PyQt5</strong>：基于Qt的专业级GUI开发框架<br><strong>PyOpenGL</strong>：多平台OpenGL开发接口<br><strong>PyPDF2</strong>：PDF文件内容提取及处理<br><strong>docopt</strong>：Python命令行解析器<br><strong>PyGame</strong>：简单小游戏开发框架</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#BatchInstall.py</span><span class="token keyword">import</span> oslibs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"numpy"</span><span class="token punctuation">,</span><span class="token string">"matplotlib"</span><span class="token punctuation">,</span><span class="token string">"pillow"</span><span class="token punctuation">,</span><span class="token string">"sklearn"</span><span class="token punctuation">,</span><span class="token string">"requests"</span><span class="token punctuation">,</span>\        <span class="token string">"jieba"</span><span class="token punctuation">,</span><span class="token string">"beautifulsoup4"</span><span class="token punctuation">,</span><span class="token string">"wheel"</span><span class="token punctuation">,</span><span class="token string">"networkx"</span><span class="token punctuation">,</span><span class="token string">"sympy"</span><span class="token punctuation">,</span>\        <span class="token string">"pyinstaller"</span><span class="token punctuation">,</span><span class="token string">"django"</span><span class="token punctuation">,</span><span class="token string">"flask"</span><span class="token punctuation">,</span><span class="token string">"werobot"</span><span class="token punctuation">,</span><span class="token string">"pyqt5"</span><span class="token punctuation">,</span>\        <span class="token string">"pandas"</span><span class="token punctuation">,</span><span class="token string">"pyopengl"</span><span class="token punctuation">,</span><span class="token string">"pypdf2"</span><span class="token punctuation">,</span><span class="token string">"docopt"</span><span class="token punctuation">,</span><span class="token string">"pygame"</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> lib <span class="token keyword">in</span> libs<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"pip3 install "</span><span class="token operator">+</span>lib<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Successful"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed Somehow"</span><span class="token punctuation">)</span></code></pre><p><strong>其它实例</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获得用户的任何可能输入，将其中的英文字符进行打印输出，程序不出现错误</span>s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># c = str(c)</span>    <span class="token keyword">if</span> <span class="token string">'z'</span><span class="token operator">>=</span>c<span class="token operator">>=</span><span class="token string">'a'</span> <span class="token operator">or</span> <span class="token string">'Z'</span><span class="token operator">>=</span>c<span class="token operator">>=</span><span class="token string">"A"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获得用户输入的一个数字，可能是浮点数或复数，如果是整数仅接收十进制形式，且只能是数字。对输入数字进行平方运算，输出结果。</span>s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> complex<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> complex<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入有误"</span><span class="token punctuation">)</span></code></pre><h2 id="Python计算生态"><a href="#Python计算生态" class="headerlink" title="Python计算生态"></a>Python计算生态</h2><h3 id="Python库之数据分析"><a href="#Python库之数据分析" class="headerlink" title="Python库之数据分析"></a>Python库之数据分析</h3><p><strong><code>Numpy</code>：表达N维数组的最基础库</strong></p><ul><li>Python接口使用，C语言实现，计算速度优异</li><li>Python数据分析及科学计算的基础库，支撑Pandas等</li><li>提供直接的矩阵运算、广播函数、线性代数等功能</li></ul><p><strong>Numpy的最基础单元就是一个数组</strong>，数组相当于一个变量，那么可以用数组变量直接的操作符进行运算，进而减少了for循环的使用，也使得整体的编程逻辑变得直接，正是有Numpy的这样的特点，我们可以将N维数组，看成简单的数值运算。（ <a href="http://www.numpy.org" target="_blank" rel="noopener">http://www.numpy.org</a> ）<br>进而数据分析我们用Pandas。</p><p><strong><code>Pandas</code>：Python数据分析高层次应用库</strong></p><ul><li>提供了加单易用的数据结构和数据分析工具</li><li>理解数据类型与索引的关系，操作索引即操作数据</li><li>Python最主要的数据分析功能库，基于Numpy开发</li></ul><p>Pandas提供了两个数据结构，一个叫series一个叫DataFrame，<strong>series是通过索引来与一维数据进行关联，<code>Series = 索引 + 一位数据</code>进而通过索引来操作数据。DataFrame是使用行列的二维索引，来操作二维数据的方法<code>DataFrame = 行列索引 + 二维数据</code></strong><br>（ <a href="http://pandas.pydata.org）" target="_blank" rel="noopener">http://pandas.pydata.org）</a></p><p><strong>SciPy：数学、科学和工程计算功能库</strong>（ <a href="http://www.scipy.org）" target="_blank" rel="noopener">http://www.scipy.org）</a></p><ul><li>提供了一批数学算法及工程数据运算功能</li><li>类似于Matlab，可用于入傅里叶变换、信号处理、优化算法、稀疏图像运算、稀疏图像压缩、图像处理、线性代数等</li><li>Python最主要的科学计算功能库，基于Numpy开发</li></ul><p><strong><code>Matplotlib</code>：高质量的二维数据可视化功能库</strong>（ <a href="http://matplotlib.org）" target="_blank" rel="noopener">http://matplotlib.org）</a></p><ul><li>提供了超过100种数据可视化展示效果</li><li>通过matplotlib.pyplot子库调用各种可视化效果</li><li>Python最主要的数据可视化功能库，基于Numpy开发</li></ul><p><strong><code>Seaborn</code>：统计类数据可视化功能库</strong>（ <a href="http://seaborn.pydata.org）" target="_blank" rel="noopener">http://seaborn.pydata.org）</a></p><ul><li>提供了一批高层次的统计类数据可视化效果</li><li>主要展示数据间分布、分类和线性关系等内容</li><li>基于Matplotlib开发，支持Numpy和Pandas</li></ul><p><strong><code>Mayavi</code>：三维科学数据可视化功能库</strong>（<a href="http://docs.enthought.com/mayavi/mayavi/）" target="_blank" rel="noopener">http://docs.enthought.com/mayavi/mayavi/）</a></p><ul><li>提供了一批简单易用的3D科学计算数据可视化展示效果</li><li>目前版本是Mayavi2，三维可视化最主要的第三方库</li><li>支持Numpy、TVTK、Traits、Envisage等等第三方库</li></ul><h3 id="Python库之文本处理"><a href="#Python库之文本处理" class="headerlink" title="Python库之文本处理"></a>Python库之文本处理</h3><p><strong>PyPDF2：用来处理dpf文件的工具集</strong>（<a href="http://mstamy2.github.io/PyPDF2）" target="_blank" rel="noopener">http://mstamy2.github.io/PyPDF2）</a></p><ul><li>提供了一批处理PDF文件的计算功能</li><li>支持获取信息、分隔/整合文件、加密解密等</li><li>完全Python语言实现，不需要额外依赖，功能稳定</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#将两个文件整合</span><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileMergermerger <span class="token operator">=</span> PdfFileMerger<span class="token punctuation">(</span><span class="token punctuation">)</span>input1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"document1.pdf"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>input2 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"document2.pdf"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>merger<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fileobj <span class="token operator">=</span> input1<span class="token punctuation">,</span> pages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>merger<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>position <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> fileobj <span class="token operator">=</span> input2<span class="token punctuation">,</span> pages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"document-output.pdf"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span>merger<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output<span class="token punctuation">)</span></code></pre><p><strong>NLTK：自然语言文本处理第三方库</strong>（<a href="http://www.nltk.org/）" target="_blank" rel="noopener">http://www.nltk.org/）</a></p><ul><li>提供了一批简单易用的自然语言文本处理功能</li><li>支持语言文本分类、标记、语法句法、语义分析等</li><li>最优秀的Python自然语言处理库</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#将文本形成树结构</span><span class="token keyword">from</span> PyPDF2 <span class="token keyword">import</span> PdfFileReader<span class="token punctuation">,</span> PdfFileMergert <span class="token operator">=</span> treebank<span class="token punctuation">.</span>parsed_sents<span class="token punctuation">(</span><span class="token string">'wsj_000.mrg'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>t<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>*Python-docx：创建或更新Microsoft Word文件的第三方库</strong><br>（<a href="http://python-docx.readthedocs.io/en/latest/index.html）" target="_blank" rel="noopener">http://python-docx.readthedocs.io/en/latest/index.html）</a></p><ul><li>提供创建或更新.dox、.docx等文件的计算功能</li><li>增加并配置段落、图片、表格、文字等</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#</span><span class="token keyword">from</span> docx <span class="token keyword">import</span> Documentdocument <span class="token operator">=</span> Document<span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>add_heading<span class="token punctuation">(</span><span class="token string">'Document Title'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>p <span class="token operator">=</span> document<span class="token punctuation">.</span>add_paragraph<span class="token punctuation">(</span><span class="token string">'A plain paragraph having some '</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>add_page_break<span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'demo.docx'</span><span class="token punctuation">)</span></code></pre><h3 id="Python库之机器学习"><a href="#Python库之机器学习" class="headerlink" title="Python库之机器学习"></a>Python库之机器学习</h3><p><strong>Scikit-learn：机器学习方法工具集</strong>（<a href="http://scikit-learn.org/）" target="_blank" rel="noopener">http://scikit-learn.org/）</a></p><ul><li>提供一批统一化的机器学习方法功能接口</li><li>提供据类、分类、回归、强化学习计算功能</li><li>机器学习最基本且最优秀的Python第三方库</li></ul><p><strong><code>TensorFlow</code>：AlphaGo背后的机器学习计算框架</strong>（<a href="https://www.tensorflow.org/）" target="_blank" rel="noopener">https://www.tensorflow.org/）</a></p><ul><li>谷歌公司推动的开源机器学习框架</li><li>将数据流图最为基础，图节点代表运算，边代表张量</li><li>应用机器学习方法的一种方式，支撑谷歌人工智能应用</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfinit <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>res <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span></code></pre><p><strong><code>MXNet</code>：基于神经网络的深度学习计算框架</strong>（<a href="https://mxnet.incubator.apache.org/）" target="_blank" rel="noopener">https://mxnet.incubator.apache.org/）</a></p><ul><li>提供可扩展的神经网络及深度学习计算功能</li><li>可用于自动驾驶、机器翻译、语音识别等众多领域</li><li>Python最重要的深度学习计算框架</li></ul><p>比如去识别一张图片，我们可以构造深度学习神经网络，来提高准确率，在MXNet下只需要几十行代码，就可能完成这样的功能。</p><h3 id="实例：霍兰德人格分析雷达图"><a href="#实例：霍兰德人格分析雷达图" class="headerlink" title="实例：霍兰德人格分析雷达图"></a>实例：霍兰德人格分析雷达图</h3><p><strong>通用雷达图绘制：matplotlib库</strong><br><strong>专业的多维数据表示：numpy库</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#HollandRadarDraw</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlibmatplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'SimHei'</span>radar_labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'研究型(I)'</span><span class="token punctuation">,</span><span class="token string">'艺术型(A)'</span><span class="token punctuation">,</span><span class="token string">'社会型(S)'</span><span class="token punctuation">,</span>\                         <span class="token string">'企业型(E)'</span><span class="token punctuation">,</span><span class="token string">'常规型(C)'</span><span class="token punctuation">,</span><span class="token string">'现实型(R)'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#雷达标签</span>nAttr <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">#用numpy中的array方法去将多维数据组织起来</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.40</span><span class="token punctuation">,</span> <span class="token number">0.32</span><span class="token punctuation">,</span> <span class="token number">0.35</span><span class="token punctuation">,</span> <span class="token number">0.30</span><span class="token punctuation">,</span> <span class="token number">0.30</span><span class="token punctuation">,</span> <span class="token number">0.88</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">0.85</span><span class="token punctuation">,</span> <span class="token number">0.35</span><span class="token punctuation">,</span> <span class="token number">0.30</span><span class="token punctuation">,</span> <span class="token number">0.40</span><span class="token punctuation">,</span> <span class="token number">0.40</span><span class="token punctuation">,</span> <span class="token number">0.30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">0.43</span><span class="token punctuation">,</span> <span class="token number">0.89</span><span class="token punctuation">,</span> <span class="token number">0.30</span><span class="token punctuation">,</span> <span class="token number">0.28</span><span class="token punctuation">,</span> <span class="token number">0.22</span><span class="token punctuation">,</span> <span class="token number">0.30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">0.30</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.48</span><span class="token punctuation">,</span> <span class="token number">0.85</span><span class="token punctuation">,</span> <span class="token number">0.45</span><span class="token punctuation">,</span> <span class="token number">0.40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">0.20</span><span class="token punctuation">,</span> <span class="token number">0.38</span><span class="token punctuation">,</span> <span class="token number">0.87</span><span class="token punctuation">,</span> <span class="token number">0.45</span><span class="token punctuation">,</span> <span class="token number">0.32</span><span class="token punctuation">,</span> <span class="token number">0.28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">0.34</span><span class="token punctuation">,</span> <span class="token number">0.31</span><span class="token punctuation">,</span> <span class="token number">0.38</span><span class="token punctuation">,</span> <span class="token number">0.40</span><span class="token punctuation">,</span> <span class="token number">0.92</span><span class="token punctuation">,</span> <span class="token number">0.28</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#数据值</span>data_labels <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'艺术家'</span><span class="token punctuation">,</span> <span class="token string">'实验员'</span><span class="token punctuation">,</span> <span class="token string">'工程师'</span><span class="token punctuation">,</span> <span class="token string">'推销员'</span><span class="token punctuation">,</span> <span class="token string">'社会工作者'</span><span class="token punctuation">,</span><span class="token string">'记事员'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将相关数据嵌入到雷达图的表示中</span>angles <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> nAttr<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>angles <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>angles<span class="token punctuation">,</span> <span class="token punctuation">[</span>angles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span> polar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>angles<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token string">'o-'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>angles<span class="token punctuation">,</span>data<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>thetagrids<span class="token punctuation">(</span>angles<span class="token operator">*</span><span class="token number">180</span><span class="token operator">/</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> radar_labels<span class="token punctuation">,</span>frac <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figtext<span class="token punctuation">(</span><span class="token number">0.52</span><span class="token punctuation">,</span> <span class="token number">0.95</span><span class="token punctuation">,</span> <span class="token string">'霍兰德人格分析'</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出雷达图</span>legend <span class="token operator">=</span> plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>data_labels<span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.94</span><span class="token punctuation">,</span> <span class="token number">0.80</span><span class="token punctuation">)</span><span class="token punctuation">,</span> labelspacing<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>setp<span class="token punctuation">(</span>legend<span class="token punctuation">.</span>get_texts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token string">'large'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'holland_radar.jpg'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Python库之网络爬虫"><a href="#Python库之网络爬虫" class="headerlink" title="Python库之网络爬虫"></a>Python库之网络爬虫</h3><p><strong>Requests：最友好的网络爬虫功能库</strong>（<a href="http://www.python-requests.org/）" target="_blank" rel="noopener">http://www.python-requests.org/）</a></p><ul><li>提供了简单易用的类HTTP协议网络爬虫功能</li><li>支持连接池、SSL、Cookies、HTTP（S）代理等</li><li>Python最主要的页面级网络爬虫功能库</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/user'</span><span class="token punctuation">,</span>\                    auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'pass'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>status_code    <span class="token comment" spellcheck="true">#获得访问状态效果</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span>   r<span class="token punctuation">.</span>encodingr<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true">#获取其中的文本信息</span></code></pre><p><strong><code>Scrapy</code>：优秀的网络爬虫框架</strong>（<a href="http://scapy.org）" target="_blank" rel="noopener">http://scapy.org）</a></p><ul><li>提供了构建网络爬虫系统的框架功能，功能本成品</li><li>支持批量和定制网页爬取、提供数据处理流程等</li><li>Python最主要且最专业的网络爬虫框架</li></ul><p><strong><code>pyspider</code>：强大的Web页面爬取系统</strong>（<a href="http://docs.pyspider.org）" target="_blank" rel="noopener">http://docs.pyspider.org）</a></p><ul><li>提供了完整的网页爬取系统构建功能</li><li>支持数据库后端、消息队列、优先级、分布式框架等</li><li>Python重要的网络爬虫类第三方库</li></ul><h3 id="Python库之Web信息提取"><a href="#Python库之Web信息提取" class="headerlink" title="Python库之Web信息提取"></a>Python库之Web信息提取</h3><p><strong>Beautiful Soup：HTML和XML的解析库</strong>（<a href="https://www.crummy.com/software/BeautifulSoup/bs4）" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4）</a></p><ul><li>提供了解析HTML和XML等Web信息的功能</li><li>又名beautifulsoup4或bs4，可以加载多种系欸引擎</li><li>常与网络爬虫搭配使用，入Scrapy、requests等</li></ul><p>它将所有的HTML页面，以树形结构进行组织，通过上下行遍历和平行遍历等操作，来去解析其中的所有内容。</p><p><strong>Re：正则表达式解析和处理功能库</strong>（<a href="https://docs.python.org/3.6/library/re.html）" target="_blank" rel="noopener">https://docs.python.org/3.6/library/re.html）</a></p><ul><li>提供了定义和解析正则表达式的一批通用功能</li><li>可以用于各类场景，包括定点的Web信息提取</li><li><strong>Python最主要的标准库之一</strong>，无序安装</li></ul><p><strong>Python-Goose</strong>（<a href="https://github.com/grangier/python-goose）" target="_blank" rel="noopener">https://github.com/grangier/python-goose）</a></p><ul><li>提供了对Web页面中文章信息、视频等元数据的提取功能</li><li>针对特定类型Web页面，应用覆盖面较广</li><li>Python对主要的Web信息提取库</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#只需要我们给出一个URL链接，就可以使用内部的解析方式</span><span class="token keyword">from</span> goose <span class="token keyword">import</span> Gooseurl <span class="token operator">=</span> <span class="token string">'http://www.elmundo.es.elmundo/2012/10/28/espana/1351388909.html'</span>g <span class="token operator">=</span> Goose<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'use_meta_language'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span><span class="token string">'target_language'</span><span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>article <span class="token operator">=</span> g<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>article<span class="token punctuation">.</span>cleaned_text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">150</span><span class="token punctuation">]</span></code></pre><h3 id="Python库之Web网站开发"><a href="#Python库之Web网站开发" class="headerlink" title="Python库之Web网站开发"></a>Python库之Web网站开发</h3><p><strong><code>Django</code>：最流行的Web应用框架</strong>（<a href="https://www.djangoproject.com）" target="_blank" rel="noopener">https://www.djangoproject.com）</a></p><ul><li>提供了构建Web系统的基础框架</li><li>MTV模式：模型（model）、模板（Template）、视图（Views）</li><li>Python最重要的Web应用框架，略微复杂的应用框架</li></ul><p><strong>略微专业也难的框架</strong>，使用时我们需要知道什么是<strong>WSGI</strong>、什么是路由、什么是功能处理逻辑</p><p><strong>Pyramid：规模适中的Web应用框架</strong>（<a href="https://trypyramid.com/）" target="_blank" rel="noopener">https://trypyramid.com/）</a></p><ul><li>提供了简单方便构建Web系统的应用框架</li><li>不大不小，规模适中适合快速构建适度扩展类应用</li><li>Python产品级Web应用框架，起步简单可扩展性好</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#10行左右Hello Word程序</span><span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>simple_server <span class="token keyword">import</span> make_server<span class="token keyword">from</span> pyramid<span class="token punctuation">.</span>config <span class="token keyword">import</span> Configurator<span class="token keyword">from</span> pyramid<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> Configurator<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> config<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>add_route<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span>        config<span class="token punctuation">.</span>add_view<span class="token punctuation">(</span>hello_world<span class="token punctuation">,</span> route_name<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>        app <span class="token operator">=</span> config<span class="token punctuation">.</span>make_wsgi_app<span class="token punctuation">(</span><span class="token punctuation">)</span>    server <span class="token operator">=</span> make_server<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">6543</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Flask：Web应用开发微框架</strong>（<a href="http://flask.pocoo.org）" target="_blank" rel="noopener">http://flask.pocoo.org）</a></p><ul><li>提供了最简单构建Web系统的应用框架</li><li>特点：简单、规模小、快速</li></ul><p>如果我们的需求仅仅是建立几个页面，那这个是首选</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#5行左右Hello Word程序</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello,World!'</span></code></pre><h3 id="Python库之网络应用开发"><a href="#Python库之网络应用开发" class="headerlink" title="Python库之网络应用开发"></a>Python库之网络应用开发</h3><p><strong>WeRoBot：微信公众号开发框架</strong>（<a href="https://github.com/offu/WeRoBot）" target="_blank" rel="noopener">https://github.com/offu/WeRoBot）</a></p><ul><li>提供了解析微信服务器消息及反馈消息的功能</li><li>建立微信机器人的重要技术手段</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#对微信每个消息反馈一个Hello World</span><span class="token keyword">import</span> werobotrobot <span class="token operator">=</span> werobot<span class="token punctuation">.</span>WeRoBot<span class="token punctuation">(</span>token<span class="token operator">=</span><span class="token string">'tokenhere'</span><span class="token punctuation">)</span>@robot<span class="token punctuation">.</span>handler<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span></code></pre><p><strong>aip：百度AI开放平台接口</strong>（<a href="https://github.com/Baidu-AIP/python-sdk）" target="_blank" rel="noopener">https://github.com/Baidu-AIP/python-sdk）</a></p><ul><li>提供了访问百度AI服务的Python功能接口</li><li>语音、人脸、OCR、NLP、只是图谱、图像搜索等领域</li><li>Python百度AI应用的最主要方式</li></ul><p><strong>MyQR：二维码生成第三方库</strong>（<a href="https://github.com/sylnsfar/qrcode）" target="_blank" rel="noopener">https://github.com/sylnsfar/qrcode）</a></p><ul><li>提供生成二维码的系列功能</li><li>基本二维码、艺术二维码和动态二维码</li></ul><h3 id="Python库之图形用户界面"><a href="#Python库之图形用户界面" class="headerlink" title="Python库之图形用户界面"></a>Python库之图形用户界面</h3><p><strong><code>PyQt5</code>：Qt开发框架的Python接口</strong>（<a href="https://www.riverbankcomputing.com/software/pyqt）" target="_blank" rel="noopener">https://www.riverbankcomputing.com/software/pyqt）</a></p><ul><li>提供了创建Qt5程序的Python API接口</li><li>Qt是非常成熟的跨平台桌面应用开发系统，完备GUI</li><li>推荐的Python GUI开发第三方库，有非常成熟的工业链条</li></ul><p><strong>wxPython：跨平台GUI开发框架</strong>（<a href="https://www.wxpython.org）" target="_blank" rel="noopener">https://www.wxpython.org）</a></p><ul><li>提供了<strong>专用于Python的跨平台GUI</strong>开发框架</li><li>理解数据类型与索引的关系，操作索引即操作数据</li><li>Python最重要的数据分析功能库，基于Numpy开发</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> wxapp <span class="token operator">=</span> wx<span class="token punctuation">.</span>App<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>frame <span class="token operator">=</span> wx<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>None<span class="token punctuation">,</span> wx<span class="token punctuation">.</span>ID_ANY<span class="token punctuation">,</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>Show<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>MainLoop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>PyGObject：使用GTK+开发GUI的功能库</strong>（<a href="https://pygobject.readthedocs.io）" target="_blank" rel="noopener">https://pygobject.readthedocs.io）</a></p><ul><li>提供了整合GTK+、WebKitGTK+等库的功能</li><li>GTK+：跨平台的一种用户图形界面GUI框架</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gigi<span class="token punctuation">.</span>require_version<span class="token punctuation">(</span><span class="token string">"Gtk"</span><span class="token punctuation">,</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token keyword">from</span> gi<span class="token punctuation">.</span>repository <span class="token keyword">import</span> Gtkwindow <span class="token operator">=</span> Gtk<span class="token punctuation">.</span>Window<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"destroy"</span><span class="token punctuation">,</span>Gtk<span class="token punctuation">.</span>main_quit<span class="token punctuation">)</span>Gtk<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Python库之游戏开发"><a href="#Python库之游戏开发" class="headerlink" title="Python库之游戏开发"></a>Python库之游戏开发</h3><p><strong>PyGame：简单的游戏开发功能库</strong>（<a href="http://www.pygame.org）" target="_blank" rel="noopener">http://www.pygame.org）</a></p><ul><li>提供了基于SDL的简单游戏开发功能及实现引擎</li><li>理解游戏对外部输入的响应机制及角色构建和交互机制</li><li>Python游戏入门最主要的第三方库</li></ul><p><strong><code>Panda3D</code>：开源、跨平台的3D渲染和游戏开发库</strong>（<a href="http://www.panda3d.org）" target="_blank" rel="noopener">http://www.panda3d.org）</a></p><ul><li>一个3D游戏引擎，提供Python和C++两种接口</li><li>支持很多先进特性：法线贴图、光泽贴图、卡通渲染等</li><li>由迪士尼和卡耐基梅隆大学共同开发，相当优秀，相当好用。</li></ul><p><strong>cocos2d：构建2D游戏和图形界面交互式应用的框架</strong>（<a href="http://python.cocos2d.org/）" target="_blank" rel="noopener">http://python.cocos2d.org/）</a></p><ul><li>提供了基于OpenGL的游戏开发图形渲染功能</li><li>支持GPU加速，采用树型结构分层管理游戏对象类型</li><li>适用于2D专业级游戏开发</li></ul><h3 id="Python库之虚拟现实"><a href="#Python库之虚拟现实" class="headerlink" title="Python库之虚拟现实"></a>Python库之虚拟现实</h3><p><strong>VR Zero：在树莓派上开发VR应用的Python库</strong>（<a href="https://github.com/WayneKeenan/python-vrzero）" target="_blank" rel="noopener">https://github.com/WayneKeenan/python-vrzero）</a></p><ul><li>提供大量与VR开发相关的功能</li><li>针对树莓派的VR开发库，支持设备小型化，配置简单化</li><li>非常适合初学者实践VR开发及应用</li></ul><p><strong>pyovr：Oculus Rift的Python开发接口</strong>（<a href="https://github.com/cmbruns/pyovr）" target="_blank" rel="noopener">https://github.com/cmbruns/pyovr）</a></p><ul><li>针对Oculus VR设备的Python开发库</li><li>基于成熟的VR设备，提供全套文档，工业级应用设备</li><li>Python+虚拟现实领域探索的一种思路</li></ul><p><strong>Vizard：基于Python的通用VR开发引擎</strong>（<a href="http://www.worldviz.com/vizard-virtual-reality-software）" target="_blank" rel="noopener">http://www.worldviz.com/vizard-virtual-reality-software）</a></p><ul><li>专业的企业级虚拟现实开发引擎</li><li>提供详细的官方文档</li><li>支持多种主流的VR硬件设备，具有一定的通用性</li></ul><h3 id="Python库之图形界面"><a href="#Python库之图形界面" class="headerlink" title="Python库之图形界面"></a>Python库之图形界面</h3><p><strong>Quads：迭代的艺术</strong>（<a href="https://github.com/fogleman/Quads）" target="_blank" rel="noopener">https://github.com/fogleman/Quads）</a></p><ul><li>对图像进行四分迭代，形成像素风</li><li>可以生成动图或静图图像</li><li>简单易用，具有很高的展示度</li></ul><p><strong>ascii_art：ASSCII艺术库</strong>（<a href="https://github.com/jontonsoup4/ascii_art）" target="_blank" rel="noopener">https://github.com/jontonsoup4/ascii_art）</a></p><ul><li>将普通图片转为ASCII艺术风格</li><li>输出可以式纯文本或彩色文本</li><li>可采用图片格式输出</li></ul><p><strong>turtle：海龟绘图体系</strong>（<a href="https://docs.python.org/3/library/turtle.html）" target="_blank" rel="noopener">https://docs.python.org/3/library/turtle.html）</a></p><h3 id="实例：玫瑰花绘制"><a href="#实例：玫瑰花绘制" class="headerlink" title="实例：玫瑰花绘制"></a>实例：玫瑰花绘制</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#RoseDraw.py</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> t<span class="token comment" spellcheck="true"># 定义一个曲线绘制函数</span><span class="token keyword">def</span> <span class="token function">DegreeCurve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>left<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>r<span class="token punctuation">,</span> abs<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始位置设定</span>s <span class="token operator">=</span> <span class="token number">0.2</span> <span class="token comment" spellcheck="true"># size</span>t<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">450</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token number">750</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制花朵形状</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">350</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">150</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">400</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">250</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">500</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">550</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">650</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">220</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制花枝形状</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">280</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">300</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">350</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">500</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">170</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token operator">*</span>s<span class="token punctuation">)</span>DegreeCurve<span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制一个绿色叶子</span>t<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">670</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">180</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">300</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">300</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">180</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">550</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">600</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制另一个绿色叶子</span>t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1000</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>rt<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">300</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">300</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">430</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1070</span><span class="token operator">*</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">600</span><span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>实例：</strong>获取系统的递归深度、当前执行文件路径、系统最大UNICODE编码值等3个信息，并打印输出。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RECLIMIT:{}, EXEPATH:{}, UNICODE:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrecursionlimit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>executable<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>maxunicode<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例：</strong>tabulate能够对二维数据进行表格输出，是Python优秀的第三方计算生态。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tabulate <span class="token keyword">import</span> tabulatedata <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">"北京理工大学"</span><span class="token punctuation">,</span> <span class="token string">"985"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \         <span class="token punctuation">[</span><span class="token string">"清华大学"</span><span class="token punctuation">,</span> <span class="token string">"985"</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \         <span class="token punctuation">[</span><span class="token string">"大连理工大学"</span><span class="token punctuation">,</span> <span class="token string">"985"</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \         <span class="token punctuation">[</span><span class="token string">"深圳大学"</span><span class="token punctuation">,</span> <span class="token string">"211"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \         <span class="token punctuation">[</span><span class="token string">"沈阳大学"</span><span class="token punctuation">,</span> <span class="token string">"省本"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \    <span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>tabulate<span class="token punctuation">(</span>data<span class="token punctuation">,</span> tablefmt<span class="token operator">=</span><span class="token string">'grid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例：</strong>获得用户输入，去掉其中全部空格，将其他字符按收入顺序打印输出。 </p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#标答为</span>txt <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例：</strong>关键行指一个文件中包含的不重复行。关键行数指一个文件中包含的不重复行的数量。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'latex.log'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    ls <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> set<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"共{}关键行"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>实例：</strong>读入一个字典类型的字符串，反转其中键值对输出。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬</p><p>即，读入字典key:value模式，输出value:key模式。</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    e <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>        e<span class="token punctuation">[</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> k    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入错误"</span><span class="token punctuation">)</span></code></pre><p><strong>实例：</strong>《沉默的羔羊》之最多单词</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'沉默的羔羊.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    ls <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#ls = f.read().split()</span>    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> ls<span class="token punctuation">:</span>        d<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    maxc <span class="token operator">=</span> <span class="token number">0</span>    maxw <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>        <span class="token keyword">if</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> maxc <span class="token operator">and</span> len<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>            maxc <span class="token operator">=</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            maxw <span class="token operator">=</span> k        <span class="token keyword">if</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> maxc <span class="token operator">and</span> len<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">and</span> k <span class="token operator">></span> maxw<span class="token punctuation">:</span>            maxw <span class="token operator">=</span> k    <span class="token keyword">print</span><span class="token punctuation">(</span>maxw<span class="token punctuation">)</span></code></pre><p><strong>编程不重要，思想才重要！编程只是手段，熟练之，未雨绸缪为思想服务</strong></p><p><strong>Python语法的三个阶段：</strong></p><ul><li><strong>函数式编程（基础）</strong></li><li><strong>面向对象编程（进阶）</strong></li><li><strong>pythonic编程（高级）如何让Python语言调用其它语言编写的模块呢</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数电</title>
      <link href="/2020/05/24/%E6%95%B0%E7%94%B5/"/>
      <url>/2020/05/24/%E6%95%B0%E7%94%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电路设计</title>
      <link href="/2020/05/06/%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/05/06/%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="电路制图软件AD19"><a href="#电路制图软件AD19" class="headerlink" title="电路制图软件AD19"></a>电路制图软件AD19</h2><p>对于此软件的下载，找一下，在此连接中有介绍：<a href="https://www.redaimao.cn/2019/02/02/一些好用的软件推荐/" target="_blank" rel="noopener">https://www.redaimao.cn/2019/02/02/一些好用的软件推荐/</a><br>对于怎么用自己可以搜索一些教学视频，Qualify中有很多好用的教学网站。</p><h2 id="PCB常用元器件名称"><a href="#PCB常用元器件名称" class="headerlink" title="PCB常用元器件名称"></a>PCB常用元器件名称</h2><p>电阻RES、电位计POT、变电阻RVAR、电容CAP、电感IND、二极管DIO、发光二极管LED、三极管NPN、结型场效应管JFET、场效应管MOS|MES、继电器PELAY、运放OPAMP、开关SW、数码管DPY、天线ANT、直流电源BAT、铃|钟BELL、整流桥BRIDEG、缓冲器BUFF、蜂鸣器BUZZ、插口CON、晶振CRY、并行插口DB、熔断器FUSE、电机MOT、晶闸管SCR、插头PLUG、插座SOCK、变压器TRANS、(稳压)齐纳二极管ZENER。</p><h2 id="常用元器件的作用"><a href="#常用元器件的作用" class="headerlink" title="常用元器件的作用"></a>常用元器件的作用</h2><p>1、电阻：对电流有阻碍作用并造成能量消耗，它是线性元件，电阻两端电压与流过电流成正比。<br>   应用：分流、限流、分压、偏执、滤波和阻抗匹配。</p><p>2、电容:衡量导体存储电荷能的物理量，隔直通交，通低阻高（对于交流信号的阻碍作用成为容抗）。<br>   作用：隔直流、旁路、耦合、滤波、补偿、充放电、储能。<br>   <strong><code>旁路：</code></strong>是对输入信号中的高频噪声作为滤除对象。<br>   <strong><code>去耦：</code></strong>是对输出信号中的干扰作为去除对象。</p><p>3、电感：通直隔交，通低阻高<br>   作用：滤波、震荡</p><p>4、二极管<br>   作用：整流、发光</p><p>5、三极管：电流控制元件<br>   作用：电流放大</p><p>6、Mos管：利用输出电流控制输出电源</p><h2 id="电路案例分析"><a href="#电路案例分析" class="headerlink" title="电路案例分析"></a>电路案例分析</h2><h3 id="电源部分"><a href="#电源部分" class="headerlink" title="电源部分"></a>电源部分</h3><p>电源电路是电路的骨络，好与坏直接影响到电路的使用和寿命。</p><h4 id="二极管电桥"><a href="#二极管电桥" class="headerlink" title="二极管电桥"></a>二极管电桥</h4><p><img src="/postImg/14-2.jpg"><br>图中由四个二极管组成的电桥整流电路，供电端口可随意接</p><blockquote><p><strong>1N4007（整流二极管）:</strong></p><hr><p>广泛应用于各种交流变直流的整流电路中。也用于桥式整流电路。1n4007利用二极管单向导电性，可以把方向交替变化的交流电变换成单一方向的脉冲直流电。<br><strong>较强的正向浪涌承受能力：30A</strong><br><strong>最大正向平均整流电流：1.0A</strong><br><strong>最高反向耐压：1000V</strong><br><strong>最大反向漏电流：5uA</strong><br><strong>最大反向峰值电流：30uA</strong><br><strong>正向压降：1.0V</strong></p></blockquote><h4 id="充电电路"><a href="#充电电路" class="headerlink" title="充电电路"></a>充电电路</h4><p><img src="/postImg/14-3.jpg"><br>图中VUSB为usb充电端，VBAT为3.7V电池，R15、R16、R17为限流电阻，C12、C14为滤波电容。</p><blockquote><p><strong>TP4065(线性锂电池充电器):</strong></p><hr><p>世界首创电池带正负极犯戒保护、数额u电源正负极犯戒保护的单芯片，兼容大小3mA-600mA可调充电电流，适合usb电源和适配器电源工作。<br>由于采用了内部PMOSFET架构和放反接，所以不需要外部检测电阻和隔离二极管，热反馈可对充电电路电流自动调节。充电电压分为4.35V和4.2V。<br><strong>输入电压（Vcc）：-6.5V~12V</strong><br><strong>BAT：-4.35V~8V</strong><br><strong>PROG：-0.3V~Vcc+0.3V</strong><br><strong>CHRG：-0.3V~10V</strong><br><strong><code>CHRG(P1)：</code></strong>漏极开路输出的充电状态指示端。当充电器向电池充电时，CHRG管脚被内部开关拉到低电平，表示充电正在进行，否则就是高阻状态。<br><strong><code>BAT(P3)：</code></strong>充电电流输出。该引脚向电池提供充电电流并将最终浮充电压调节在4.2V。改引脚的一个精准内部电阻分压器设定浮充电压，在停机模式中，该内部电阻分压器断开。<br><strong><code>Vcc(P4)：</code></strong>正输入电源电压。该引脚为充电器提供电。范围在4V~8V，并应通过至少一个10uF电容进行旁路。当Vcc降至BAT端电压的30mA以内，TP4065进入停机状态，从而使BAT短电流降至1uA以下。<br><strong><code>PROG(P5)：</code></strong>冲断电流设定、充电电流设定、充电电流监控和停机引脚。在该引脚与地之间连接一个精度为1%的电阻器R，可以设定充电电流。当在恒定电流模式下进行充电，引脚的电压被维持在1V。PROG还可以用来关断充电器。将设定电阻器与地断接，内部一个0.2uA电流将PROG拉高至高电平。当该引脚的电压达到2.7V的停机门限电压时，充电器进入停机模式，充电停止且输入电源电流降至65uA。重新将R与地相连将使充电器恢复正常操作状态。</p></blockquote><h4 id="掉电检测"><a href="#掉电检测" class="headerlink" title="掉电检测"></a>掉电检测</h4><p><img src="/postImg/14-4.jpg"></p><h4 id="稳压电路"><a href="#稳压电路" class="headerlink" title="稳压电路"></a>稳压电路</h4><h5 id="MP2315"><a href="#MP2315" class="headerlink" title="MP2315"></a>MP2315</h5><p>品牌：MPS<br>封装：SOT23-8<br>MP2315是一个高频率同步整流降压开关型变换器内置内部功率MOSFET。可以实现3A连续输出。具有宽输输入电压范围（4.5V-24V）的输出电流具有良好的负载和线路调节。具有低静态电流，高效率同步模式操作。固定500kHz的开关频率，频率为200kHz-2MHz同步外部时钟。AAM省电模式，内部软启动，OCP保护，从0.8V输出可调。<br><img src="/postImg/14-5.jpg"><br><strong>引脚：</strong></p><blockquote><p><strong><code>1AAM：</code></strong>一个电阻从AAM引脚连接到地，以设置一个AAM电压力MP2315进入非同步模式时，负载很小。驱动器AAM引脚高(=VCC)将迫使MP2315进入CCM。<br><strong><code>2IN：</code></strong>电源电压。MP2315的工作范围为+4.5V到+24V输入轨道。需要一个电容来解耦输入轨。使用宽的PCB轨迹进行连接。<br><strong><code>3SW：</code></strong>开关输出。使用宽的PCB轨迹进行连接。<br><strong><code>4GND：</code></strong>参考电压接地。<br><strong><code>5BST：</code></strong>引导。一个电容和一个20Ω电阻连接在SW和BST引脚之间，需要形成一个浮动电源通过高侧开关驱动器。<br><strong><code>6EN：</code></strong>EN=1启用MP2315。外部时钟可应用于EN管脚，以改变开关频率。<br><strong><code>7VCC：</code></strong>偏见供应。采用0.1uF-0.22uF电容进行解耦。<br><strong><code>8FB：</code></strong>反馈。从输出到GND的一个外部电阻分压器，接在FB引脚上，设置输出电压。为了防止在短路故障情况下的电流限制跑了频率折叠式比较器降低振荡器频率时FB电压低于400mV。</p></blockquote><h5 id="7805"><a href="#7805" class="headerlink" title="7805"></a>7805</h5><p>7805三端稳压器，7805中的05就代表稳5V输出，如果是09那就是稳9V输出。器内部具有过压保护、过流保护、过热保护功能，这使得性能很稳定，能够实现1A以上的输出电流。使用时输入输出电压差不能太大，太大则转换效率急速降低，而且容易击穿损坏。最高输入电压不能超过35V；输出电流不能太大，1.5A是其极限值。大电流的输出，散热片的尺寸要求要足够大，否则会导致高温保护或热击穿。<br><img src="/postImg/14-5-a.jpg"></p><h5 id="HT7550"><a href="#HT7550" class="headerlink" title="HT7550"></a>HT7550</h5><p>HT7550是一组CMOS技术实现的三端低功耗高电压稳压器。输出电流为100mA且允许的输入电压可高达30V。具有几个固定的输出电压，范围从2.1V-12V。CMOS技术确保其具有低压降和低静态电流的特性。具有低功耗、低压降、较低的温度系数、高输入电压、静态电流2.5uA、大电流输出100mA、输出电压精度3%，封装SOT89、SOT23-5、TO92。<br><img src="/postImg/14-5-b.jpg"></p><h5 id="MIC29302"><a href="#MIC29302" class="headerlink" title="MIC29302"></a>MIC29302</h5><p>MIC29302是一个大电流，低成本，低压差电压调节器，它采用麦瑞半导体专有的超级βetaPNP进程与PNP旁路元件。在3ALDO稳压器具有450mV电压差和极低的接地电流。稳压器具有非常快从输入电压浪涌和输出瞬态恢复负载电流的变化。MIC29302还具有可调节的输出可以是通过两个外部电阻设置为1.24-15V之间。此外，该装置被充分保护，以防止过度当前故障，输入反想极性，相反的铅插入和过热运行。TTL逻辑使能EN引脚MIC29302可用关闭调节器。当不使用时，该设备可以通过连接EN的输入设定为连续运转（IN）。<br><strong>特点：</strong></p><blockquote><p>高电流能力，3A在整个温度范围内。<br>450mV的满负载低压差电压。<br>低接地电流。<br>精确的1%容差保证。<br>非常快速的瞬态响应。<br>零电流关断模式。<br>调控出错标志信号输出。<br>可调输出电压。<br>封装为TO-263-5L、TO-252-5L。</p></blockquote><p><img src="/postImg/14-5-c.jpg"></p><h5 id="AMS1117-3-3"><a href="#AMS1117-3-3" class="headerlink" title="AMS1117-3.3"></a>AMS1117-3.3</h5><p>AMS1117-3.3是一种输出电压为3.3V的正向低压降稳压器，在1A电流下压降为1.2V。<br>AMS1117有两个版本：固定输出版本和可调版本，固定输出版本输出电压为1.2V、1.5V、1.8V、2.5V、2.85V、3.0V、3.3V、5.0V。1.2V精度2%，其它1%。其内部集成过热保护和限流电路，具有低漏失电压：1A输出电流时仅为1.2V。<br><img src="/postImg/14-5-d.jpg"></p><h3 id="模数部分"><a href="#模数部分" class="headerlink" title="模数部分"></a>模数部分</h3><h4 id="红外热释电路"><a href="#红外热释电路" class="headerlink" title="红外热释电路"></a>红外热释电路</h4><p><strong>（红外传感器）：</strong><br><img src="/postImg/14-6.jpg"><br>热释电红外传感器是利用温度变化的特征来探测红外线的辐射，采用双灵敏元互补的方法抑制温度变化产生的干扰，提高了传感器的工作稳定性。<br>高灵敏度和优越的信噪比、对温度变化的高稳定性、对震动或射频干扰等抗干扰能力强、抗白光能力强。<br>热释电红外传感器输出电信号的幅度和频率主要取决于目标人体的温度、探测区域背景、人体与传感器的距离、人体移动的速度、光学透镜系统的聚焦和设计方式。</p><blockquote><p><strong>型号    RD-624</strong><br>封装    TO-5<br>红外接收电极    2×1mm, 2个灵敏元<br>窗口尺寸    3×4mm<br><strong><code>接收波长    5～14µm</code></strong><br>透过率    ＞75%<br><strong><code>输出信号峰值[Vp-p]    ≥3500mV</code></strong><br>灵敏度    ≥3200V/W<br>探测率 (D*)    1.4 ×108 cmHz1/2/W<br>噪声峰值[Vp-p]    ＜70mV<br>输出平衡度    ＜10%<br>源极电压    0.3～1.1V<br><strong><code>电源电压    3～15V</code></strong><br>工作温度范围    -30～70ºC<br>保存温度范围    -40～80ºC</p></blockquote><p>常配合菲涅尔透镜使用。<br><strong>菲涅尔透镜：</strong>菲涅尔透镜是平面化的聚光镜，菲涅尔透镜利用透镜的特殊光学原理，在探测器前方产生一个交替变化的“盲区”和“高灵敏区“。当有人从透镜前走过时，人体发出的红外线就会不断的交替从”盲区“进入”高灵敏区“，这样就使接收到的红外信号以忽强忽弱的脉冲形式输入。<br>菲涅尔透镜作用有两个：一是聚焦作用，即将热释红外信号折射在一点，第二作用是将探测区域内分为若干个明区和暗区，使进入探测区域的移动物体能以温度变化的形式在传感器上产生热释电信号。</p><p><strong>（多功能信号放大器BISS0001）：</strong><br><img src="/postImg/14-6-a.jpg"><br>BISS0001是一款具有较高性能的传感器信号处理集成电路，它配以热释电红外传感器和少量外接元器件构成被动式的热释红外开关，可以自动快速开启灯、蜂鸣器、白炽灯、自动门、电风扇、烘干器等装置，工作电压3~5V。<br><img src="/postImg/14-6-b.jpg"><br>内置三路比较放大器，两个将输入信号进行放大，放大倍数由设计者自定电路决定，一路对特定VR值进行比较，可以拓展光敏器件。输出延时可调Tx≈49152R1C1，触发封锁时间T1≈24R2C2。<br>再进一步简化电路你会发现它其实就是一个自带驱动能力的放大器IC<br><img src="/postImg/14-6-c.jpg"></p><p>需要具体的BISS0001资料的可以点击下载链接：<a href="https://pan.baidu.com/s/1ZpbI2_D2l1HAvYf-pCkLUg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZpbI2_D2l1HAvYf-pCkLUg</a><br>提取码：dcfg </p><h3 id="串并行部分"><a href="#串并行部分" class="headerlink" title="串并行部分"></a>串并行部分</h3><h4 id="74HC595"><a href="#74HC595" class="headerlink" title="74HC595"></a>74HC595</h4><p>74HC595是一个8位串行输入，可串行或并行输出的移位寄存器存储寄存器和三态输出。<br>该设备具有串行输入（DS）和串行输出（Q7S）来级联和异步复位输入MR的功能。</p><p>当MR为低电平时复位移位寄存器，即将移位寄存器数据清零。</p><p>在移位寄存器时钟（SHCP）的上升沿时，DS上的数据会被移入移位寄存器，在存储寄存器时钟（STCP）上升沿时，移位寄存器里的数据传输到存储寄存器，当输出使能OE为低时，存储寄存器里的数据就会并行输出。</p><p>当OE为高电平时输出为高阻态。<br><img src="/postImg/14-7.jpg"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Sent_Data_To_hc595</span><span class="token punctuation">(</span>uint8_t Outdata<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>Outdata <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断数据高低位</span>        <span class="token punctuation">{</span>            <span class="token function">HC595_DAT_State</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拉高595数据线DATA ↑</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">HC595_DAT_State</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//拉低595数据线DATA ↓</span>        <span class="token punctuation">}</span>        <span class="token function">HC595_SCK_State</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//拉低595 LCK时钟线 ↓</span>    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HC595_SCK_State</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拉高595 LCK时钟线 ↑</span>        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Outdata <span class="token operator">=</span> Outdata <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//数据左移</span>    <span class="token punctuation">}</span>    <span class="token function">HC595_RCK_State</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HC595_RCK_State</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//上升沿LATCH输出数据 →</span>    <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="功率计算"><a href="#功率计算" class="headerlink" title="功率计算"></a>功率计算</h2><p><img src="/postImg/14-8.jpg"></p><blockquote><p>0402型号电阻默认功率为1/16W。<br>0603型号电阻默认功率为1/10W。<br>0805型号电阻默认功率为1/8W。<br>1206型号电阻默认功率为1/4W。<br>1812型号电阻默认功率为1/2W。<br>2010型号电阻默认功率为3/4W。<br>2512型号电阻默认功率为1W。</p></blockquote><h2 id="天线计算"><a href="#天线计算" class="headerlink" title="天线计算"></a>天线计算</h2><p><img src="/postImg/14-9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电路设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目三：树莓派开发板实现语音对话</title>
      <link href="/2020/01/25/%E9%A1%B9%E7%9B%AE%E4%B8%89%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E6%9D%BF%E5%AE%9E%E7%8E%B0%E8%AF%AD%E9%9F%B3%E5%AF%B9%E8%AF%9D/"/>
      <url>/2020/01/25/%E9%A1%B9%E7%9B%AE%E4%B8%89%EF%BC%9A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E6%9D%BF%E5%AE%9E%E7%8E%B0%E8%AF%AD%E9%9F%B3%E5%AF%B9%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><p>利用树莓派开发板，调试出语音对话助手，能够进行对话</p><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p><strong>1、了解树莓派开发板</strong><br>树莓派由注册于英国的慈善组织“Raspberry Pi 基金会”开发，Eben·Upton/埃·厄普顿为项目带头人。2012年3月，英国剑桥大学埃本·阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”。</p><p><strong>2、开发环境搭建</strong><br>树莓派外壳、散热片、风扇的安装，并烧录系统。</p><p><strong>3、了解Linux常用命令</strong><br>为了能实现模块的功能，必须学会使用Linux系统，了解Linux常用命令以及vim编辑器的使用</p><p><strong>3、利用网站的教学视频进行配置</strong><br>树莓派有自己的专门网站，里面有每个模块的使用教学视频，利用视频跟着进行每一步骤的调试匹配工作。</p><p><strong>4、通过linux系统完成实现功能</strong><br>通过Linux系统，运行程序，实现功能。</p><h2 id="项目结果"><a href="#项目结果" class="headerlink" title="项目结果"></a>项目结果</h2><p>完成了语音对话功能！</p><div class="MV"><br>    <video controls autoplay loop><br>      <source src="/mv/raspberry_pi.ogg" type="video/ogg"><br>      <source src="/mv/raspberry_pi.mp4" type="video/mp4"><br>      <source src="/mv/raspberry_pi.webm" type="video/webm"><br>      <object data="/mv/raspberry_pi.mp4" width="320" height="240"><br>        <embed width="320" height="240" src="/mv/raspberry_pi.swf"><br>      </object><br>    </video><br></div><h2 id="项目参考书"><a href="#项目参考书" class="headerlink" title="项目参考书"></a>项目参考书</h2><p>《Linux操作系统案例教程》 </p><h2 id="项目收获"><a href="#项目收获" class="headerlink" title="项目收获"></a>项目收获</h2><p> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="https://www.redaimao.cn/2019/01/29/Linux%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8EVi%E6%8C%87%E4%BB%A4%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/" target="_blank">Linux目录文件基本操作与Vi指令和用户组管理</a><br> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="https://www.redaimao.cn/2019/01/31/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%A4%96%E5%AD%98%E7%AE%A1%E7%90%86/" target="_blank">Linux软件包和进程及外存管理</a><br> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="https://www.redaimao.cn/2019/02/01/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/" target="_blank">网络基础</a></p><style type="text/css">    /* don't remove. */    .content{    margin: 50px 0 0 0;    }    .about-cover {        height: 75vh;    }    .theme{        width: 100%;        height: 50px;        text-align: center;    }    .theme text{        font-size: 26px;     }    .headline{        width: auto;        overflow: auto;        height: auto;        text-align: center;    }    .headline text{                font-size: 16px;        color: #24586B;        font-family: "等线 light"        }    .one_link1{        width: auto;        height: 30px;        border: 2px solid #DDEFF4;        border-radius: 5px;        line-height: 25px;        text-align: center;        color: #000;        background: #DDEFF4;        font-size: 18px;        box-shadow: 1px 2px 5px #888888;    }    .MV{        width: 100%; background: #000;        height: 0;        position:relative;        padding-bottom: 56.25%;    }    .MV video{        position: absolute;        top: 0;        left: 0;        width: 100%;        height: 100%;    }</style><script type="text/javascript">    function afterBorder(x){         x.style.border="5px solid #A43749";         x.style.color="#fff";         x.style.background="#A43749";        }    function beforeBorder1(x){         x.style.border="2px solid #DDEFF4";         x.style.color="#000";         x.style.background="#DDEFF4";    }    function beforeBorder2(x){         x.style.border="2px solid #F4DDE2";         x.style.color="#000";         x.style.background="#F4DDE2";    }    function beforeBorder3(x){         x.style.border="2px solid #F1EED5";         x.style.color="#000";         x.style.background="#F1EED5";    }    function beforeBorder4(x){         x.style.border="2px solid #D1F0E2";         x.style.color="#000";         x.style.background="#D1F0E2";    }</script><main class="content"><br>    <div id="aboutme" class="container about-container"><br>        <div class="card"><br>            <div class="card-content"><br>                <div class="row"><br><br>                      <div class="theme"> <text>项目总结</text> </div><br><br>                      <div class="headline"><br>                          <text><br>                            2018年是人工智能席卷中国的一年，“AI”一词沾满了各大技术论坛、科技新闻头条。我为了不与世界离得太远，我开始了对python语言的学习，一次我看到了树莓派的多功能开发板，竟然能搭建语音助手，我一时来了兴趣，此次实战项目，对我帮助不是太大，但让我了解了语音助手的原理，也都是利用现有的语音库，接入它的API接口，实现语音对话。我对科技技术感兴趣，希望我能拖着我这笨重的身体继续前进。<br>                          </text><br><br>                      </div><br>                </div><br>            </div><br>        </div><br>    </div><br><br></main>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目二：微信小程序开发</title>
      <link href="/2020/01/13/%E9%A1%B9%E7%9B%AE%E4%BA%8C%EF%BC%9A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2020/01/13/%E9%A1%B9%E7%9B%AE%E4%BA%8C%EF%BC%9A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><p>完成一个可以用户登录访问使用的微信小程序</p><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p><strong>1、了解微信小程序开发手册</strong><br>首先需要注册并登录微信开放平台，下载微信开发软件，完成工作环境的搭建。仔细阅读开发手册，（微信对于小程序的开发做了许多功夫，在开发手册里面包含了许多代码结构和API接口，可以让开发者很容易的就上手。）</p><p><strong>2、开发程序</strong><br>开发软件在一开始就给了开发者基础框架结构，根据开发手册的各各模块代码结构一一实现需要的样式及功能。（可以学习利用大量的案例教程）</p><p><strong>3、调试及修改错误</strong><br>在编写代码过程中，即使你是照搬模块来的，也会有错误，对于出现的错误进行找错和修复。</p><p><strong>4、完成并申请</strong><br>所有功能完成后，申请使用小程序。</p><h2 id="项目结果"><a href="#项目结果" class="headerlink" title="项目结果"></a>项目结果</h2><p>完成了最初的设想的样式和功能，但没有完成对服务器的对接。</p><div class="MV"><br>    <video controls autoplay loop><br>      <source src="/mv/weixin.ogg" type="video/ogg"><br>      <source src="/mv/weixin.mp4" type="video/mp4"><br>      <source src="/mv/weixin.webm" type="video/webm"><br>      <object data="/mv/weixin.mp4" width="320" height="240"><br>        <embed width="320" height="240" src="/mv/weixin.swf"><br>      </object><br>    </video><br></div><h2 id="项目参考书"><a href="#项目参考书" class="headerlink" title="项目参考书"></a>项目参考书</h2><p>《HTML+css实战》<br>《Javascript权威指南》 ——弗拉纳根<br>《小程序开发与实战》 ——雷军<br>《PHP与MYSQL程序设计》 </p><h2 id="项目收获"><a href="#项目收获" class="headerlink" title="项目收获"></a>项目收获</h2><p> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="https://www.redaimao.cn/2019/01/21/ES6的常用语法" target="_blank">ES6的常用语法</a></p><style type="text/css">    /* don't remove. */    .content{    margin: 50px 0 0 0;    }    .about-cover {        height: 75vh;    }    .theme{        width: 100%;        height: 50px;        text-align: center;    }    .theme text{        font-size: 26px;     }    .headline{        width: auto;        overflow: auto;        height: auto;        text-align: center;    }    .headline text{                font-size: 16px;        color: #24586B;        font-family: "等线 light"        }    .one_link1{        width: auto;        height: 30px;        border: 2px solid #DDEFF4;        border-radius: 5px;        line-height: 25px;        text-align: center;        color: #000;        background: #DDEFF4;        font-size: 18px;        box-shadow: 1px 2px 5px #888888;    }    .MV{        width: 100%; background: #000;        height: 0;        position:relative;        padding-bottom: 56.25%;    }    .MV video{        position: absolute;        top: 0;        left: 0;        width: 100%;        height: 100%;    }</style><script type="text/javascript">    function afterBorder(x){         x.style.border="5px solid #A43749";         x.style.color="#fff";         x.style.background="#A43749";        }    function beforeBorder1(x){         x.style.border="2px solid #DDEFF4";         x.style.color="#000";         x.style.background="#DDEFF4";    }    function beforeBorder2(x){         x.style.border="2px solid #F4DDE2";         x.style.color="#000";         x.style.background="#F4DDE2";    }    function beforeBorder3(x){         x.style.border="2px solid #F1EED5";         x.style.color="#000";         x.style.background="#F1EED5";    }    function beforeBorder4(x){         x.style.border="2px solid #D1F0E2";         x.style.color="#000";         x.style.background="#D1F0E2";    }</script><main class="content"><br>    <div id="aboutme" class="container about-container"><br>        <div class="card"><br>            <div class="card-content"><br>                <div class="row"><br><br>                      <div class="theme"> <text>项目总结</text> </div><br><br>                      <div class="headline"><br>                          <text><br>                            此项目是在我大二的时候一时兴起做的，当时对高新的程序员充满了羡慕，自己也想成为那样厉害的人，在我印象中程序员就是黑客，他们可以制造病毒，编写工具，破解游戏，在网络上为所欲为，当自己想成为那样的人时，发现自己要学的东西实在太多了，即使我很努力的学习最简单的html都记不住，但我不会放弃，每一次实战项目都会或多或少能让我变强一点点，我希望自己有一天能变得很强！<br>                          </text><br><br>                      </div><br>                </div><br>            </div><br>        </div><br>    </div><br></main>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目一：个人网站的搭建</title>
      <link href="/2020/01/12/%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%9A%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/01/12/%E9%A1%B9%E7%9B%AE%E4%B8%80%EF%BC%9A%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><p>完成创建一个属于自己的个人网站，并且可以通过域名搜索随时随地的进入和访问。</p><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p><strong>1、了解hexo和github</strong><br>在整个项目的实行中，始终离不开这两个内容。git是一个开源的分布式版本控制系统，可以对项目进行管理。早期是linux之父用来管理linux系统源代码的工具。hexo是一个快速、简洁且高效的博客架构，采用Node.js所带来超快的生成速度，可以让几百个页面在几秒内瞬间完成渲染。支持Markdown甚至整合Octopress的大部分插件。一键部署、强大的扩展性。它最初也是GitHub中的一个项目。</p><p><strong>2、构建基本的架构</strong><br>下载hexo框架、下载git、下载node.js并完成运行调试。创建github账号并创建管理仓库。到此基本架构及工具已经完成。</p><p><strong>3、完成代码的本地部署</strong><br>利用git运行控制台下载基础网站样式架构，完成基本的hexo本地样式文件部署github之前的配置工作，并完成后部署和本地浏览。完成之后可以在本地浏览器查看网站的基本样式。</p><p><strong>4、完成域名解析</strong><br>购买一个合格的域名，完成解析工作，并设置好github的对接工作。再次启动部署，利用域名访问网站。</p><p><strong>5、了解HTML和css及js</strong><br>最后在原有的框架下，做出自己的网站风格及样式</p><h2 id="项目结果"><a href="#项目结果" class="headerlink" title="项目结果"></a>项目结果</h2><p>完成了一个随时随地可通过域名访问的个人网站，并含有评论系统插件，可播放固定音乐和视频。</p><div class="MV"><br>    <video controls autoplay loop><br>      <source src="/mv/markweb.ogg" type="video/ogg"><br>      <source src="/mv/markweb.mp4" type="video/mp4"><br>      <source src="/mv/markweb.webm" type="video/webm"><br>      <object data="/mv/markweb.mp4" width="320" height="240"><br>        <embed width="320" height="240" src="/mv/markweb.swf"><br>      </object><br>    </video><br></div><h2 id="项目参考书"><a href="#项目参考书" class="headerlink" title="项目参考书"></a>项目参考书</h2><p>《HTML入门》</p><h2 id="项目收获"><a href="#项目收获" class="headerlink" title="项目收获"></a>项目收获</h2><p> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="https://www.redaimao.cn/2019/01/21/hexo_github搭建网站" target="_blank">hexo+github搭建网站</a><br> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="https://www.redaimao.cn/2019/01/23/Gitalk评论配置/" target="_blank">Gitalk评论配置</a><br> <a class="one_link1" onmouseover="afterBorder(this)" onmouseout="beforeBorder1(this)" title="" href="https://www.redaimao.cn/2019/01/08/Html基础语法/" target="_blank">Html基础语法</a></p><style type="text/css">    /* don't remove. */    .content{    margin: 50px 0 0 0;    }    .about-cover {        height: 75vh;    }    .theme{        width: 100%;        height: 50px;        text-align: center;    }    .theme text{        font-size: 26px;     }    .headline{        width: auto;        overflow: auto;        height: auto;        text-align: center;    }    .headline text{                font-size: 16px;        color: #24586B;        font-family: "等线 light"        }    .one_link1{        width: auto;        height: 30px;        border: 2px solid #DDEFF4;        border-radius: 5px;        line-height: 25px;        text-align: center;        color: #000;        background: #DDEFF4;        font-size: 18px;        box-shadow: 1px 2px 5px #888888;    }    .MV{        width: 100%; background: #000;        height: 0;        position:relative;        padding-bottom: 56.25%;    }    .MV video{        position: absolute;        top: 0;        left: 0;        width: 100%;        height: 100%;    }</style><script type="text/javascript">    function afterBorder(x){         x.style.border="5px solid #A43749";         x.style.color="#fff";         x.style.background="#A43749";        }    function beforeBorder1(x){         x.style.border="2px solid #DDEFF4";         x.style.color="#000";         x.style.background="#DDEFF4";    }    function beforeBorder2(x){         x.style.border="2px solid #F4DDE2";         x.style.color="#000";         x.style.background="#F4DDE2";    }    function beforeBorder3(x){         x.style.border="2px solid #F1EED5";         x.style.color="#000";         x.style.background="#F1EED5";    }    function beforeBorder4(x){         x.style.border="2px solid #D1F0E2";         x.style.color="#000";         x.style.background="#D1F0E2";    }</script><main class="content"><br>    <div id="aboutme" class="container about-container"><br>        <div class="card"><br>            <div class="card-content"><br>                <div class="row"><br><br>                      <div class="theme"> <text>项目总结</text> </div><br><br>                      <div class="headline"><br>                          <text><br>                            回顾网站项目的流程与工作，此项目从最初的二零一六年开始到现在已有三年多的时间，期间此网站的搁浅时间最长的有一年，实际上心整理有三次，这是时隔第二次一年后的第四次。经过这几次的整理，我从中学到了许多知识，特别是对前端开发的了解，但不足的也有很多，特别是对这些知识的深入理解与记忆，整体看来还需要对这些知识进行系统的掌握几次，除此之外，做这些自己的项目也提高了自己的动手能力以及学习能力，希望我会在此领域越来越强！<br>                          </text><br><br>                      </div><br>                </div><br>            </div><br>        </div><br>    </div><br></main>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些技术问题的解法</title>
      <link href="/2019/02/03/%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95/"/>
      <url>/2019/02/03/%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机类"><a href="#计算机类" class="headerlink" title="计算机类"></a>计算机类</h2><h3 id="Win10商店打不开解法"><a href="#Win10商店打不开解法" class="headerlink" title="Win10商店打不开解法"></a>Win10商店打不开解法</h3><p><strong>不知道有没有小伙伴的电脑出现了自带商店打不开的问题，我有一个亲测有效的方法就是：重新安装。</strong><br>这种方法很简单粗暴，简直没有天理，直接上就行。</p><p><strong>1.用管理员打开powershell</strong><br><img src="/postImg/12-1-a.jpg"></p><p><strong>2.找出Windows Store 的包名</strong><br>  输入以下指令：<br>  <code>Get-AppxPackage -allusers | Select Name, PackageFullName</code><br>  点击回车机会出现下列的应用列表<br><img src="/postImg/12-1-b.jpg"></p><p><strong>3.找到Microsoft.WindowsStore并把后面的完整名称复制下来</strong><br> <img src="/postImg/12-1-c.jpg"></p><p><strong>4.把上一步复制下来的完整名称添加到后面代码：</strong><br><code>Add-AppxPackage -register “C:\Program Files\WindowsApps\（完整名称）\appxmanifest.xml” -DisableDevelopmentMode</code></p><p><strong>5.然后回到powershell执行这段指令</strong></p><p><strong>等待程序运行完毕，重启</strong><br><strong>搞定！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些好用的软件推荐</title>
      <link href="/2019/02/02/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2019/02/02/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h2 id="软件设计类"><a href="#软件设计类" class="headerlink" title="软件设计类"></a>软件设计类</h2><h3 id="基于C-C-的Visual-Studio-IDE"><a href="#基于C-C-的Visual-Studio-IDE" class="headerlink" title="基于C/C++的Visual Studio IDE"></a>基于C/C++的Visual Studio IDE</h3><p><img src="/postImg/11-1-a.jpg"><br>适用于Windows和Mac的Visual Studio IDE ，功能非常强大，<strong>开发适用于Android。ios、Mac、Windows、Wed和云的应用</strong>，Visual Studio 使你能够准确、高效地编写代码，并且不会丢失当前的文件上下文。通过代码的历史数据可跨语言快速查找并修复 bug，无论是在本地还是远程。使用全面的测试工具编写高质量代码，<strong>在任意提供商（包括 GitHub）托管的 Git 存储库中管理你的源代码。</strong>通过利用 Microsoft、合作伙伴和社区提供的工具、控件和模板，扩展 Visual Studio 功能。 </p><p><strong>注意</strong>:里面的组建比较多，安装内容也比较大，会有一部分组件会强制安装在C盘,C盘不够用的小伙伴要注意一下！</p><p><strong>安装步骤</strong><br>首先找到微软的官网，<a href="https://www.visualstudio.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-cn%2F，下载需要的IDE产品" target="_blank" rel="noopener">https://www.visualstudio.com/zh-hans/?rr=https%3A%2F%2Fwww.microsoft.com%2Fzh-cn%2F，下载需要的IDE产品</a><br><img src="/postImg/11-1-b.jpg"><br>选择community这个安装系列工具集下载器，你所之后需要的扩展功能都可以在这里面安装<br><img src="/postImg/11-1-c.jpg"><br><img src="/postImg/11-1-d.jpg"><br>完成后就会出现下面页面，根据需要装载组建，对于C程序这一部分组件就够了，按照图勾选上<br><img src="/postImg/11-1-e.jpg"><br>下载完成之后我们就打开软件，测试一下，首先打开文件新建项目<br><img src="/postImg/11-1-f.jpg"><br>选择windows控制台，填写项目名称以及路径，文件名默认为C++文件.cpp，如果写的是C，文件名后面需要加.c，然后确定。<br><img src="/postImg/11-1-g.jpg"><br>然后就可以在打开的文件里面开始编写，<br><img src="/postImg/11-1-h.jpg"><br>然后调试编译<br><img src="/postImg/11-1-i.jpg"><br>最后查看是否出错<br><img src="/postImg/11-1-j.jpg"><br>测试后的错误列表和输出都可以再视图里面找到<br><img src="/postImg/11-1-k.jpg"></p><h3 id="VC-2010Express"><a href="#VC-2010Express" class="headerlink" title="VC++2010Express"></a>VC++2010Express</h3><p><img src="/postImg/11-2-a.jpg"><br>VC++2010Express是VS2010版本中的一个组件，使其编写C/C++的一个工具，一般不会用到，最近计算机二级C考试软件改成了VC++2010学习版，对于软件使用的熟练程度也影响着成绩，所以不妨下一个熟悉一下操作环境。<br><strong>百度云盘下载地址：链接: <a href="https://pan.baidu.com/s/1Eyio46MqICng357_PNIiCA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Eyio46MqICng357_PNIiCA</a> 密码: xy4u</strong></p><p><strong>安装：</strong><br>除了安装目录，一直点确定就可以了，软件是中文版的<br><strong>配置小操作：</strong><br>刚安装号后进入软件是没有编译按钮的需要自己添加，对于不熟悉的小伙伴不用担心浪费时间，我给你找好了方法</p><p><strong>首先快捷栏里面是没有我们熟悉的编译按钮的，这需要我们自己弄上去</strong><br>首先点击工具→自定义<br><img src="/postImg/11-2-b.jpg"></p><p>然后把生成打上勾，你就会发现软件面板上出现了编译按钮<br><img src="/postImg/11-2-c.jpg"></p><p>右击编译栏右边的小箭头→添加执行→自定义，因为我们编写的不是真正的项目，所以选择执行但不调试<br><img src="/postImg/11-2-d.jpg"><br><img src="/postImg/11-2-e.jpg"><br><img src="/postImg/11-2-f.jpg"></p><p>完成！之后在写完程序后就可以点击这个绿色的三角按钮进行执行操作。</p><h2 id="硬件设计类"><a href="#硬件设计类" class="headerlink" title="硬件设计类"></a>硬件设计类</h2><h3 id="Altium-Designer-19-0"><a href="#Altium-Designer-19-0" class="headerlink" title="Altium Designer 19.0"></a>Altium Designer 19.0</h3><p>硬件电路设计必备工具之一，19版更是新界面优化。<br>百度云盘链接：<a href="https://pan.baidu.com/s/1NXwU_IN4bZa2WMhGE4_3Gg" target="_blank" rel="noopener">https://pan.baidu.com/s/1NXwU_IN4bZa2WMhGE4_3Gg</a>       提取码：ctas  （里面有完整的安装教程）<br><strong>安装步骤:</strong><br>1、如果装过dxp或AD请一定卸载完整后再装！！！<br>   ①C盘，Program Files (x86)文件夹中删除“Altium”文件夹；C盘，ProgramData文件夹（此文件夹是隐藏的）中删除“Altium”和“Altium2004”这两个文件夹；<br>   ②C盘- 用户- 用户名（系统用户名）- AppData - Local中删除“Altium”文件夹;<br>   ③C盘- 用户- 用户名（系统用户名）-AppData - Roaming中删除“Altium”文件夹；<br>   ④C盘- 用户- 公用- 公用文档中删除“Altium”文件夹。，把这些全部删除干净，再重新安装AD。<br>2、建议下载驱动精灵检查显卡驱动是否需要更新<br>3、安装步骤<a href="https://www.pcsoft.com.cn/soft/177290.html" target="_blank" rel="noopener">https://www.pcsoft.com.cn/soft/177290.html</a><br>4、安装后去删除一个AD默认安装的驱动软件，忘了叫啥了，一般都和AD在一块<br>5、第一次用管理员要去运行</p><h2 id="影视音乐类"><a href="#影视音乐类" class="headerlink" title="影视音乐类"></a>影视音乐类</h2><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><p>网易去音乐可以说很好了，如果你喜欢英文歌，那你选它就是对的。</p><h3 id="FDM下载器"><a href="#FDM下载器" class="headerlink" title="FDM下载器"></a>FDM下载器</h3><p>FDM(Free Download Manager)是一款非常好用的轻量级下载器，相比于迅雷的免费版，这款下载器可以说是免费且没有广告，可以告别弹广告的恶心事情。<br>官网地址：<a href="https://www.freedownloadmanager.org/" target="_blank" rel="noopener">https://www.freedownloadmanager.org/</a><br>点击Free Download,安装时一直确认就行，记得自己换安装路径。<br>你只需要把下载的种子资源拖进去就可以实现下载，而且还不会像迅雷一样限速。<br><img src="/postImg/11-3-a.jpg"></p><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="Bandizip"><a href="#Bandizip" class="headerlink" title="Bandizip"></a>Bandizip</h3><p>Bandizip是一款解压软件，同样的我也是看中了它免费且无广告的优点。<br>官网地址：<a href="http://www.bandisoft.com/bandizip/" target="_blank" rel="noopener">http://www.bandisoft.com/bandizip/</a><br><img src="/postImg/11-3-b.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础</title>
      <link href="/2019/02/01/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/02/01/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="一、Linux网络配置基础"><a href="#一、Linux网络配置基础" class="headerlink" title="一、Linux网络配置基础"></a>一、Linux网络配置基础</h3><p><strong>TCP/IP是Internet网络的标准协议</strong>，也是全球使用最广泛、最重要的一种网络通信协议。目前无论是UNLX系统还是Windows系统都全面支持TCP/IP。<br>接入TCP/IP网络的计算机一般都需要进行网络配置，可能<strong>需要配置的参数包括主机名、IP地址、子网掩码、网关地址和DNS服务器地址</strong>等。</p><h4 id="一-TCP-IP参考模型"><a href="#一-TCP-IP参考模型" class="headerlink" title="(一)TCP/IP参考模型"></a>(一)TCP/IP参考模型</h4><p>TCP/IP参考模型包括网络接口层、网络层、传输层和应用层。</p><p><img src="/postImg/10-2.jpg"></p><h5 id="1-网络接口层"><a href="#1-网络接口层" class="headerlink" title="1.网络接口层"></a>1.网络接口层</h5><p><strong>TCP/IP参考模型最底层是网络接口层，塔包括那些能使TCP/IP与物理网络进行通信的协议</strong>。TCP/IP标准并没有定义具体的网络接口协议，而是<strong>旨在提供灵活性，以适应各种网络类型</strong>。网络<strong>类型通常有以太网、令牌环网、帧中继网和ATM网络</strong>。以太网是目前使用最广泛的局域网技术，<strong>属于基带总线局域网</strong>，核心技术采用<strong>CSMA/CD</strong>（Carrier Sense Multiple Access with Collision Detection）通信控制机制。<strong><code>CSMA/CD是一种算法，主要用于传输以及解码格式化的数据包，包括检测节点地址并监控传输错误</code></strong>。</p><h5 id="2-网络层"><a href="#2-网络层" class="headerlink" title="2.网络层"></a>2.网络层</h5><p>网络层所执行的功能是消息寻址以及把逻辑地址和名称转换成物理地址。<strong>通过判定从原计算机到目标计算机的路由，该层还控制子网的操作</strong>。在网络层中，含有4个重要协议：互联网协议（Internet Pretocol，IP）、互联网控制报文协议（Internet Control Message Protocol，ICMP）、地址转换协议（Address Resolution Protocol，ARP）和反向地址转换协议（Reverse Address Resolution Protocol，RARP）。</p><ul><li><strong><code>IP</code>：</strong>负责通过网络交换数据包，同时也负责主机间数据包的路由和主机寻址。</li><li><strong><code>ICMP</code>：</strong>传送各种信息，包括与包交付有关的错误报告。</li><li><strong><code>ARP</code>：</strong>通过目标设备的IP地址，查询目标设备的硬件MAC地址。</li><li><strong><code>RARP</code>：</strong>声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个地址。</li></ul><h5 id="3-传输层"><a href="#3-传输层" class="headerlink" title="3.传输层"></a>3.传输层</h5><p>在TCP/IP模型中，传输层的主要功能是提供从一个应用程序到另一个应用程序的通信，<strong>常称为端对端通信。</strong>现在的操作系统都支持多用户和多任务操作，一台计算机可以运行多个应用程序，因此<strong>所谓端对端的通信实际上是指从源进程发出数据到目标进程的通信过程</strong>。传输层包括2个主要协议：传输控制协议TCP和数据报协议UDP，分别支持两种数据传送方式。</p><ul><li><strong>传输控制协议<code>TCP</code>：</strong>面向对象链接的通信提供可靠的数据传送。用于大量数据的传输或主机之间的扩展对话，通常要求可靠的传送。</li><li><strong>用户数据报协议<code>UDP</code>:  </strong>在发送数据前不要求建立链接，目的是提供高效的离散数据报传送，但是不能保证传送被完成。</li></ul><h5 id="4-应用层"><a href="#4-应用层" class="headerlink" title="4.应用层"></a>4.应用层</h5><p>应用层位于TCP/IP模型的最高层。最常用的协议包括：文件传输协议FTP、远程登录Telnet、域名服务DNS、简单邮件传输SMTP和超文本传输协议HTTP等。</p><ul><li><strong><code>FTP</code>：</strong>用于实现主机之间的文件传输功能。</li><li><strong><code>HTTP</code>：</strong>用于实现互联网中的WWW服务。</li><li><strong><code>SMTP</code>：</strong>用于实现互联网中的电子邮件传送功能。</li><li><strong><code>DNS</code>：</strong>用于实现主机名与IP地址间的转换。</li><li><strong><code>SMB</code>：</strong>用于实现Windows主机与Linux主机间的文件共享。</li><li><strong><code>Telnet</code>：</strong>用于实现远程登陆功能。</li><li><strong><code>DHCP</code>：</strong>用于实现动态分配IP配置信息。</li></ul><h4 id="二-网络配置参数"><a href="#二-网络配置参数" class="headerlink" title="(二)网络配置参数"></a>(二)网络配置参数</h4><h5 id="1-主机名"><a href="#1-主机名" class="headerlink" title="1.主机名"></a>1.主机名</h5><p>主机名用于标识网络中的计算机，通常主机名在网络中是唯一的。<strong>如果某一主机在DNS服务器上进行过域名注册，那么其主机名和域名通常也是相同的</strong>。</p><h5 id="2-IP地址和子网掩码"><a href="#2-IP地址和子网掩码" class="headerlink" title="2.IP地址和子网掩码"></a>2.IP地址和子网掩码</h5><p>TCP/IP网络中一台计算机要与网络中的其他计算机进行通信，就必须至少拥有一个唯一的IP地址，否则在信息传送过程中无法识别信息的接收方和发送方。<strong>IP地址一定设置在主机的网卡上，网卡的IP地址等同于主机的IP地址</strong>。<br>IP地址采用“x.x.x.x”格式表示，每个x部分的取值范围在0~255.传统上将IP地址分为A、B、C、D、E五类。</p><p>IP地址分类：</p><p><img src="/postImg/10-3.jpg"></p><p>在所有的IP地址中，<strong>以“127”开头的IP地址不可用于指定主机的IP地址</strong>，它被称为回送地址，供计算机在各个网络进程之间进行通讯时使用。同一网络中每一台主机的IP地址必须不同，否则会造成IP地址的冲突。<br><strong>在配置IP地址的同时还必须配置子网掩码。为了保证网络的安全和减轻网络管理的负担，有时会把一个网络分成多个部分，而分出的部分就是子网</strong>，与之对应的子网掩码用来区分不同的子网，其表现形式与IP地址一样。在一般网络应用中，通常不进行子网划分，采取默认的子网掩码。</p><h5 id="3-网关地址"><a href="#3-网关地址" class="headerlink" title="3.网关地址"></a>3.网关地址</h5><p><strong>设置主机的IP地址和子网掩码后，该主机就可以使用IP地址与同一网段的其他主机进行通信了，但是不能与不同网段的主机进行通信。即使两个网段连接在一台交换机上</strong>，TCP/IP也会根据子网掩码判定主机处在不同的网络。<strong>要实现这两个网络之间的通信，<code>必须通过网关来实现</code>。</strong><br><strong><code>假设: 有网络A和网络B，网络A的IP地址范围为192.168.0.1~192.168.0.254,子网掩码为255.255.255.0。当网络A中的主机向网络B中的主机发送数据包时，网络A中的主机会把数据包转发给网络A的网关，在由该网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机。为了实现与不同网段的主机进行通信，必须设置网关地址，该网关地址一定是同网段主机的IP地址。</code></strong></p><h5 id="4-DNS服务器地址"><a href="#4-DNS服务器地址" class="headerlink" title="4.DNS服务器地址"></a>4.DNS服务器地址</h5><p>直接使用IP地址就可以访问网络中的主机，但是用<strong>数字表示的IP地址难以记忆，通常人们使用域名来访问网络中的主机</strong>。为了能够使用域名，需要为计算机指定至少一个DNS服务器，由这个DNS服务器来完成域名解析的工作。域名解析包括两个方面：<strong><code>正想解析</code></strong>和<strong><code>反向解析</code> </strong>。</p><h4 id="三-Linux网络服务器对应端口"><a href="#三-Linux网络服务器对应端口" class="headerlink" title="(三)Linux网络服务器对应端口"></a>(三)Linux网络服务器对应端口</h4><p>采用TCP/IP的服务可为客户机提供各种网络服务，如WWW服务，FTP服务。<strong>为区别不同类型的网络连接，TCP/IP利用端口号来进行区别。TCP/IP的端口范围为：0-65536，其中：0~255称为“知名端口”，该类端口保留给常用服务程序使用；256~1024是用于UNIX/Linux专用服务；</strong>1024以上的端口为动态端口，动态端口不是预先分配的，必要时才将它分配给进程。 </p><p>常用的网络服务和端口：</p><p><img src="/postImg/10-4.jpg"></p><h3 id="二、以太网的TCP-IP设置"><a href="#二、以太网的TCP-IP设置" class="headerlink" title="二、以太网的TCP/IP设置"></a>二、以太网的TCP/IP设置</h3><h4 id="一-Linux网络接口"><a href="#一-Linux网络接口" class="headerlink" title="(一)Linux网络接口"></a>(一)Linux网络接口</h4><h5 id="1-lo接口"><a href="#1-lo接口" class="headerlink" title="1.lo接口"></a>1.lo接口</h5><p>lo接口表示本地回送接口，用于网络测试以及本地主机各网络进程之间的通信。无论什么应用程序，只要使用回送地址（127.0.0.1）发送数据都不会进行任何真实的网络传输。Linux系统默认包含会送接口。</p><h5 id="2-eth-接口"><a href="#2-eth-接口" class="headerlink" title="2.eth*接口"></a>2.eth*接口</h5><p>eth接口表示网卡设备接口，并附加数字来反映物理网卡的序号。如第一块网卡称为eth0，第二块网卡称为eth1，并依次类推。</p><h5 id="3-ppp接口"><a href="#3-ppp接口" class="headerlink" title="3.ppp接口"></a>3.ppp接口</h5><p>Ppp接口表示ppp设备接口，并附加数字来反映ppp设备的序号。第一个ppp接口称为ppp0，第二个ppp接口称为ppp1，并依此类推。采用ISDN或ADSL等方式接入Internet时使用ppp接口。</p><h4 id="二-Linux网络相关配置文件"><a href="#二-Linux网络相关配置文件" class="headerlink" title="(二)Linux网络相关配置文件"></a>(二)Linux网络相关配置文件</h4><p><strong>/etc</strong>目录中包含一系列与<strong>网络配置</strong>相关的文件和目录。</p><h5 id="1-etc-sysconfig-network文件"><a href="#1-etc-sysconfig-network文件" class="headerlink" title="1./etc/sysconfig/network文件"></a>1./etc/sysconfig/network文件</h5><p>Network文件用来设置主机基本的网络信息。其内容如下：</p><pre class=" language-bash"><code class="language-bash">NETWORKING<span class="token operator">=</span>yes/no     //启动系统时是否启用网络服务HOSTNAME-abc.com     //设置主机名GATEWAY<span class="token operator">=</span>192.168.0.1    //设定默认网关GATEWAYDEV<span class="token operator">=</span>eth0      //设定网关接口FORWARD_IPV4<span class="token operator">=</span>yes/no    //是否启用IP转发功能</code></pre><h5 id="2-etc-hosts文件"><a href="#2-etc-hosts文件" class="headerlink" title="2./etc/hosts文件"></a>2./etc/hosts文件</h5><p><strong>Hosts文件可以保留主机域名与IP地址的对应关系</strong>。在计算机网络的发展初期，系统可以利用hosts文件查询域名所对应的IP地址。随着Internet的迅速发展，现在一般通过DNS服务器来查询域名所对应的IP地址。但是hosts文件让然被保留下来，用于经常访问的主机域名和IP地址，可以提高访问的速度。</p><h5 id="3-etc-sysconfig-network-scripts-ifcfg-eth0文件"><a href="#3-etc-sysconfig-network-scripts-ifcfg-eth0文件" class="headerlink" title="3./etc/sysconfig/network-scripts/ifcfg-eth0文件"></a>3./etc/sysconfig/network-scripts/ifcfg-eth0文件</h5><p>此文件用于配置以太网接口中第一块网卡的IP信息。其内容如下：</p><pre class=" language-bash"><code class="language-bash">ONBOOT<span class="token operator">=</span>yes                     //启动是是否激活网卡DEVICE<span class="token operator">=</span>eth0                      //设置接口名称BOOTPROTO<span class="token operator">=</span>none<span class="token operator">|</span>static<span class="token operator">|</span>dhcp<span class="token operator">|</span>bootp  //设定网卡启动协议IPADDR<span class="token operator">=</span>193.168.3.24                //设置主机IPNETMASK<span class="token operator">=</span>255.255.255.0             //设定子网掩码BROADCAST<span class="token operator">=</span>192.168.2.255        //设定广播码NETWORK<span class="token operator">=</span>192.168.3.0          //设置网络号GATEWAY<span class="token operator">=</span>192.168.3.1               //设定网关TYPE<span class="token operator">=</span>Ethernet                     //设定网络类型</code></pre><h5 id="4-etc-resolv-Conf文件"><a href="#4-etc-resolv-Conf文件" class="headerlink" title="4./etc/resolv.Conf文件"></a>4./etc/resolv.Conf文件</h5><p>此文件列出了客户机所使用的DNS服务器的相关信息。内容如下：</p><pre class=" language-bash"><code class="language-bash">domainname    linux.com         //设定主机所在的网络域名，可以不设置serch    linux.com               //设定DNS服务器的域名搜索列表nameserver    192.168.0.10        //设定DNS服务器的IP地址</code></pre><blockquote><p>注意：最多只能设置3个DNS服务器地址，并且每个DNS服务器的记录自成一行。当主机需要进行域名解析时，首先查询第一个DNS服务器，如果无法成功则像第二个DNS服务器查询。</p></blockquote><p><strong><code>案例分析1：在配置文件中配置本系统的主机信息、IP地址等信息，配置都可以让该系统正常登陆互联网。</code></strong></p><pre class=" language-bash"><code class="language-bash">1）设置主机信息/etc/sysconfig/network文件：NETWORKING<span class="token operator">=</span>yes/no    HOSTNAME-abc.com    GATEWAY<span class="token operator">=</span>192.168.0.1   GATEWAYDEV<span class="token operator">=</span>eth0     FORWARD_IPV4<span class="token operator">=</span>yes/no 2）用vi编辑器打开/etc/sysconfig/network-scripts/ifcfg-eth0，并设置:Vi /etc/sysconfig/network-scripts/ifcfg-eth0ONBOOT<span class="token operator">=</span>yes                      DEVICE<span class="token operator">=</span>eth0                     BOOTPROTO<span class="token operator">=</span>none<span class="token operator">|</span>static<span class="token operator">|</span>dhcp<span class="token operator">|</span>bootp  IPADDR<span class="token operator">=</span>193.168.1.24               NETMASK<span class="token operator">=</span>255.255.255.0              BROADCAST<span class="token operator">=</span>192.168.1.255          NETWORK<span class="token operator">=</span>192.168.1.0             GATEWAY<span class="token operator">=</span>192.168.1.1             TYPE<span class="token operator">=</span>Ethernet  3<span class="token punctuation">)</span>设置DNS信息：domainname    linux.com         serch    linux.com              nameserver    192.168.0.10 4<span class="token punctuation">)</span>修改完保存退出，重新启动网络配置即可etc/rc.d/init.d/network    restart或者servise   httpd    start/restart</code></pre><p><strong><code>案例分析2：设定主机存在eth0设备，它的IP地址是192.168.3.24，要求给eth0再绑定IP地址192.168.3.44</code></strong></p><pre class=" language-bash"><code class="language-bash">1）输入以下命令：<span class="token function">cd</span> /etc/sysconfig/network-scripts<span class="token function">cp</span> ifcfg-eth0   ifcfg-eth0:0     //取值从0开始2）输入以下命令：Vi  ifcfg-eth0:0修改后的内容如下：ONBOOT<span class="token operator">=</span>yes        //启动时是否激活网卡BOOTPROTO<span class="token operator">=</span>none    //设置网卡启动协议DEVICE<span class="token operator">=</span>eth0:0       //设置接口名称IPADDR<span class="token operator">=</span>192.168.3.44  //设定主机IP地址NETMASK<span class="token operator">=</span>255.25.255.0     //设定子网掩码NETWORK<span class="token operator">=</span>192.168.3.0      //设定网络号BROADCAST<span class="token operator">=</span>192.168.3.255  //设定广播码GATEWAY<span class="token operator">=</span>192.168.3.1      //设定网关3）输入以下内容：<span class="token function">vi</span> ifcfg-eth0修改后的内容：ONBOOT<span class="token operator">=</span>yes       BOOTPROTO<span class="token operator">=</span>none   DEVICE<span class="token operator">=</span>eth0 IPADDR<span class="token operator">=</span>192.168.3.24 NETMASK<span class="token operator">=</span>255.25.255.0NETWORK<span class="token operator">=</span>192.168.3.0 BROADCAST<span class="token operator">=</span>192.168.3.255 GATEWAY<span class="token operator">=</span>192.168.3.1</code></pre><h5 id="5-服务的启动方式"><a href="#5-服务的启动方式" class="headerlink" title="5.服务的启动方式"></a>5.服务的启动方式</h5><p><strong>1）服务的分类</strong><br>独立服务：每项服务只监听该服务指定的端口，服务的启动脚本存放在/etc/rc.d/init.d/<br>超级服务：超级服务有xinetd管理，服务的配置文件存放在/etc/xinetd.d/目录中。<br><strong>2）服务的启动、关闭与重启</strong><br>方法一：</p><pre class=" language-bash"><code class="language-bash">/etc/rc.d/init.d/脚本 <span class="token operator">&lt;</span>start<span class="token operator">|</span>restart<span class="token operator">|</span>stop<span class="token operator">></span>或/etc/init.d/脚本名  <span class="token operator">&lt;</span>start<span class="token operator">|</span>restart<span class="token operator">|</span>stop<span class="token operator">></span>其中/etc/rc.d/init.d/network用法为：/etc/rc.d/init.d/network <span class="token operator">&lt;</span>start<span class="token operator">|</span>stop<span class="token operator">|</span>restart<span class="token operator">|</span>reload<span class="token operator">|</span>status<span class="token operator">></span>例如：/etc/rc.d/init.d/network restart/etc/rc.d/init.d/network start设置网络参数：            <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>弹出环回接口：            <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>弹出界面rth0：             <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>又如：/etc/rc.d/init.d/network stop/etc/rc.d/init.d/network stop正在关闭接口eth0：        <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span>关闭环回接口:              <span class="token punctuation">[</span>  确定  <span class="token punctuation">]</span></code></pre><p>方法二：</p><pre class=" language-bash&#39;"><code class="language-bash&#39;">service 服务名 <start|restart|stop>例如：Service  httpd  start|stopService  httpd  start启动httpd：              [  确定  ]Service  httpd  stop    停止httpd：              [  确定  ]</code></pre><p><strong><code>例子3：对本机内的一个网卡eth0再绑定一个IP地址</code></strong><br><strong>根据一块网卡绑定两个IP地址的方法，修改IP地址，保存退出vi编辑器，然后重新启动网络服务使更改生效</strong><br>/etv/rc.d/init.d/network  restart   或者  service   httpd  start|restart</p><h3 id="三、常用的网络配置命令"><a href="#三、常用的网络配置命令" class="headerlink" title="三、常用的网络配置命令"></a>三、常用的网络配置命令</h3><h5 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h5><p>功能：显示网络接口的配置信息、激活/禁用某个网络接口、配置网络接口IP地址。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ifconfig</span> 【接口名】 IP地址   netmask  子网掩码 <span class="token punctuation">[</span>up/down<span class="token punctuation">]</span></code></pre><p><strong>示例：</strong><br><code>ifconfig</code>  //查看当前网络接口配置情况<br><code>ifconfig eth0</code> //查看eth0网络接口配置情况<br><code>ifconfig eth0 down</code> //停用网卡eth0<br><code>ifconfig 192.168.0.10   netmask  255.255.255.0</code>//将网卡的IP地址设置为192.168.0.10，子网掩码设置为255.255.255.0</p><h5 id="ifup命令"><a href="#ifup命令" class="headerlink" title="ifup命令"></a>ifup命令</h5><p>功能：激活/启用网络接口</p><pre class=" language-bash"><code class="language-bash">ifup【设备名】</code></pre><h5 id="ifdown命令"><a href="#ifdown命令" class="headerlink" title="ifdown命令"></a>ifdown命令</h5><p>功能：禁用或停止网络接口</p><pre class=" language-bash"><code class="language-bash">ifdown【设备名】</code></pre><h5 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h5><p>功能：向目标主机发送ICMP数据包，检测IP连通性。</p><pre class=" language-bash"><code class="language-bash">ping【参数】 IP地址/主机名</code></pre><p><strong>参数：</strong></p><ul><li><code>-c  n</code>：指定得到n个应答后中断操作</li></ul><blockquote><p>示例：测试与地址192.168.0.1的主机联通情况<br>Ping 192.168.0.1<br>Ping -c 3 192.168.0.1   //应答3次后中断</p></blockquote><h5 id="traceroute命令"><a href="#traceroute命令" class="headerlink" title="traceroute命令"></a>traceroute命令</h5><p>功能：跟踪路由<br>示例：测试与<a href="http://www.sina.com的路由连通情况" target="_blank" rel="noopener">www.sina.com的路由连通情况</a></p><pre class=" language-bash"><code class="language-bash">tracerout  www.sina.com</code></pre><h5 id="hostname命令"><a href="#hostname命令" class="headerlink" title="hostname命令"></a>hostname命令</h5><p>功能：显示或修改主机名</p><pre class=" language-bash"><code class="language-bash"><span class="token function">hostname</span> 【主机名】</code></pre><blockquote><p>示例：<br>hostname    //显示主机名<br>Hostname  hhhh   //主机名更换为hhhh</p></blockquote><h5 id="route命令"><a href="#route命令" class="headerlink" title="route命令"></a>route命令</h5><p>功能：显示路由表、添加路由、删除路由和添加/删除默认网关。</p><pre class=" language-bash"><code class="language-bash">routeRoute add   -net     网络地址  netmask   子网掩码  dev  网卡设备名Route del    -net     网络地址  netmask   子网掩码  Route add   default   gw      网关IP地址    dev    网卡设备名Route del   default   gw      网关IP地址    dev    网卡设备名</code></pre><h2 id="FTP服务器"><a href="#FTP服务器" class="headerlink" title="FTP服务器"></a>FTP服务器</h2><p>FTP是互联网中一种应用非常广泛的服务，<strong>用户可以通过其服务获取需要的文档、资料、音频和视频等</strong>。从互联网出现的开始，它一直就是用户使用频率最高的应用服务器之一。</p><h3 id="FTP服务器简介"><a href="#FTP服务器简介" class="headerlink" title="FTP服务器简介"></a>FTP服务器简介</h3><p>虽然用户可以采用多种方式来发送文件，但是FTP凭借其简单高效的特性，仍然是跨平台直接传送文件的主要方式。<strong>FTP是FTP/IP的一种具体应用，其工作在OSI模型的第七层，TCP模型的第四层上，即应用层</strong>。FTP使用TCP传输而不是UDP传输，这样客户在和服务器建立连接之前就要经过一个广为熟知的“三次握手过程”，它的意义在于客户与服务器之间的连接是可靠的，而且是面向连接。<br><strong>FTP的主要作用：</strong></p><ul><li>从客户向服务器发送一个文件</li><li>从服务器向客户发送一个文件</li><li>从服务器向客户发送文件或目录列表</li></ul><p><strong>与大多数Internet服务器一样，FTP也采用客户机/服务器模式</strong>。用户利用FTP客户机程序连接到远程主机上的FTP服务器程序，然后向服务器程序发送命令，服务器程序执行用户所发出的命令，并将执行结果返回到客户机。<br><strong>在此过程中，FTP服务器与FTP客户机之间建立两个连接：<code>控制连接</code>和<code>数据连接</code>。</strong>控制连接用于传送FTP命令以及相应结果，而数据连接负责传送文件。<strong>通常FTP服务器的守候进程总是监听21端口，等待控制连接建立请求</strong>。控制连接建立后，FTP服务器通过一定的方式验证用户的身份，然后才会建立数据连接。<br><strong>目前Linux系统中常用的FTP服务器有两种：vsftpd、wu-ftpd。它们都是基于<code>GPL</code>协议开发的。</strong></p><h3 id="Vsftpd服务器"><a href="#Vsftpd服务器" class="headerlink" title="Vsftpd服务器"></a>Vsftpd服务器</h3><p>Vsftpd是一个基于GPL发布的类UNIX操作系统上运行的服务器，该服务器提供默认的FTP服务器。该服务器支持很多其他传统FTP服务器不支持的特性，具有以下特点：</p><ul><li>非常高的安全性</li><li>带宽限制功能</li><li>良好的扩展性</li><li>支持船舰虚拟用户</li><li>支持IPV6</li><li>支持虚拟IP</li><li>高速、稳定</li></ul><h4 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h4><p><strong>下载网址：<a href="http://www.vsftpd.org" target="_blank" rel="noopener">http://www.vsftpd.org</a></strong></p><h5 id="1-源代码安装"><a href="#1-源代码安装" class="headerlink" title="1.源代码安装"></a>1.源代码安装</h5><p>得到源代码并解压tar包后，进入新的目录并运行make：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> xavf vsftpd-2.0.5.tar.gz<span class="token function">cd</span> vsftpd-2.0.5<span class="token function">make</span></code></pre><p>在这之前<strong>应该查看用户nobody和目录/usr/share/empty是否存在</strong>，如果不存在的化就新建这个用户和目录。<strong>如果允许匿名访问，用ftp和目录var/ftp也需要建立</strong>：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> /var/ftp<span class="token function">useradd</span> -d /var/ftp <span class="token function">ftp</span></code></pre><p><strong>由于安全原因，目录/var/ftp不应该属于用户ftp，也不应该有写权限。如果用户已存在，用下面两个命令可以改变目录的所有者并去掉其他用户的写权限：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> root.root /var/ftp<span class="token function">chmod</span> og-w /var/ftp</code></pre><p>具备了所有条件后<strong>开始安装：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span></code></pre><h5 id="2-启动和关闭vsftpd"><a href="#2-启动和关闭vsftpd" class="headerlink" title="2.启动和关闭vsftpd"></a>2.启动和关闭vsftpd</h5><p><strong>启动vsftpd可采用3中方式：inetd、xinetd和Stand alone（独立）工作模式</strong>，由于目前使用的xinetd扩展了inetd，它比inetd更加高效和使用，下面介绍xinetd以及standalone两种启动方式。</p><p><strong>(1)xinetd方式启动</strong><br>使用该启动方式，在/etc/xinetd  d/vsftpd配置文件当中，<strong>应当将“listen=yes”设为“listen=yes”，并且将“tcp_wrapper=yes”设为“tcp_wrapper=no”，</strong>并且使用如下命令将vsftpd的文档目录复制到/etc/xinetd.d目录下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/doc/vsftpd-1.1.3/vsftpd.xinetd   /etc/xinetd.d/vsftpd<span class="token function">vi</span> /etc/xinetd.d/vsftpd<span class="token function">cat</span> /etc/xinetd.d/vsftpd</code></pre><p>现在就可以启动vsftpd了：</p><pre class=" language-bash"><code class="language-bash">     server vsftpd stop       //停止独立运行vsftpd     关闭vsftpd：   <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>     server xinetd restart    //重新启动xinetd守候进程     停止xinetd:    <span class="token punctuation">[</span>确定<span class="token punctuation">]</span>     启动xinetd：   <span class="token punctuation">[</span>确定<span class="token punctuation">]</span></code></pre><blockquote><p>提示：如果想在系统启动时就运行该服务，那么要使用setup命令，在“system service”选项中，选中vsftpd守候进程即可。</p></blockquote><p><strong>(2) 独立工作模式启动</strong><br><strong>vsftpd也可以在独立的工作模式下工作</strong>，这样，使用vi编辑器需要再次打开/etc/vsftpd/vsftpd.conf文件做如下修改：“listen=yes”：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> vsftpd start</code></pre><p><strong>(3) 简单测试FTP服务器</strong><br>  <strong>登陆IP地址为192.168.0.10的FTP服务器，使用匿名用户名“anonyous”，输入密码，超级用户直接回车即可，就能实现成功登陆Bye退出FTP服务器。：</strong><br>ftp 192.168.0.10<br>anonymous<br>并且浏览了服务器上的文件夹。<strong>Vsftpd提供了很多特性和很高的安全性。一个显著的例子就是vsftpd是在chroot模式下工作的，chroot模式就是登陆的主目录，在使用过程中，用户被限制不能访问除那个目录之外的任何程序文件</strong>，这样就使得系统中潜在的攻击者和其他用户的目录空间被严格分割开来，从而就不能破坏提供的FTP服务器，即便出现攻击事件，也极大地缩小了受损的空间和程序文件的范围，从而提高安全性。</p><p><strong>(4) 关闭vsftpd服务器</strong></p><pre class=" language-bash"><code class="language-bash">     Service  vsftpd  stop</code></pre><p><strong>不自启动：使用setup命令，在“systernm service”的选项中，取消选中的vsftpd守候进程即可</strong>。</p><h5 id="3-FTP客户端的操作"><a href="#3-FTP客户端的操作" class="headerlink" title="3.FTP客户端的操作"></a>3.FTP客户端的操作</h5><p>FTP客户端使用如下命令来<strong>连接FTP服务器：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">ftp</span>  服务器IP地址/名称</code></pre><p>连接服务器成功后，使用下述命令格式来<strong>进行FTP操作：</strong></p><pre class=" language-bash"><code class="language-bash">ftp<span class="token operator">></span>ftp 子命令</code></pre><p><strong>常用的子命令有：</strong></p><ul><li><strong><code>？|help</code></strong>：//显示ftp内部命令的帮助信息</li><li><strong><code>！[命令]</code></strong>：//在本机中执行shell命令后回到ftp环境中。</li><li><strong><code>lcd[dir]</code></strong>：//将本地工作目录切到dir</li><li><strong><code>close</code></strong>：//中断与远程服务器的FTP对话。</li><li><strong><code>asc</code></strong>：//使用ascii类型传输方式</li><li><strong><code>bin</code></strong>：//使用二进制文件传输方式</li><li><strong><code>cd dir-name</code></strong>：//进入远程主机目录</li><li><strong><code>pwd</code></strong>：//显示远程主机的当前工作目录</li><li><strong><code>mkdir dir-name</code></strong>：//在远程主机中建立目录</li><li><strong><code>ls [dir-name/file-name]</code></strong>：//显示远程目录中的内容</li><li><strong><code>get 远程文件名 [本地文件名]</code></strong>：//下载远程主机的文件</li><li><strong><code>mget 文件名 文件名 ...（或者是目录名）</code></strong>：//下载远程主机上的多个文件。</li><li><strong><code>put 本地文件</code></strong>：//将本地文件传送到远程FTP服务器。</li><li><strong><code>mput 本地文件 本地文件...</code></strong>://将多个本地文件传送到远程的FTP服务器</li><li>r<strong><code>ename 旧文件名 新文件名</code></strong>：//更改远程主机文件名。</li><li><strong><code>deletde 文件名</code></strong>：//删除远程主机中的指定文件</li><li><strong><code>mdeletd 文件名</code></strong>：//删除远程FTP服务器中的多个文件</li><li><strong><code>rmdir dir-name</code></strong>：//删除远程FTP服务器中的指定目录</li><li><strong><code>quit/bye</code></strong>：//退出FTP会话</li></ul><h3 id="vsftpd服务器的配置"><a href="#vsftpd服务器的配置" class="headerlink" title="vsftpd服务器的配置"></a>vsftpd服务器的配置</h3><h5 id="1-安装的相关文件"><a href="#1-安装的相关文件" class="headerlink" title="1.安装的相关文件"></a>1.安装的相关文件</h5><p> 与 FTP服务相关的文件有如下几个：<br> /etc/vsftpd/vsftpd.conf ：//主配置文件<br> /etc/vsftpd.ftpusers   ：  //指定哪些用户不能访问FTP服务器<br> /etc/vsftpd.user_list   ：//文件中指定的用户是否可以访问FTP服务器由vsftpd.conf文件中的userlist_deny的取值来决定。（userlist_deny=yes时不能访问FTP服务器；userlist_deny=no时，仅仅允许/etc/vsftpd.user_list中指定的用户访问FTP服务器）</p><p> /etc/vsftpd.ftpusers  ： //设置不允许登陆的用户名单<br> /etc/vsftpd.user_list ：  //设置方法同于/etc/vsftpd.ftpusers，根据vsftpd.conf中userlist_deny的值决定这个文件的意义</p><h5 id="2-配置vsftpd-ftpusers文件"><a href="#2-配置vsftpd-ftpusers文件" class="headerlink" title="2.配置vsftpd.ftpusers文件"></a>2.配置vsftpd.ftpusers文件</h5><p>Vsftpd.ftpusers文件是用来确定哪些用户不能使用FTP服务器。用户可以根据实际情况<strong>添加或删除其中的某些用户</strong>，默认情况下该文件的内用:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span>  /etc/vsftpd.ftpusers </code></pre><h5 id="3-配置vsftpd-user-list文件"><a href="#3-配置vsftpd-user-list文件" class="headerlink" title="3.配置vsftpd.user_list文件"></a>3.配置vsftpd.user_list文件</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span>  /etc/vsftpd.user_list</code></pre><p>如果需要限制指定的本地用户不能访问FTP服务器，<strong>那么按照以下方法修改/etc/vsftpd/vsftpd.conf照顾配置文件中的相关信息：</strong></p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>yesUserlist_deny<span class="token operator">=</span>yesUserlist_flie<span class="token operator">=</span>/etc/vsftpd.ftpusers </code></pre><p>同样的，如果需要限制指定的本地用户可以访问，而其他的本地用户不可以访问，那么可以参照如下设置来<strong>修改主题配置文件：</strong></p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>yesUserlist_deny<span class="token operator">=</span>noUserlist_flie<span class="token operator">=</span>/etc/vsftpd.ftpusers </code></pre><h4 id="配置vsftpd-conf文件"><a href="#配置vsftpd-conf文件" class="headerlink" title="配置vsftpd.conf文件"></a>配置vsftpd.conf文件</h4><p><strong>配置文件路径为 /etc/vsftpd/vsftpd.conf。</strong>修改：</p><pre class=" language-bash"><code class="language-bash">Vi /etc/vsftpd/vsftpd.conf</code></pre><p>默认文件内容：</p><pre class=" language-bash"><code class="language-bash">Anonymous_enable<span class="token operator">=</span>YES     //允许匿名用户登录Local_enable<span class="token operator">=</span>YES         //允许本地用户登录write_enable<span class="token operator">=</span>YES         //允许本地用户上传Local_mask<span class="token operator">=</span>022           //设置本地用户的文件生成掩码为022，默认值为077dirmessage_enable<span class="token operator">=</span>YES    //设置切换到目录时显示.message隐含文件的内容xferlog_enable<span class="token operator">=</span>YES       //激活上传和下载日志connect_from_port_20<span class="token operator">=</span>YES //设置是否允许启用FTP数据端口20建立连接Pam_service_name<span class="token operator">=</span>vsftpd  //设置PAM认证服务的配置文件名称，该文件存放在/etc/pam.duserlist_enable<span class="token operator">=</span>YES      //允许vsftpd.user_list文件中的用户访问服务器userlist_deny<span class="token operator">=</span>YES        //拒绝vsftpd.user_list文件中的用户访问服务器listen<span class="token operator">=</span>YES               //设置工作模式是否使用独占启动方式Tcp_wrappers<span class="token operator">=</span>YES         //设置是否使用tcp_wrappers作为主机访问控制方式</code></pre><h5 id="1-匿名用户使用vsftpd服务器"><a href="#1-匿名用户使用vsftpd服务器" class="headerlink" title="1.匿名用户使用vsftpd服务器"></a>1.匿名用户使用vsftpd服务器</h5><p>根据vsft服务器的默认设置，匿名用户可以下载/var/ftp目录中的所有文件，但不能上传文件。在vsftp.conf文件的“write_enable=yes”设置语句存在的前提下，取消以下命令行前的’#‘可以增加匿名用户权限。</p><pre class=" language-bash"><code class="language-bash">Anon_upload_enable<span class="token operator">=</span>yes  //允许匿名用户上传文件Anon_mkdir_write_enable<span class="token operator">=</span>yes   //允许匿名用户创建文件</code></pre><blockquote><p>案例分析1：配置vsftpd服务器，要求只允许匿名用户登陆，本地用户不允许登陆。匿名用户可以在/var/ftp/pub目录中新建目录/上传和下载文件。<code>`</code>**<br>1）编辑vsftpd.conf文件<br>Anonymous_enable=YES<br>Local_enable=no<br>write_enable=YES<br>anon_upload_enable=YES<br>Anon_mkdir_write_enable=yes<br>connect_from_port_20=YES<br>listen=YES<br>tcp_wrappers=YES<br>2)修改/var/ftp/pub目录权限，允许属主、同组及其他用户写入文件<br>ca  /var/ftp<br>ls -l<br>chmod  777  pub<br>ls -l<br>3）重新启动vsftpd服务器<br>Services  vsftpd  restart</p></blockquote><h5 id="2-限制本地用户"><a href="#2-限制本地用户" class="headerlink" title="2.限制本地用户"></a>2.限制本地用户</h5><p>Vsftpd服务器提供多种方式来限制某些本地用户登陆服务器<br>1）直接编辑ftpusers文件，将禁止登陆的用户名写入ftpusers文件。<br>2）直接编辑user_list文件，将禁止登陆的用户名写入user_list文件，此时vsftpd.conf文件应该设置“userlist_enable=yes”和“userlist_deny=yes”语句，则user_list文件指定的用户不能访问FTP服务器。<br>3）直接编辑user_list文件，将允许登陆的用户名写入user_list文件，此时vsftpd.conf文件中设置“userlist_enable=yes”和“userlist_deny=no”语句，这只允许user_list文件中指定的用户访问FTP服务器。</p><blockquote><p>提示：如果某用户同时出现在user_list文件和ftpusers文件中，那么该用户将不允许登陆。这是因为vsftpd总是先执行user_list文件，在执行ftpusers文件。</p></blockquote><blockquote><p>案例分析2：配置vsftpd服务器，要求只允许xh本地登录。<br>1）编辑vsftpd.conf文件，修改配置文件选项如下：<br>Anonymous_enable=no<br>Local_enbale=yes<br>Write_enable=yes<br>Connect_from_port_20=yes<br>Userlist_enable=yes<br>Userlist_deny=no<br>Listen=yes<br>Tcp_wrappers=yes<br>2）编辑user_list文件，使其一定包含xh<br>User_list文件中保留用户列表，其是否生效取决于vsftpd.conf文件中的“userlist_enable”参数。当“userlist_deny=no”，表示只有在user_list文件中存在的用户才有权访问vsftpd服务器；如果“userlist_deny=yes”，表示user_list文件中的存在的用户无权访问vsftpd服务器，甚至连密码都不能输入。Vsftpd.conf文件中默认“userlist_deny=yes”:<br>Vi user_list<br>Xh<br>3)重新启动vsftpd服务。<br>Services vsftpd restart<br>4）连接FTP服务器，以xh用户的身份登陆，可以船舰目录和上传下载文件。</p></blockquote><h5 id="3-禁止切换到其他目录"><a href="#3-禁止切换到其他目录" class="headerlink" title="3.禁止切换到其他目录"></a>3.禁止切换到其他目录</h5><p>根据vsftpd服务器的默认设置，本地用户可以浏览其主目录之外的其他目录，并在权限许可的范围内允许上传和下载。这样的默认设置不太安全，<strong>通过设置chroot相关参数，可禁止用户切换到主目录以外的其他目录。</strong><br>1）<strong>设置所有的本地用户都不可切换到主目录之外的其他目录。只需向vsftpd.conf文件添加“chroot_local_user=yes”配置语句</strong><br>2）设置指定的本地用户都不可以切换到主目录之外的其他目录。<br>编辑vsftpd.conf文件，取消以下配置语句前的“#”符号，指定/etc/vsftpd/chroot_list文件中的用户不能切换到主目录之外的目录：</p><pre class=" language-bash"><code class="language-bash">chroot_list_enable<span class="token operator">=</span>yeschroot_list_file<span class="token operator">=</span>/etc/vsftpd/chroot_list</code></pre><p>并且检查vsftpd.conf文件中是否存在“chroot_local_user=yes”配置语句，如果存在那么就要将其修改为“chroot_local_user=no”或者在此配置语句前添加的“#”号。</p><blockquote><p>案例分析3:<br>1）允许匿名用户登陆和本地用户登录<br>2）禁止匿名用户上传<br>3）允许本地用户上传和下载<br>4）进行一定的设置，能以本地用户uscr来登陆到FTP服务器上，并能上传与下载文件，熟悉子命令的应用。<br>如果用户user不存在，则需要创建用户user并设置口令，命令如下：<br>Useradd user<br>Passwd user<br>编辑vsftpd.conf文件：<br>Vi  /etc/vsftpd/vsftpd.conf<br>使其一定包含以下语句：<br>Anonymous_enable=YES<br>Local_enable=YES<br>anon_upload_enable=no<br>anon_mkdir_write_enable=no<br>write_enable=YES<br>Local_mask=022<br>dirmessage_enable=YES<br>xferlog_enable=YES<br>connect_from_port_20=YES<br>Pam_service_name=vsftpd<br>userlist_enable=YES        //允许vsftpd.user_list文件中的用户访问服务器<br>userlist_deny=YES         //拒绝vsftpd.user_list文件中的用户访问服务器<br>listen=YES              //设置工作模式是否使用独占启动方式<br>Tcp_wrappers=YES        //设置是否使用tcp_wrappers作为主机访问控制方式<br>将用户user添加到user_list文件中：<br>Vi user_list<br>User<br>重新启动FTP服务器：<br>Service vsftpd restart<br>5）在windows操作系统中登陆，把linux下的文件下载在windows文件夹中，同时把windows文件夹中的文件上传到linux相应的目录中。ftp服务器地址为：169.254.138.246.</p></blockquote><h3 id="vsftpd高级配置"><a href="#vsftpd高级配置" class="headerlink" title="vsftpd高级配置"></a>vsftpd高级配置</h3><h5 id="1-启动ASCII传输方式"><a href="#1-启动ASCII传输方式" class="headerlink" title="1.启动ASCII传输方式"></a>1.启动ASCII传输方式</h5><p>在配置文件中使用以下语句：</p><pre class=" language-bash"><code class="language-bash">Ascii_upload_enble<span class="token operator">=</span>yesAscii_download_enble<span class="token operator">=</span>yes</code></pre><h4 id="2-设置连接服务器后的欢迎信息"><a href="#2-设置连接服务器后的欢迎信息" class="headerlink" title="2.设置连接服务器后的欢迎信息"></a>2.设置连接服务器后的欢迎信息</h4><pre class=" language-bash"><code class="language-bash">Ftpd_banner<span class="token operator">=</span>welcome to <span class="token function">ftp</span> <span class="token function">service</span>Banner_file<span class="token operator">=</span>/var/vsftpd_banner_file</code></pre><h4 id="3-配置基本的性能和安全选项"><a href="#3-配置基本的性能和安全选项" class="headerlink" title="3.配置基本的性能和安全选项"></a>3.配置基本的性能和安全选项</h4><pre class=" language-bash"><code class="language-bash">Idle_session-timeout<span class="token operator">=</span>60   //设置用户绘画的空闲中断时间Data_connection_timeout<span class="token operator">=</span>120   //设置空闲的数据连接的中断时间Accept_timeout<span class="token operator">=</span>60Connect_timeout<span class="token operator">=</span>60    //设置客户端空闲时自动中断和激活连接时间Max_clients<span class="token operator">=</span>200       //指明服务器总的客户并发连接数为200Max_per_ip<span class="token operator">=</span>3       //指明每个客户机的最大连接数为3local_max_rate50000（50kbytes/sec）Anon_max_rate<span class="token operator">=</span>30000     //设置本地用户和匿名用户的最大传输速率限制Pasv_min_port<span class="token operator">=</span>50000 Pasv_max_port<span class="token operator">=</span>60000     //设置客户端连接时的端口范围。默认0</code></pre><h5 id="4-设置本地用户能否chroot"><a href="#4-设置本地用户能否chroot" class="headerlink" title="4.设置本地用户能否chroot"></a>4.设置本地用户能否chroot</h5><p>设置用户登陆能否切换到个人目录以外的目录<br>1）设置所有的本地用户可以chroot:</p><pre class=" language-bash"><code class="language-bash">Chroot_local_user<span class="token operator">=</span>yes</code></pre><p>2)设置指定用户能够chroot:</p><pre class=" language-bash"><code class="language-bash">Chroot_local_user<span class="token operator">=</span>noChroot_list_enable<span class="token operator">=</span>yesChroot_list_file<span class="token operator">=</span>/etc/vsftpd.chroot_list   //只有/etc/vsftpd.chroot-list中的指定的用户才能执行</code></pre><h5 id="5-配置基于本地用户的访问控制"><a href="#5-配置基于本地用户的访问控制" class="headerlink" title="5.配置基于本地用户的访问控制"></a>5.配置基于本地用户的访问控制</h5><p>1）限制指定的本地用户不能访问，其他本地用户可以访问:</p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>noUserlist_deny<span class="token operator">=</span>yesUserlist_file<span class="token operator">=</span>/etc/vsftpd.user_list   //使文件/etc/vsftpd.user_list中指定的本地用户不能访问，而其他的本地用户可以访问。</code></pre><p>2）限制指定的本地用户可以访问，其他本地用户不能访问:</p><pre class=" language-bash"><code class="language-bash">Userlist_enable<span class="token operator">=</span>yesUserlist_deny<span class="token operator">=</span>noUserlist_file<span class="token operator">=</span>/etc/vsftpd.user_list</code></pre><h5 id="6-配置基于主机的访问控制"><a href="#6-配置基于主机的访问控制" class="headerlink" title="6.配置基于主机的访问控制"></a>6.配置基于主机的访问控制</h5><p>设置hosts.allow文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/hosts.allowvsftpd：192.168.5.128：DENY</code></pre><p>vsftpd在独占启动方式下支持tcp_wrappers主机访问控制方式，tcp_wrappers的主要配置文件是/etc/hosts.allow（允许）和/etc/hosts.deny(不允许)，它们的格式都是：</p><pre class=" language-bash"><code class="language-bash">守候进程名：主机表：ALLOW / DENY或守候进程名：主机表</code></pre><p>如果只允许指定的主机访问服务器，可以使用下面的命令：</p><pre class=" language-bash"><code class="language-bash">Only_from<span class="token operator">&lt;</span>主机表<span class="token operator">></span></code></pre><p>列如：<br><code>only_from 192.168.6.0</code> //只允许该网段内的主机访问<br>如果要指定不能访问的主机，则可以使用命令：<br><code>No_access &lt;主机表&gt;</code></p><h5 id="7-配置访问时间限制"><a href="#7-配置访问时间限制" class="headerlink" title="7.配置访问时间限制"></a>7.配置访问时间限制</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /user/share/doc/vsftpd-1.1.3/vsftpd.xinetd   /etc/inetd.d/vsftpdVi  /etc/xinetd.d/vsftpd</code></pre><p>修改为“disable=no”<br>添加配置访问的时间限制（与vsftpd.conf中listen=no相对应）：<br><code>Access_time=hour:min-hour:min</code><br><strong>例如：</strong><br><code>Access_time=8:30-11:30    13:00-18:00</code>  //表示只在这个两个时间段才能访问的</p><h5 id="8-限制文件的传输速度"><a href="#8-限制文件的传输速度" class="headerlink" title="8.限制文件的传输速度"></a>8.限制文件的传输速度</h5><p>编辑vsftpd.conf文件可设置不同类型用户传输时的最大速度，单位为字节/秒<br><strong>(1) anon_max_rate参数</strong><br>向vsftpd.conf文件中添加“anon_max_rate=20000”配置语句，那么匿名用户所能使用的最大传输速度约为20KB/s<br><strong>(2) local_max_rate参数</strong><br>向vsftpd.conf文件中添加“local_max_rate=50000”配置语句，那么本地用户所能使用的最大传输速度约为50KB/s.</p><h2 id="Samba服务器"><a href="#Samba服务器" class="headerlink" title="Samba服务器"></a>Samba服务器</h2><p>当局域网中存在多种操作系统，Samba服务器可以实现不同类型计算机之间文件的打印和共享。</p><h3 id="一、Samba简介"><a href="#一、Samba简介" class="headerlink" title="一、Samba简介"></a>一、Samba简介</h3><p><strong>SMB（Server Message Block，服务信息块）协议是一个高层协议</strong>，它提供了再网络上的不同计算机之间共享文件、打印机和通信资料的手段。<br><strong>Samba是一组使Linux支持SMB协议的软件，基于GPL原则发行，源代码完全公开。</strong>Samba的核心是两个守候进程smbd和nmbd。</p><ul><li><strong>Smbd：</strong>负责建立对话、验证用户、提供文件和打印机共享服务</li><li><strong>Nmbd：</strong>负责实现网络浏览。</li></ul><p>为了将Linux作为客户机集成到Windows环境中，Samba提供了2个工具：nmblookup工具用于NetBIOS名称解析和测试，smbclient工具提供对SMB文件和打印服务的访问。</p><h4 id="一-Samba的工作原理"><a href="#一-Samba的工作原理" class="headerlink" title="(一)Samba的工作原理"></a>(一)Samba的工作原理</h4><p>Samba的工作原理是让Windows操作系统网上邻居的通信协议——NETBIOS（Network Basic Input/Output System）和SMB这两个协议在TCP/IP通信协议上运行，并且使用Windows上的NETBEUI协议让Linux可以在网上邻居中被看到。</p><h4 id="二-Samba服务器功能"><a href="#二-Samba服务器功能" class="headerlink" title="(二)Samba服务器功能"></a>(二)Samba服务器功能</h4><p>共享目录、目录权限、共享打印机、打印机权限</p><h3 id="二、Samba服务器的安装和配置"><a href="#二、Samba服务器的安装和配置" class="headerlink" title="二、Samba服务器的安装和配置"></a>二、Samba服务器的安装和配置</h3><h4 id="一-Samba服务器的安装"><a href="#一-Samba服务器的安装" class="headerlink" title="(一)Samba服务器的安装"></a>(一)Samba服务器的安装</h4><h5 id="1-验证samba是否已经安装"><a href="#1-验证samba是否已经安装" class="headerlink" title="1.验证samba是否已经安装"></a>1.验证samba是否已经安装</h5><pre class=" language-bash"><code class="language-bash">rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> samba</code></pre><p>如果出现以下信息则已安装：<br><code>Samba-common-2.2.7a-7.9.0</code><br><code>Samba-client-2.2.7a-7.9.0</code><br><code>Samba-2.2.7a-7.9.0</code></p><h5 id="2-安装samba"><a href="#2-安装samba" class="headerlink" title="2.安装samba"></a>2.安装samba</h5><p><strong>Samba</strong>有三个安装文件<strong>Samba-common-2.2.7a-7.9.0</strong>、<strong>Samba-client-2.2.7a-7.9.0</strong>、<strong>Samba-2.2.7a-7.9.0</strong>。自行网上下，然后进入这三个文件的目录输入指令：</p><pre class=" language-bash"><code class="language-bash">rpm -ivh Samba-common-2.2.7a-7.9.0       //安装samba的公用软件包rpm -ivh Samba-client-2.2.7a-7.9.0       //安装samba的客户端程序rpm -ivh Samba-2.2.7a-7.9.0              //安装samba的服务器程序</code></pre><p><strong>和samba服务相关的文件有：samba的核心配置文件/etc/samba/smb.conf、Samba的启动脚本/etc/rc.d/init.d/smb、存放Samba用户口令的文件/etc/samba/smdpasswd和添加samba用户的配置文件/usr/bin/smbadduser。</strong></p><h4 id="二-Samba服务器的配置"><a href="#二-Samba服务器的配置" class="headerlink" title="(二)Samba服务器的配置"></a>(二)Samba服务器的配置</h4><p><strong>安装后还需要进一步的配置samba服务器，正确设置防火墙。</strong>默认情况下防火墙不允许windows客户端访问samba服务器，必须打开相应的服务。</p><h5 id="1-smb-conf文件"><a href="#1-smb-conf文件" class="headerlink" title="1.smb.conf文件"></a>1.smb.conf文件</h5><p>Samba服务器全部配置信息均保存在/etc/samba/smb.conf文件中。文件采用分节的结构，一般由三个标准节和若干个用户自定义的共享节组成。利用文本编辑器可以编辑和查看smb.conf文件。<br><strong>1）基本全局参数</strong></p><pre class=" language-bash"><code class="language-bash">Netbios name<span class="token operator">=</span>？        //设置samba的netBIOS的名字Workgroup<span class="token operator">=</span>？          //设置samba要加入的工作组Host allow<span class="token operator">=</span>？<span class="token operator">&lt;</span>192.168.5.   /192.168.5.164<span class="token operator">></span>Host deny<span class="token operator">=</span>？<span class="token operator">&lt;</span>192.168.5.   /192.168.5.164<span class="token operator">></span>   //允许/禁止访问的子网或主机Dead time<span class="token operator">=</span>？            //指定在客户机误操作多少分钟后服务器自动中断连接Max <span class="token function">open</span> files<span class="token operator">=</span>？          //定义一客户机最多能打开的文件数目</code></pre><p><strong>2）共享资源参数</strong></p><pre class=" language-bash"><code class="language-bash">Comment<span class="token operator">=</span>？        //指定对共享文件的描述Path<span class="token operator">=</span>？             //指定共享服务器的路径</code></pre><p><strong>3）访问控制参数</strong></p><pre class=" language-bash"><code class="language-bash">Writable<span class="token operator">=</span>yes          //指定共享的路径是否可写Browsable<span class="token operator">=</span>yes         //指定共享的路径是否可浏览Available<span class="token operator">=</span>yes           //指定共享资源是否可用Read only<span class="token operator">=</span>yes          //指定共享的路径是否为只读Read list<span class="token operator">=</span>yes，@group   //指定只读访问用户列表Write list<span class="token operator">=</span>user，@group  //设置读写访问用户列表Valid users<span class="token operator">=</span>user，@group //制定允许使用服务的用户列表Invalid users<span class="token operator">=</span>user，@group //指定不吞徐使用服务的用户列表Public<span class="token operator">=</span>yes/no              //设置共享资源是否允许所有用户访问，除guest用户以外Guest ok<span class="token operator">=</span>yes/no          //设置是否允许guest用户访问共享资源Guest only<span class="token operator">=</span>yes/no        //设置共享目录只允许guest用户访问</code></pre><p>Smb.conf文件的默认设定值如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>Workgroup<span class="token operator">=</span>mygroupServerstring<span class="token operator">==</span>samba serverSecurity<span class="token operator">=</span>userLoad printers<span class="token operator">=</span>yesLog file<span class="token operator">=</span>/var/log/samba/m.log<span class="token punctuation">[</span>homes<span class="token punctuation">]</span>Comment<span class="token operator">=</span>home directoryBrowserable<span class="token operator">=</span>noWritable<span class="token operator">=</span>yes<span class="token punctuation">[</span>printers<span class="token punctuation">]</span>Comment<span class="token operator">=</span>All printersPath<span class="token operator">=</span>/var/spool/sambaBrowserable<span class="token operator">=</span>noGuest ok<span class="token operator">=</span>no</code></pre><p><strong>4)Samba的安全等级参数</strong><br>Security=？<br>其中可选择的等级参数如下：</p><ul><li><strong>Share（共享级访问）：</strong>当客户端连接到samba服务器后，不需要输入samba用户名和口令就可以访问samba中共享的资源，这种方式方便但不安全。</li><li><strong>User（用户级）：</strong>这是samba服务器默认的安全级别。Samba服务器负责检查samba用户名和口令，验证成功后才能访问相应的共享目录。</li><li><strong>Domain（域）：</strong>samba服务器本身不验证samba用户和口令，而由windows域控制服务器负责。此时必须指定域控制服务器的netbios名称。</li><li><strong>Server（服务器）：</strong>samba服务器不验证samba用户名和口令，而将输入的用户名和口令传给另一个samba服务器来验证。此时必须指定负责验证的那个samba服务器的名称。</li></ul><h5 id="2-启动samba服务"><a href="#2-启动samba服务" class="headerlink" title="2.启动samba服务"></a>2.启动samba服务</h5><p>1）检查配置文件正确性</p><pre class=" language-bash"><code class="language-bash">Testparm</code></pre><p>2）启动服务</p><pre class=" language-bash"><code class="language-bash">Server smb start/restart</code></pre><blockquote><p><strong>案例分析1：架设共享级别的samba服务器，对所有windows计算机用户均可读/share目录，当前工作组为workgroup。</strong><br>配置步骤如下：<br>1）修改Linux配置文件。利用文本编辑工具对/etc/samba/smb.conf进行编辑。<br>vi /etc/samba/smb.conf<br>[global]<br>Workgroup=workgroup          //设置工作组<br>Security=share                 //设置安全级别为共享<br>[share]<br>Path=/tmp/share               //共享/share下的文件<br>Public=yes                    //设置目录允许所有人公用<br>Writable                        //目录可写入<br>Guest ok=ok                   //guest用户可以访问<br>2）利用testparm命令测试配置的正确性<br>Testparm         //测试配置文件的正确性<br>Testparm命令执行后如果显示“Loaded services file OK”信息，那摩说明samba服务器的配置文件完全正确，否则将提出错误信息，此时如果按【Enter】键将显示详细的配置内容如下：<br>[global]<br>Workgroup=workgroup<br>Security=share<br>[share]<br>Path=/tmp/share<br>Public=yes<br>Writable<br>Guest ok=ok<br>提示：testparm命令显示的配置内容跟smb.conf文件不一定完全相同，但功能一定相同<br>3）重新启动服务器<br>service smb restart<br>启动SMB服务              [确定]<br>启动NMB服务              [确定]<br>此时所有用户不需要口令，都可以访问/tmp目录，并具有读写权限。</p></blockquote><blockquote><p><strong>案例分析2：架设用户级别的samba服务器，其中tom用户可以访问其个人目录文件，当前工作组为workgroup。</strong><br>1）把tom用户设置为samba用户，并输入口令。<br>smbpasswd -a tom<br>2）利用文本编辑器修改smb.conf文件<br>vi /etc/samba/smb.conf<br>[global]<br>Workgroup=workgroup          //设置工作组<br>Security=share                 //设置安全级别为共享<br>[homes]<br>Browseable=no<br>Writable=yes             //目录可写入<br>3）利用testparm命令测试文件配置的正确性<br>testparm       //测试配置文件的正确性<br>Testparm命令执行后如果显示“Loaded services file OK”信息，那摩说明samba服务器的配置文件完全正确，否则将提出错误信息，此时如果按【Enter】键将显示详细的配置内容如下：<br>[global]<br>Workgroup=workgroup<br>Security=share<br>[homes]<br>Browseable=no<br>Writable=yes<br>4）重新启动服务器<br>service smb restart<br>关闭SMB服务      [确定]<br>关闭NMB服务      [确定]<br>启动SMB服务      [确定]<br>启动NMB服务      [确定]</p></blockquote><blockquote><p><strong>案例分析3：架设用户级别的samba服务器，其中jack和helen用户可以访问其个人主目录和/var/samba/tmp目录，而其他的普通用户只能访问其个人主目录。</strong><br>1）假设工作组为workgroup。利用smbpasswd命令将Linux系统中所有普通用户都设置为samba用户。<br>2）利用文本编辑器修改smb.conf文件<br>vi /etc/samba/smb.conf<br>[global]<br>Workgroup=workgroup     //设置工作组<br>Security=user             //设置安全级别为共享<br>[homes]<br>Comment=Home directory<br>Browseable=no<br>Writable=yes             //目录可写入<br>[tmp]<br>Path=/var/samba/tmp    //共享/tmp下的文件<br>Writable=yes<br>Valid users=Helen Jack<br>3）利用testparm命令测试配置文件是否正确<br>testparm<br>5)重新启动samba服务器</p></blockquote><h4 id="三-与samba服务器相关的shell指令"><a href="#三-与samba服务器相关的shell指令" class="headerlink" title="(三)与samba服务器相关的shell指令"></a>(三)与samba服务器相关的shell指令</h4><p>除了之前介绍的testparm命令和smbpasswd命令之外，还包括smbclient、smbstatus命令等。</p><h5 id="1-smbclient命令"><a href="#1-smbclient命令" class="headerlink" title="1.smbclient命令"></a>1.smbclient命令</h5><p>功能：查看或访问samba共享文件</p><pre class=" language-bash"><code class="language-bash">smbclient 【-L  IP地址】【共享资源路径】【-U  用户名】</code></pre><p><strong>示例：</strong><br>某samba服务器的IP地址为202.127.250.51，查看其提供的共享资源。<br><code>smbclient -L 202.127.250.51</code></p><p><strong>示例：</strong><br>访问IP地址为192.168.0.10的计算机提供的共享目录/docs<br><code>smbclient  //192.168.0.10/docs</code><br><code>Password：</code><br><code>Domain=[WORKGROUP]OS=[Unix]  server=[Samba2.2.7a]</code><br><code>Smb: \&gt;</code><br>执行命令“ smbclient  //192.168.0.10/docs”后，需要输入口令，验证成功后会进入smbclient环境，出现“Smb： >”提示符等待输入命令。输入“？”将显示所有可使用的命令。在samba交互界面下的操作命令有：</p><ul><li><strong><code>！</code>：</strong>执行本地路径</li><li><strong><code>ls</code>：</strong>显示文件列表</li><li><strong><code>get</code>：</strong>下载单个文件</li><li><strong><code>put</code>：</strong>上传单个文件</li><li><strong><code>mget</code>：</strong>批量下载文件（支持通配符）</li><li><strong><code>mput</code>：</strong>批量上传文件（支持通配符）</li><li><strong><code>mkdir</code>：</strong>建立目录</li><li><strong><code>rmdir</code>：</strong>删除目录</li><li><strong><code>rm</code>：</strong>删除文件</li></ul><h5 id="2-smbstatus命令"><a href="#2-smbstatus命令" class="headerlink" title="2.smbstatus命令"></a>2.smbstatus命令</h5><p>功能：查看samba共享资源的使用情况</p><pre class=" language-bash"><code class="language-bash">smbstatus</code></pre><h5 id="3-建立Samba用户"><a href="#3-建立Samba用户" class="headerlink" title="3.建立Samba用户"></a>3.建立Samba用户</h5><p>当samba服务器的安全级别为用户时，用户访问samba服务器时必须提供其samba用户名和口令。只有Linux系统本身的用户才能成为samba用户，必须要设置其samba口令。Samba用户账号信息默认保存与/etc/samba/smbpassed文件中。<br><strong>1）smbadduser命令</strong><br>功能：将Linux用户设置为samba用户</p><pre class=" language-bash"><code class="language-bash">smbadduser 用户名：用户名</code></pre><p><strong>示例：</strong><br><code>Useradd u1</code> //建立系统用户<br><code>Passwd u1</code>//设置密码<br><code>Smbadduser u1：u1</code> //建立samba用户</p><p><strong>2）smbpasswd命令</strong><br>功能：将Linux用户设置为samba用户</p><pre class=" language-bash"><code class="language-bash">smbpasswd【选项】【用户名】</code></pre><p><strong>选项：</strong></p><ul><li><strong><code>-a &lt;用户名&gt;</code>：</strong> 增加samba用户</li><li><strong><code>-d &lt;用户名&gt;</code>：</strong> 暂时锁定指定的samba用户</li><li><strong><code>-e &lt;用户名&gt;</code>：</strong> 解锁指定的samba用户</li><li><strong><code>-n &lt;用户名&gt;</code>：</strong> 设置指定的samba用户无密码</li><li><strong><code>-x &lt;用户名&gt;</code>：</strong> 删除samba用户</li></ul><p><strong>示例：</strong><br>将名字jerry的Linux用户设置为samba用户<br><code>smbpasswd  -a  jerry</code></p><p>超级用户在shell命令提示符后输入“smbpasswd -a 用户名”格式的命令后，必须根据屏幕提示两次输入指定samba用户的口令。系统将指定samba用户的找好信息保存于/etc/samba/smbpasswd文件中。Smbpasswd文件默认不存在。<br><strong>示例：</strong><br>修改samba用户jerry的口令：<br><code>smbpasswd jerry</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件包和进程及外存管理</title>
      <link href="/2019/01/31/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%A4%96%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2019/01/31/Linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%92%8C%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%A4%96%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="tar包管理"><a href="#tar包管理" class="headerlink" title="tar包管理"></a>tar包管理</h2><h3 id="创建tar文件"><a href="#创建tar文件" class="headerlink" title="创建tar文件"></a>创建tar文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> 【主选项+辅助选项】 文件或目录</code></pre><p><strong>主选项：</strong></p><ul><li><code>-c</code>：创建一个新的tar文件</li><li><code>-r</code>：在tar文件尾部追加文件</li><li><code>-t</code>：显示tar文件内容</li><li><code>-u</code>：更新tar文件</li><li><code>-x</code>：从tar文件中取出文件</li><li><code>-delete</code>：从tar文件中删除文件</li><li><code>-d</code>：比较tar文件或文件系统的不同之处</li></ul><p><strong>辅助选项：</strong></p><ul><li><code>-f</code>：使用tar文件</li><li><code>-v</code>：显示处理文件的详细信息</li><li><code>-X</code>：排除文件集合</li><li><code>-z</code>：用gzip压缩或解压</li><li><code>-C</code>：改变目录</li></ul><p><strong>例：</strong></p><p>1)将./ccc/目录下所有文件打包成cccall.tar文件</p><p><code>tar -cvf cccall.tar ./ccc/*</code></p><p>2)把文件file1和file2打包成txt.tar文件</p><p><code>tar  -cvf   txt.tar   file1  file2</code></p><p>3)显示tar文件内容</p><p><code>tar  -tf  aaa.tar</code></p><p>4)从tar文件中取出文件</p><p><code>tar  -xvf  aaa.tar</code></p><p>5)向aaa.tar尾部追加文件myfile</p><p><code>tar -rf  aaa.tar  myfile</code></p><h3 id="Linux下常用的压缩工具"><a href="#Linux下常用的压缩工具" class="headerlink" title="Linux下常用的压缩工具"></a>Linux下常用的压缩工具</h3><h4 id="gzip压缩工具"><a href="#gzip压缩工具" class="headerlink" title="gzip压缩工具"></a>gzip压缩工具</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">gzip</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 压缩或文件</code></pre><p><strong>选项：</strong></p><ul><li><code>-c</code>：将输出写到标准输出上，并保留原有文件</li><li><code>-d</code>：将压缩文件解压</li><li><code>-r</code>：递归的查找指定目录并压缩其中的所有文件或者是解压</li><li><code>-v</code>：对每一个压缩和解压缩的文件，显示文件名和压缩比</li><li><code>-9或best</code>：表示最慢压缩方法，系统默认值为6</li><li><code>-t</code>：测试，检查压缩文件是否完整</li><li><code>-l</code>：对每个压缩文件显示压缩文件的大小、未压缩文件的大小，压缩比和未压缩文件的名字</li></ul><p><strong>例：*</strong>压缩当前目录下的所有文件，并且显示压缩不比，显示已经代替原来的文件**<br><code>gzip -v</code></p><p><strong>提示：gzip只能对单个文件进行压缩，压缩后替换原来的文件，但不能呢个对多个文件进行压缩，正因如此，Linux提供了tar命令，用于将若干个文件或文件夹打包成一个文件，然后再压缩成一个.gz文件</strong></p><h4 id="gzip解压文件"><a href="#gzip解压文件" class="headerlink" title="gzip解压文件"></a>gzip解压文件</h4><p>使用<code>gzip-dv*</code>对当前目录下的压缩文件进行解压</p><p><strong>例：</strong><br>对当前文件下进行解压<br><code>gzip-dv *</code></p><p>在tar命令中嵌入压缩命令<br><code>.tar.gz</code></p><p>将当前目录下所有文件打包并压缩成ping.tar.gz并显示出来进度<br><code>tar cvzf   ping.tar.gz  ./*</code></p><p>把打包文件解压之当前目录下<br><code>tar -zxvf  file.tar.gz</code></p><p>把打包压缩文件解压之/text中<br><code>tar -zxvf  file.tar.gz  -C  test</code></p><h4 id="zip-unzip命令"><a href="#zip-unzip命令" class="headerlink" title="zip/unzip命令"></a>zip/unzip命令</h4><p><strong>zip命令</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">zip</span> 【选项】压缩后文件名  代压缩文件名或文件夹</code></pre><p><strong>选项：</strong></p><ul><li><code>-l</code>：最快压缩，压缩率最差</li><li><code>-9</code>：最大压缩，压缩率最高</li><li><code>-d</code>：从zip文件中移除一个文件</li><li><code>-f</code>：以新文件取代现有文件</li><li><code>-F</code>：修复已经损坏的压缩文件</li><li><code>-g</code>：将文件压缩并附加到特定文件</li><li><code>h</code>：显示附注说明</li><li><code>-i</code>：指定要加入的某些特定文件</li><li><code>L</code>：显示zip命令的版权</li><li><code>-m</code>：将特定文件移入zip文件中，并且删除原文件</li><li><code>-n</code>：不压缩特定扩展名文件</li><li><code>-o</code>：将zip文件的时间设成最后修正zip文件的时间</li><li><code>-r</code>：包含子目录</li><li><code>-T</code>：测试zip文件是否正常</li><li><code>-u</code>：只更新改变过的文件、文件夹和新文件</li><li><code>-v</code>：显示版本信息和详细资料</li><li><code>-x</code>：不需要压缩的文件</li></ul><p>提示：使用zip命令可以将许多文件压缩成一个文件，这与gzip是有区别的</p><p><strong>例子：</strong><br>1）压缩文件或文件夹<br><code>zip  -r  gong.zip   ./*</code><br>//递归压缩当前目录和子目录下的所有文件和文件夹为gnog.zip，显示压缩过程中每个文件的压缩比  </p><p>2）显示压缩文件的内容信息<br><code>zip -v gnog.zip      //查看gong.zip文件内容</code></p><p>3）从压缩文件中删除某个文件<br><code>zip -d gong.zip smart.txt</code><br>//删除gong.zip压缩文件中smart.txt文件</p><p>4）向压缩文件中添加文件<br><code>zip -m  gong.zip  ./rpm_info.txt</code><br>//向压缩文件中添加一个txt文件</p><p><strong>unzip命令</strong><br>用于解压缩扩展名为zip的压缩文件。Windows下的winzip压缩的文件Linux下也可以用unzip解压</p><pre class=" language-bash"><code class="language-bash">unzip 【选项】  压缩文件名.zip</code></pre><p>选项：</p><ul><li><code>-x</code>： 文件列表：解压缩文件但不包括指定的文件</li><li><code>-v</code>： 查看压缩文件目录，但不解压缩</li><li><code>-t</code>：册设文家有无损坏，但不解压</li><li><code>-d</code>： 目录：把压缩文件解压到指定的目录</li><li><code>-z</code>：只显示压缩文件的注释</li><li><code>-n</code>：不覆盖已经存在的文件</li><li><code>-o</code>：覆盖已经存在的文件且不要求用户确认</li><li><code>-j</code>：不重建文档的目录结构，把所有文件解压到同一目录下</li></ul><p><strong>(1)将压缩文件解压到当前目录</strong></p><pre class=" language-bash"><code class="language-bash">unzip gong.zip</code></pre><p><strong>(2)将压缩文件解压到指定目录</strong></p><pre class=" language-bash"><code class="language-bash">unzip gong.zip  -d/tmp</code></pre><h3 id="bzip2命令"><a href="#bzip2命令" class="headerlink" title="bzip2命令"></a>bzip2命令</h3><p><strong>bzip2是一个无损压缩软件，具有高质量的数据压缩能力，可以压缩到原来文件的10%-15%。</strong><br>参数：</p><ul><li><code>-c</code>：将数据压缩或解压至标准输出</li><li><code>-d</code>：强制解压缩</li><li><code>z</code>：和d选项类似。</li><li><code>-t</code>：检查指定文件的完整性，但并不对其解压缩。</li><li><code>-f</code>：强制覆盖输出文件，通常bzip2不会覆盖已经存在的文件</li><li><code>-k</code>：在压缩或解压缩时保留输出文件</li><li><code>-s</code>：在压缩/解压缩以及检查时减少内存用量。采用一种修正的算法进行压缩和测试，每个数据块仅需2.5个字节</li><li><code>v</code>：显示每个被处理文件的压缩率。</li></ul><p><strong>用bzip解压文件</strong></p><pre class=" language-bash"><code class="language-bash">bzip *    //用bzip命令压缩当前目录下的所有文件夹</code></pre><p><strong>用bunzip2解压文件</strong></p><pre class=" language-bash"><code class="language-bash">bunzip  *</code></pre><p>提示：如果解压缩过程中有文件不是bz2后缀，则对该文件解压缩时会报错</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>Linux是一个<strong>多用户、多任务操作系统</strong>。在这样的的系统中，各种计算机资源的分配和管理都以<strong>进程为单位</strong>，为了协调多个进程对这种共享资源的访问，操作系统要跟踪多种进程的活动，以及他们对系统资源的使用情况，从而实施对进程和资源的动态管理。</p><h3 id="一、进程和作业的基本概念"><a href="#一、进程和作业的基本概念" class="headerlink" title="一、进程和作业的基本概念"></a>一、进程和作业的基本概念</h3><h4 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h4><p><strong>进程是指一个具有独立的程序的一次运行过程</strong>。也是系统进行资源分配和调度的基本单位，及每个程序模块和它执行时所处理的数据组成了进程。</p><h4 id="2-作业"><a href="#2-作业" class="headerlink" title="2.作业"></a>2.作业</h4><p><strong>正在执行的一个或多个相关进程可以形成一个作业</strong>。使用管道命令和重定向命令，一个作业可以启动多个进程<br>    根据作业的运行方式的不同，可将作业分为两大类。<br>    <strong><code>前台作业：</code></strong>运行与前台，用户可对其进行交互操作。<br>   <strong><code>后台作业：</code></strong>运行与后台，不接受终端的输入，单向终端输出执行结果。<br>作业既可以运行在前台也可以在后台，但同一时刻，每个用户只能有一个前台作业</p><h4 id="3-进程的基本状态以及转换"><a href="#3-进程的基本状态以及转换" class="headerlink" title="3.进程的基本状态以及转换"></a>3.进程的基本状态以及转换</h4><p><strong>进程的基本状态</strong><br>通常在操作系统中，进程至少要有三种基本状态，分别为：运行态、就绪态和阻塞态。<br>Linux系统中进程一般有以下几种：<br>运行态：（Running）、就绪态（Ready）、阻塞态（Blocked）、睡眠态（Sleeping）、停止态（Task_Interruptible）、僵死态（Task_Zomie）</p><p><strong>进程间的转换</strong></p><p><img src="/postImg/9-2.jpg"></p><p><strong>进程的类别</strong><br><strong><code>交互进程：</code></strong>由一个shell启动的进程，每个进程都有其自己的特点和属性<br><strong><code>批处理进程：</code></strong>不需要与终端相关，提交在等待队列的作业。<br><strong><code>守候进程：</code></strong>Linux系统启动时自动启动，并在后台运行，用于监视特定服务</p><p><strong>Linux守候进程介绍</strong><br>守候进程是在后台运行而没有终端或登陆shell与之结合在一起的进程。<strong>守候进程在程序启动时开始运行，程序结束时停止。这些进程没有控制终端，所有称为在后台运行。</strong>Linux系统有许多标准的守候进程，其中一些周期性的运行来完成特定的任务，其余的连续运行，等待处理系统中发生的某些特定的事件。</p><p><strong>启动守候进程有如下几种方法</strong><br><strong><code>在引导系统时启动：</code></strong>此情况下的守候进程通常在系统启动script的执行期间被启动，这些script一般存放在/etc /rc.d中<br><strong><code>手动从shell提示符启动00000：</code></strong>任何具有相应的执行权限的用户都可以使用这种方法启动守候进程<br><strong><code>使用crond守候进程启动：</code></strong>这个说后进程查询放在/var/spool/cron/crontabs目录中的一组文件，这些文件规定了需要周期性执行的任务。<br><strong><code>执行at命令启动：</code></strong>在规定的一个日期执行一个程序。</p><p><strong>重要的守候进程介绍</strong></p><ul><li><code>amd</code>：自动安装NFS（网络文件系统）</li><li><code>apmd</code>：高级电源管理</li><li><code>httpd</code>：web服务器</li><li><code>xinetd</code>：支持多种网络服务的核心守候程序</li><li><code>crond</code>：Linux下的计划任务</li><li><code>dhcpd</code>：启动一个DHCP（动态IP地址分配）服务器</li><li><code>gated</code> ：网管路由守候进程，使用动态的OSPF路由选择协议</li><li><code>lpd</code>：打印服务</li><li><code>named</code>：DNS服务</li><li><code>netfs</code>：安装NFS、Samba、NetWare网络文件系统</li><li><code>network</code>：激活已配置网络接口的脚本程序</li><li><code>nfsd</code>：NFS服务器</li><li><code>sendmail</code>：邮件服务器sendmail</li><li><code>smb</code>：Samba文件共享/打印服务</li><li><code>snmpd</code>：本地简单网络管理守候进程</li><li><code>Syslog</code>：一个让系统引导时启动syslog和klogd系统日志守候进程的脚本</li></ul><h3 id="二、进程和作业管理"><a href="#二、进程和作业管理" class="headerlink" title="二、进程和作业管理"></a>二、进程和作业管理</h3><h4 id="手工启动"><a href="#手工启动" class="headerlink" title="手工启动"></a>手工启动</h4><p>手工启动是指由用户输入shell命令后直接启动进程<br><strong>前台：一般直接输入程序名（#vi）就可以启动一个前台程序</strong><br><strong>后台：在vi后面加 &amp; </strong><br>提示：以上两种进程都是由shell进程产生的，也就是说shell创建了新进程，这种称父子关系，shell是父进程，一个父进程可以有多个子进程。</p><p><strong>shell命令</strong></p><h4 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h4><p>功能：静态显示系统进程信息</p><pre class=" language-bash"><code class="language-bash">格式：ps【参数】</code></pre><ul><li><code>-a</code>：显示终端上的所有进程（不包括没有终端的进程）</li><li><code>-u</code>：显示进程所有者以及其他一些进程信息，如用户名和时间</li><li><code>-x</code>：显示所有非控制终端的进程</li><li><code>-e</code>：显示所有进程（不现实进程状态）</li><li><code>-f</code>：完全显示</li><li><code>-l</code>：以长格式显示进程信息</li><li><code>-w</code>：宽输出</li><li><code>-pid</code>：显示由进程ID指定的进程的信息</li><li><code>-tty</code>：显示指定终端上的进程信息</li><li><code>-help</code>：显示该命令的版本信息</li></ul><p><strong>示例：</strong><br><code>ps -ef</code>  //显示系统中所有进程的全面信息<br><code>ps -aux</code>//显示所有用户有关进程的所有信息</p><p><strong>进程信息中各项参数说明：</strong></p><ul><li><code>USER</code>：进程的启动项</li><li><code>PID</code>：进程号</li><li><code>%CPU</code>：占CPU的百分比</li><li><code>%MEM</code>：占用内存比</li><li><code>VSZ</code>：占用的虚拟内存大小</li><li><code>RSS</code>：占用的物理内存大小</li><li><code>TTY</code>：进程的工作终端（？表示没有终端）</li><li><code>STAT</code>：进程的状态。其中R表示正在执行中；S表示休眠静止状态；T表示暂停执行；Z表示僵死状态。</li><li><code>COMMAND</code>：运行时间</li></ul><h4 id="top命令："><a href="#top命令：" class="headerlink" title="top命令："></a>top命令：</h4><p>ps命令只提供过去完成过的进程的一次性快照，top命令它提供了对系统处理器状态的实时监视，显示了系统中CPU最敏感的任务列表<br><strong>功能：</strong>动态显示CPU利用率、内存利用率和进程状态等相关信息。 </p><pre class=" language-bash"><code class="language-bash">格式：top【选项】妙数</code></pre><ul><li><code>-d</code>：指定美两次屏幕信息的刷新之间的时间间隔，用户可以使用交互命令s改变它</li><li><code>-q</code>：使top没有任何延时的进行刷新。如果由超级用户权限，top将尽可能高的优先级运行</li><li><code>-S</code>：使用累加模式</li><li><code>-s</code>：使top在安全模式中运行，可以消除交互模式下的潜在危险</li><li><code>-c</code>：显示整个命令行，而不是只显示命令名</li><li><code>-help</code>：获取top的帮助</li><li><code>k PID</code>：终止指定的进程</li><li><code>q</code>：退出top</li></ul><p><strong>示例</strong><br><code>top</code>      //默认每5秒刷新一次</p><h4 id="jop命令"><a href="#jop命令" class="headerlink" title="jop命令"></a>jop命令</h4><p><strong>功能：</strong>显示当前多有作业</p><pre class=" language-bash"><code class="language-bash">格式： jop【选项】</code></pre><ul><li><code>-p</code>：金显示进程号</li><li><code>-l</code>：同时显示进程号和作业</li></ul><h4 id="bg命令"><a href="#bg命令" class="headerlink" title="bg命令"></a>bg命令</h4><p>功能：将前台作业或进程切换到后台运行，若没有指定进程号，则将当前作业切换到后台</p><pre class=" language-bash"><code class="language-bash">格式：bg【作业编号】</code></pre><p>（此外，还可以使用Ctrl+Z组合键将前台程序转入后台停止运行；使用Ctrl+C组合键终止前台程序的运行）</p><p><strong>示例1：</strong><br>//使用vi编辑file文件，用Ctrl+Z组合键挂起vi，再切换到后台<br><code>vi filectrl+zbg l</code></p><p><strong>示例2：</strong><br><code>bg</code>//将队首的作业调入后台运行<br><code>bg 3</code>  //将3号作业调入后台运行</p><h4 id="fg命令"><a href="#fg命令" class="headerlink" title="fg命令"></a>fg命令</h4><p>功能：把后台的作业调入前台运行</p><pre class=" language-bash"><code class="language-bash">格式：fg 【作业号】</code></pre><p><strong>示例：</strong><br><code>fg</code> //对首的作业调入前台运行<br><code>fg 2</code>//将队列中的2号作业调入前台运行</p><h4 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h4><p>功能：终止正在运行的进程或作业，超级用户可以终止所有进程，普通用户只能终止自己启动的进程</p><pre class=" language-bash"><code class="language-bash">格式：  <span class="token function">kill</span> 【选项】 PID</code></pre><ul><li><code>-9</code>：示当无选项的命令不能终止进程时，可强制终止指定进程</li></ul><p><strong>示例：</strong><br><code>kill -9 3 8 5</code>//一次杀死3，8，5多个进程</p><h4 id="killall命令"><a href="#killall命令" class="headerlink" title="killall命令"></a>killall命令</h4><p>功能：终止指定程序名的所有进程</p><pre class=" language-bash"><code class="language-bash">格式：killall  -9  程序名</code></pre><p><strong>示例：</strong><br><code>killall  -9  vsftpd</code>//杀死所有对应vsftpd程序的进程</p><h4 id="nice命令"><a href="#nice命令" class="headerlink" title="nice命令"></a>nice命令</h4><p>功能：指定启动进程的优先级</p><pre class=" language-bash"><code class="language-bash">格式：nice 【-优先级】命令</code></pre><p><strong><code>示例：</code></strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">nice</span> -5 <span class="token function">ftp</span>       //启动ftp程序，其优先级为5</code></pre><h4 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h4><p>功能：显示或设定系统日期、时间</p><pre class=" language-bash"><code class="language-bash">格式：date 【MMDDhhmm<span class="token punctuation">[</span>CC<span class="token punctuation">]</span>YY<span class="token punctuation">[</span>.ss<span class="token punctuation">]</span>】</code></pre><p><strong>示例：</strong><br> <code>date</code>  //显示日期和时间<br> <code>date  102310302008.30</code> //设置日期和时间</p><h4 id="id命令"><a href="#id命令" class="headerlink" title="id命令"></a>id命令</h4><p>功能：显示当前用户的详细ID</p><pre class=" language-bash"><code class="language-bash">格式：id 【参数】</code></pre><ul><li><code>-a</code>：显示所有ID信息</li><li><code>-u</code>：显示UID</li><li><code>-g</code>：显示用户所属组的GID</li><li><code>-G</code>：显示用户附加组GID</li></ul><h3 id="二、进程调度"><a href="#二、进程调度" class="headerlink" title="二、进程调度"></a>二、进程调度</h3><h4 id="at调度"><a href="#at调度" class="headerlink" title="at调度"></a>at调度</h4><p>功能：安排系统在指定时间运行程序</p><pre class=" language-bash"><code class="language-bash">格式：at 【参数】时间</code></pre><ul><li><code>-d</code>：删除指定的调度作业</li><li><code>-m</code>：任务结束后会发送mail通知用户</li><li><code>-f 文件名</code>：从指定文件中读取执行的命令</li><li><code>-q 【a-z】</code>：指定使用的队列</li><li><code>-l</code>：显示等待执行的调度作业</li></ul><p><strong>1.时间的绝对表示方法</strong><br>HH：MM  （24小时表示法）<br>HH：MM：AM（12小时表示法）<br><strong>2.时间的相对表示法</strong></p><pre class=" language-bash"><code class="language-bash">Now+时间</code></pre><p><strong>示例：</strong><br><code>now+n minutes</code>  // 从现在起向后n分钟<br><code>now+n days</code>// 从现在起向后n天<br><code>now+n hours</code>  // 从现在起向后n小时<br><code>now+n weeks</code> // 从现在起向后n周</p><blockquote><p>案例分析1：设置at调度，要求在2009年12月31日23时59分向登陆在系统上的所有用户发送”happy new year“信息：<br>at    23：59      12/31/2009<br>at&gt;who<br>at&gt;all happy new year!<br>at&gt;<eof>          //ctrl+d结束作业<br>job 1 at 2009-12-31 23:59</eof></p></blockquote><p><strong>显示at等待队列的作业信息</strong><br>atq</p><p><strong>删除at等待队列中序号为1的作业</strong><br>atrm 1</p><h4 id="batch调度"><a href="#batch调度" class="headerlink" title="batch调度"></a>batch调度</h4><p>功能：和at命令功能几乎相同，唯一区别是如果不指定运行时间，进程将在系统较短空闲时间运行</p><pre class=" language-bash"><code class="language-bash">格式： batch 【选项】【时间】</code></pre><h4 id="cron调度"><a href="#cron调度" class="headerlink" title="cron调度"></a>cron调度</h4><p>功能：安排作业让系统在指定时间周期运行<br><strong>原理：</strong>cron进程，每隔一分钟，检查/var/spool/cron目录下用户提交的作业文家中有无任务需要运行</p><h4 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h4><p>功能：维护用户的crontab配置文件</p><pre class=" language-bash"><code class="language-bash">格式：crontab 【参数】文件名</code></pre><ul><li><code>-u 用户名</code>：指定具体用户的cron文件</li><li><code>-r</code>：删除用户的crontab文件</li><li><code>-e</code>：创建并编辑crontab配置文件</li><li><code>-l</code>：显示crontab配置文件内容</li></ul><h4 id="cron进程"><a href="#cron进程" class="headerlink" title="cron进程"></a>cron进程</h4><p>cron进程在系统启动时自起启动，并一直运行在后台，负责检测crontab配置文件，并按其设置内容，定期重复执行指定的cron调度工作</p><blockquote><p>案例：<br>要求root用户在每周二、四、六早上3点启动系统建立crontab文件<br>vi rootroot.cron   //以root用户登陆<br>格式：分 时 日 月 星期 要运行的程序<br>实例：0 3 <em> </em> 2，4，6    sbinshutdown -r now<br>运行crontab文件<br>crontab   /root / root.cron   //建立当前标准格式用户crontab文件<br>crontab命令提交的调度任务存放在/var/spool/cron目录中，并且以提交的用户名称命名，等待crond进程来调度执行。<br>通过/etc/at.deny和/etc/at.allow文件可以控制执行at命令的用户,at.deny存放禁止执行at命令用户名；at.allow存放允许执行at命令的用户名。</p></blockquote><p><strong>示例：</strong><br>禁止user1用户执行at命令安排调度任务<br><code>vi /tec /at.deny</code><br>然后向文件中添加user1，最后保存文件</p><h2 id="外存管理"><a href="#外存管理" class="headerlink" title="外存管理"></a>外存管理</h2><p>Linux中无论是硬盘还是软盘都<strong>必须经过挂载</strong>才能进行文件存取操作。所谓挂载就是<br><strong>将存储介质内容映射到指定的目录中</strong>，此目录即为设备的挂载点。对介质的访问就是对挂载点目录的访问。一个挂载点一次只能挂载一个设备。</p><h3 id="磁盘管理的shell命令"><a href="#磁盘管理的shell命令" class="headerlink" title="磁盘管理的shell命令"></a>磁盘管理的shell命令</h3><h4 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h4><p>功能：查看内存使用情况，包括虚拟内存、物理内存和缓冲区</p><pre class=" language-bash"><code class="language-bash">free【参数】</code></pre><ul><li><code>-b</code>： 以字节为单位，默认选项</li><li><code>-k</code>： 以KB为单位</li><li><code>-m</code>：以MB为单位</li></ul><h4 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h4><p>功能：显示目录中文件的空间大小</p><pre class=" language-bash"><code class="language-bash">du【参数】【路径名】</code></pre><ul><li><code>-m</code>：以MB为单位，统计文件的容量（默认KB）</li></ul><h4 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h4><p>功能：统计分区的使用情况</p><pre class=" language-bash"><code class="language-bash">df【参数】【分区号/装载点】</code></pre><ul><li><code>-m</code>：以MB为单位，统计使用情况</li></ul><p><strong>示例：</strong><br><code>df</code>        显示当前所有已装载的分区使用情况<br><code>df /home</code>    显示/home分区使用情况</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="Fdisk分区"><a href="#Fdisk分区" class="headerlink" title="Fdisk分区"></a>Fdisk分区</h4><pre class=" language-bash"><code class="language-bash">Fdisk -l         //查看机器所有挂u硬盘个数以及分区情况Fdisk /dev/sda   //进入设备/dev/sda</code></pre><p>Command（m for help）：</p><ul><li><code>-m</code>：    帮助</li><li><code>-d</code>：   删除一个分区</li><li><code>-l</code>：   列出分区类型</li><li><code>-n</code>：    添加一个分区</li><li><code>-o</code>：     创建一个分区</li><li><code>-p</code>：     ‘p’列出分区表</li><li><code>-q</code>：   不保存退出</li><li><code>-t</code>：    改变分区类型</li><li><code>-w</code>：  把分区表写入硬盘并退出</li><li><code>-x</code>：   扩展应用，专家功能</li></ul><h3 id="装载和卸载文件系统"><a href="#装载和卸载文件系统" class="headerlink" title="装载和卸载文件系统"></a>装载和卸载文件系统</h3><h4 id="1-手动命令装载"><a href="#1-手动命令装载" class="headerlink" title="1.手动命令装载"></a>1.手动命令装载</h4><p>功能：装载文件系统到指定的目录，该目录即为此设备的挂载点，挂载点目录可以不为空。但是必须已经存在。文件系统挂在后，该挂载点目录的原文件暂时不能显示且不能访问，取代它的是挂载设备上的文件。该目录上原文件待到挂载设备卸载后，才能重新访问。</p><pre class=" language-bash"><code class="language-bash">mount【选项】【设备名】【装载点】</code></pre><ul><li><code>-t 文件系统类型(type)</code>：挂载指定文件系统类型</li><li><code>-o ro</code>：只读方式</li><li><code>-o rw</code>：读写方式</li><li><code>-o iocharset=gb2312</code>：显示中文</li></ul><p><strong>示例：</strong><br><strong><code>1.查看已挂载的所有文件系统：mount</code></strong><br>Linux在启动时会自动挂载硬盘上的根分区，如果安装时建立多个分区，那么也可以查看多个分区的挂载情况。另外根据系统运行的需要，系统还自动挂载多个与存储设备无关的文件系统。<br><strong><code>2挂载光盘：</code></strong></p><pre class=" language-bash"><code class="language-bash">Mkdir /mount/cdromMount -t ios9660  /dev/cdrom  /mount/cdromLs /mount/cdrom                              //显示光盘中的内容</code></pre><p><strong><code>挂载U盘：</code></strong></p><pre class=" language-bash"><code class="language-bash">Mkdir /mount/usb                      //创建目录Mount -t vfat /dev/sdal /mount/usb    //挂载U盘Ls /mount/usb                         //显示U盘中的内容</code></pre><p>U盘设备在Linux上通常显示为SCSI设备，如/dev/sdal、/dev/sdbl等，如果u盘中的文件产生于windows环境，则可用‘-t vfat选项’。<br>通过mount可以查看挂载设备情况：</p><pre class=" language-bash"><code class="language-bash">Mount  /dev/cdrom   /mnt/cdromMount -t ext3 /dev/hda5   /mnt/hard5Mount -o ro   /dev/hda6   /mnt/hard6</code></pre><h4 id="2-自动装载"><a href="#2-自动装载" class="headerlink" title="2.自动装载"></a>2.自动装载</h4><p>功能：系统启动时自动装载文件系统</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">vi</span>  /etc/fstab</code></pre><p><strong>Fstab文件结构：</strong></p><pre class=" language-bash"><code class="language-bash">卷标       装载点   类型   装载选项    备份选项    检查顺序/dev/hda5  /abc   ext   defaults     0          1</code></pre><ul><li><code>卷标</code>：     系统分区的表示</li><li><code>装载选项</code>：defaults表示默认启动时自动装载、noauto表示设定启动时不装载、rw表示读写方式装载、ro表示以只读方式装载、usrquota表示设定用户配额、grpquota表示设定组配额</li><li><code>备份选项</code>：针对ext2，默认值为0，表示不备份</li><li><code>检查顺序</code>：指fsck检查顺序，0表示不检查</li></ul><p><strong>示例：</strong><br>把/dev/hda5在系统启动时自动装载到目录/abc下，且备份选项为0，检查顺序为1：<br><code>Vi  /etc/fstab</code><br>添加如下内容：<br><code>/dev/hda5    /abc   ext2   defaults    0     1</code></p><h4 id="卸载文件系统ument"><a href="#卸载文件系统ument" class="headerlink" title="卸载文件系统ument"></a>卸载文件系统ument</h4><p>功能：卸载指定的设备，即可使用设备名也可使用挂载目录名</p><pre class=" language-bash"><code class="language-bash"><span class="token function">umount</span> 【选项】【装载点】</code></pre><ul><li><code>-t</code>：文件系统类型：指定文件系统类型</li></ul><p><strong>列子：</strong><br><code>Umount  /mnt/cdrm</code>卸载光盘<br><code>Umount  /dev/sdbl</code>   卸载U盘</p><h4 id="检测文件系统fsck"><a href="#检测文件系统fsck" class="headerlink" title="检测文件系统fsck"></a>检测文件系统fsck</h4><p>功能：检测并修复文件系统</p><pre class=" language-bash"><code class="language-bash">fsck【设备文件名】</code></pre><ul><li><code>-p</code>：自动修复检测道德错误</li></ul><p><strong>示例：</strong><br><code>Fsck -p  /dev/hda5</code> //检查硬盘某一分区上的文件系统</p><h4 id="Df命令"><a href="#Df命令" class="headerlink" title="Df命令"></a>Df命令</h4><p>功能：显示文件系统的相关信息</p><pre class=" language-bash"><code class="language-bash">df【选项】</code></pre><ul><li><code>-a</code>：显示全部文件系统的使用情况</li><li><code>-t</code>:   文件系统类型：显示全部文件系统的使用情况</li><li><code>-x</code>:  文件系统类型：仅显示指定文件系统</li><li><code>-h</code>: 文件系统：显示除指定文件系统以外的其他文件系统的使用情况</li></ul><h4 id="Mkfs命令"><a href="#Mkfs命令" class="headerlink" title="Mkfs命令"></a>Mkfs命令</h4><p>功能：在磁盘文件系统上建立文件系统，也就是进行磁盘格式化</p><pre class=" language-bash"><code class="language-bash">mkfs【选项】 设备</code></pre><ul><li><code>-t</code>:   文件系统类型：建立指定的问价系统，默认值为ext2</li><li><code>-c</code>：建立文件系统前首先检查磁盘坏块</li></ul><p><strong>例如：</strong><br>将软盘格式化为ext2格式：<br><code>mkfs dev/fd0</code></p><h3 id="磁盘配额概述"><a href="#磁盘配额概述" class="headerlink" title="磁盘配额概述"></a>磁盘配额概述</h3><p><strong>文件系统配额是一种磁盘空间的管理机制。使用文件系统配额可限制用户或组群在某个特定文件系统中所能使用的最大空间</strong>.配额管理文件保存于实施配额管理的那个文件系统的挂载目录中，其中aquota.user文件保存用户及配额的内容，而aquota.group文件保留组群级配额的内容。其中有分硬配额和软配额<br><strong>应配额</strong>：是用户和群组可使用空间的最大值。不可超出<br><strong>软配额</strong>：也定义用户和群组使用空间，但它在一段时间被超过后，会有7天的过渡期，此期间可以不断超过使用。</p><h4 id="设置文件系统配额"><a href="#设置文件系统配额" class="headerlink" title="设置文件系统配额"></a>设置文件系统配额</h4><p>超级用户必须首先编辑/etc /fstab文件，指定实施配额管理文件系统以及实施何种配额管理，其次应执行quotacheck命令检查进行配额管理的文件系统并创建配额管理文件，然后利用edquota命令编辑配额管理文件，最后启动配额管理即可。</p><h4 id="quotacheck命令"><a href="#quotacheck命令" class="headerlink" title="quotacheck命令"></a>quotacheck命令</h4><p>功能：检查文件系统的配额限制，并可创建配额管理文件</p><pre class=" language-bash"><code class="language-bash">格式：quotacheck【选项】</code></pre><ul><li><code>-a(all)</code>：        检查/etc/fstab文件中需要进行配额管理的分区</li><li><code>-g(group)</code>：  检查文件系统中文件和目录的数目，并可创建quota.group文件</li><li><code>-u(user)</code>：     检查文件中文件和目录的数目，并可创建quota.user文件</li><li><code>-v(verbose)</code>：显示命令的执行过程</li></ul><h4 id="edquota命令"><a href="#edquota命令" class="headerlink" title="edquota命令"></a>edquota命令</h4><p>功能：编辑配额管理文件</p><pre class=" language-bash"><code class="language-bash">edquota【选项】</code></pre><ul><li><code>-用户名</code>：设定指定用户的配额</li><li><code>-g(group)组群名</code>：设定指定群组的配额</li><li><code>-p 用户名1 用户名2</code>：将用户1的配额设置复制给用户2</li></ul><h4 id="quotaon命令"><a href="#quotaon命令" class="headerlink" title="quotaon命令"></a>quotaon命令</h4><p>功能：启动配额管理，其主要选项与quotacheck命令相同</p><pre class=" language-bash"><code class="language-bash">quotaon【选项】</code></pre><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><p><strong>1.检查quota软件包是否安装</strong><br><code>rpm -q quota</code><br><strong>2.如果未安装先安装</strong><br><code>mount  /mnt /cdrom</code><br><code>cd /mnt /cdrom /RedHat/RPMS</code><br><code>rpm -ivh quota.....</code><br><strong>相关文件：</strong><br><code>/sbin /quotacheck</code> 生成配额文件<br><code>/sbin/quotaon</code>    启动磁盘配额<br><code>/sbin /quotaoff</code>关闭磁盘配额<br><code>/user /sbin /edquota</code> 设定用户/组配额<br><code>/user /bin /quota</code>   显示用户/组的配额信息</p><p><strong>3.修改fstab文件</strong><br>给相应的磁盘分区设定配额信息，即在安装选项中加入userquota或者grpquota参数<br>例如：<code>/dev /hda5    /abc     ext2     defaults，userquota  0  1</code><br><strong>4.使fstab更改生效</strong><br>重新启动系统，使fstab更改生效</p><p><strong>5.在实行配额限制的磁盘分区的挂载点下创建的配额信息文件</strong><br><code>cd  /abc</code><br><code>touch  aquota.user</code><br><code>touch  aquota.group</code></p><p><strong>6.生成标准的配额信息文件</strong></p><pre class=" language-bash"><code class="language-bash">quotacheck【参数】【挂载点】</code></pre><ul><li><code>-a</code>：所有实行配额文件的系统</li><li><code>-u</code>：生成用户配额文件</li><li><code>-g</code>：生成组群配额文件</li><li><code>-v</code>；显示详细信息</li></ul><p><strong>示例：</strong>quotacheck   -uv    /abc</p><p><strong>7.设定用户或组群的配额限制</strong></p><pre class=" language-bash"><code class="language-bash">edquota【参数】【用户名/组群名】</code></pre><ul><li><code>-u</code>：设置用户的quota，这是预设的参数</li><li><code>-g</code>：设置组群的quota</li></ul><p><strong>8.启动用户或群组配额限制</strong></p><pre class=" language-bash"><code class="language-bash">quotaon 【参数】【挂载点】</code></pre><ul><li><code>-a</code>：所有实行配额的文件系统</li><li><code>-u</code>：生成用户配额文件</li><li><code>-g</code>：生成组群配额文件</li><li><code>-v</code>：显示详细信息</li></ul><p><strong>9.其他相关命令</strong></p><pre class=" language-bash"><code class="language-bash">quotaoff 【参数】【挂载点】   //关闭磁盘配额限制</code></pre><p> cquotaoff  -uv  /home    //关闭磁盘配额限制，参数同quotaon</p><pre class=" language-bash"><code class="language-bash">quota<span class="token operator">&lt;</span>用户名/-g  组名<span class="token operator">></span></code></pre><p>quota   u1    //显示U1用户的使用情况<br>Quota        //显示当前用户使用情况</p><p><strong><code>案例分析1：对文件系统实施用户级的配额管理，普通用户tom的软配额为100MB，硬配额为150MB。</code></strong></p><pre class=" language-bash"><code class="language-bash">1）使用文件编辑工具编辑/etc /fstab文件，对所在行进行修改，增加命令选项userquota。此时etc/fstab文件内容如下所是:Label           /              ext3  userquota    defaults         1  1Label<span class="token operator">=</span>/boot     /boot          ext3               defaults         1  2None            /dev /pts      devpts            gid<span class="token operator">=</span>5,mod<span class="token operator">=</span>620     0  0None            /proc          proc               defaults         0  0None            /dev /shm      tmpfs              defaults         0  0/dev /sda3      swap           swap               defaults         0  0/dev /cdrom     /mnt /cdrom    udf,iso9660    noauto,owner,kudzu   0  0/dev /cdrom     /mnt /floppy   auto           noauto,owner,kudzu   0  02<span class="token punctuation">)</span>使用reboot命令重新启动系统文件，文件系统会根据修改的内容重新进行挂载3<span class="token punctuation">)</span>利用quotacheck命令创建aquota.user文件Quotacheck  -avn4）利用edquota命令编辑aquota.user文件，设置用户tom的配额Edquota  tomDisk quotas <span class="token keyword">for</span> user tom（uid 500）Filesytem                       blocks   soft   hard    inodes    soft   hard/dev /sda1                       100     0      0       11      0      0由此可知，实施配额管理的文件系统的逻辑卷名是/dev /sad1，tom用户已使用了100KB的磁盘空间，设置tom用户的软硬配额，默认单位为KB，如下，修改后保存：Filesytem                      blocks   soft     hard    inodes    soft   hard/dev /sda1                     100    102400  153600     11      0      05）启动配额管理edquota  -avn/dev /sda1 <span class="token punctuation">[</span>/<span class="token punctuation">]</span>:user  quotas turned  on6<span class="token punctuation">)</span>测试用户配额把hda5分区挂载在/abc下，对该分区做磁盘配额Mount  /dev /hds5   /abcVi  /etc /fstabLabel           /              ext3           defaults              1  1Label<span class="token operator">=</span>/boot     /boot          ext3           defaults              1  2None            /dev /pts      devpts         gid<span class="token operator">=</span>5,mod<span class="token operator">=</span>620         0  0None            /proc          proc           defaults              0  0None            /dev /shm      tmpfs          defaults              0  0/dev /sda3      swap           swap           defaults              0  0/dev /cdrom     /mnt /cdrom    udf,iso9660    noauto,owner,kudzu    0  0/dev /cdrom     /mnt /floppy   auto           noauto,owner,kudzu    0  0/dev /hds5      /abc           ext3           defaults，userquota   1  2建立ah用户与xh用户Useradd  ahUseradd   xh设定ah用户在/abc下只允许使用的空间为5MB，使用的节点数为5.Disk quotas <span class="token keyword">for</span> user ah（uid 501）Filesytem                      blocks   soft     hard    inodes    soft   hard/dev /sda5                     100    512000     0      5      0      0设定xh用户在/abc下只允许使用的空间为10MB，使用的节点数为4Disk quotas <span class="token keyword">for</span> user ah（uid 501）Filesytem                      blocks   soft     hard    inodes    soft   hard/dev /sda5                     100    1024000     0      4      0      0分别用两个用户登陆，来进行测试Su ah；su  xh 以两个用户身份登陆，复制文件，测试磁盘空间的使用情况。</code></pre><p><strong><code>案例分析2：对问价系统实施组群配额管理，staff组群的软配额是500MB，硬盘配额是600MB。</code></strong></p><pre class=" language-bash"><code class="language-bash">1<span class="token punctuation">)</span>使用文件编辑工具编辑/etc /fstab文件，对所在行进行修改，增加命令选项groupquota。此时etc/fstab文件从内容如下所示：Label          /              ext3  userquota   defaults           1  1Label<span class="token operator">=</span>/boot    /boot          ext3              defaults           1  2None           /dev /pts      devpts            gid<span class="token operator">=</span>5,mod<span class="token operator">=</span>620      0  0None           /proc          proc              defaults           0  0None           /dev /shm      tmpfs             defaults           0  0/dev /sda3     swap           swap              defaults           0  0/dev /cdrom    /mnt /cdrom    udf,iso9660     noauto,owner,kudzu   0  0/dev /cdrom    /mnt /floppy   auto            noauto,owner,kudzu   0  02）使用reboot命令重新启动系统，文件系统会根据修改的内容重新进行挂载。3）利用quotacheck命令创建aquota.group文件。此时查看目录可以发先系统已经新建组群级配置管理文件aquota.group4）利用edquota命令，为staff组群设置配额Edquota  -g  staff输入此命令后，系统进入vi编辑界面，编辑后部分内容如下:Disk quotas <span class="token keyword">for</span> user ah（uid 500）Filesytem                      blocks   soft       hard    inodes    soft   hard/dev /sda5                     100    512000     614400    11      0      05）最后执行”quotaon  -avg”命令，启动组群级配置管理。Staff组群中所在用户在文件系统中可使用的空间总和最多为600MB。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效的读一本书</title>
      <link href="/2019/01/30/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2019/01/30/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>文/简书-萌薇</p><p><strong>问：</strong>“我读过很多书，但后来大部分都被我忘记了，那阅读的意义是什么？”</p><p><strong>答：</strong>“当我还是个孩子的时候，我吃过很多食物，现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经长成为我的骨头和肉。阅读对思想的改变也是如此！”</p><p>可见阅读非常重要，那么有效阅读就更加重要了。</p><h3 id="如何阅读"><a href="#如何阅读" class="headerlink" title="如何阅读"></a>如何阅读</h3><h4 id="1-读书是一门艺术"><a href="#1-读书是一门艺术" class="headerlink" title="1.读书是一门艺术"></a>1.读书是一门艺术</h4><p>认识书上的字就等于会阅读吗？</p><p>以前我也是这么认为的，可是随着阅读量的急速增加，我发现阅读是需要培养和训练的。就像学画画学钢琴一样，是一个循序渐进的过程。掌握了阅读的方法，还需要刻意的练习，才能真正get到阅读的技巧。</p><h4 id="2-读书应该有分类"><a href="#2-读书应该有分类" class="headerlink" title="2.读书应该有分类"></a>2.读书应该有分类</h4><p><strong>针对于不同的书籍应该有不同的阅读方法</strong>，比如杂志类的图书你完全可以利用碎片化时间阅读；小说类图书需要集中精力整片时间阅读；干货类图书则要带着问题集中阅读……</p><p>所谓的30分钟阅读一本书不是没有可能，而是要看你读的是什么书，比如一本《唐诗宋词》你用30分钟阅读肯定是不行的。</p><h4 id="3-读书可以多本交叉"><a href="#3-读书可以多本交叉" class="headerlink" title="3.读书可以多本交叉"></a>3.读书可以多本交叉</h4><p>上周我往返于浙江和江苏，很多时间都是在高铁上度过的。</p><p>我的包包里面一般会放几本纸质书和一个kindle，如《拆掉思维里的墙》《跃迁》《画张图想得更清楚》，kindle里面提前下载了一些名家的作品，比如龙应台的《目送》《黄金时代》《皮囊》等。</p><p>乘坐交通工具的时间如果能利用起来是非常好的学习时间，就拿高铁来说，你可以选择阅读，睡觉或者打游戏……列车行驶过程中，开始我在阅读《拆掉思维里的墙》读了大概一个小时后，发现自己突然不能集中精力了，思想有点飘忽。</p><p>这个时候我就意识到这本书已经不适合现在看了。闭目养神一会儿后，拿出kindle选择《目送》读了起来，前者属于经管励志书，后者是文学作品，不同的内容一转换，立马就可以把精力收回来。好比你吃饭的时候上的都是荤菜，吃着吃着就会觉得有点腻，这个时候来点素的一搭配，就会吃的很舒服。</p><h4 id="4-读书时间因人而异"><a href="#4-读书时间因人而异" class="headerlink" title="4.读书时间因人而异"></a>4.读书时间因人而异</h4><p>很多人提倡睡前阅读，我也尝试过，但是总发觉睡前阅读不太适合我，我更喜欢早上阅读，不仅效率高还能激发很多灵感出来。睡前的时间我用来画画或者是写文章，效率就会高很多。</p><h4 id="5-利用番茄钟来阅读"><a href="#5-利用番茄钟来阅读" class="headerlink" title="5.利用番茄钟来阅读"></a>5.利用番茄钟来阅读</h4><p>很多人读书时总是不能专注起来，忍不住去刷微信微博，这个时候我建议你可以在手机上设置一个番茄钟，先从25分钟开始，让自己在这25分钟之内不要被外界的任何事情干扰到，全神贯注在书本上，慢慢的你会发现自己专注的时间越来越长了。</p><h4 id="6-先从自己喜欢的领域阅读"><a href="#6-先从自己喜欢的领域阅读" class="headerlink" title="6.先从自己喜欢的领域阅读"></a>6.先从自己喜欢的领域阅读</h4><p>一些以前不爱读书，现在想读书的朋友刚开始总是不知道自己应该读什么书。我也是这种人，从以前的一年读不到一本书到现在的一个月就十几本书，我把自己的心得分享给大家。</p><blockquote><br><br>刚开始我是从畅销书看起的，比如一直特立独行的猫，李尚龙还有林夏萨摩的作品算是引导我走上爱看书的关键因素。<br><br></blockquote><p>有些人<strong>想读书却不知道选择什么类型的书</strong>来看，这个时候你还可以问自己这几个问题：</p><ul><li><p>我哪方面需要补充知识？</p></li><li><p>我有喜欢的名人吗？他（她）们有传记吗？</p></li><li><p>有哪些书上了畅销榜单？</p></li></ul><h3 id="如何做笔记"><a href="#如何做笔记" class="headerlink" title="如何做笔记"></a>如何做笔记</h3><p>上大学时，老师在讲台上用PPT给我们讲课，下面的同学有的在做笔记，有的直接拿着相机在拍摄，老师当时说了这么一句话，至今记忆犹新：“不要用相机在这里拍照，拍了你们也不会看的”。我也是其中一个，得老师吉言，课后我还真懒得看。</p><p>奥野宣之在《如何有效阅读一本书》中也提到：</p><blockquote><br><br>无论在手机里保存多少本书，书里的内容都不会被保存在脑子里。……就是这些内容既不能融入你的身心，也不能变成你无形的财富。<br><br>所以学会写读书笔记尤其重要。即使我们不会因为笔记就能100%记住书中的内容，但是写笔记的过程本身就是一种复盘，一种思考和总<br><br>结。<br><br></blockquote><h4 id="1-读书笔记记什么"><a href="#1-读书笔记记什么" class="headerlink" title="1.读书笔记记什么"></a>1.读书笔记记什么</h4><p>张萌在《人生效率手册》中说，<strong>读书笔记有四大板块</strong>，分别是：</p><ul><li><p>第一大板块是金句：读一本书记住一句话；</p></li><li><p>第二大板块是目录：读一本书你能默写出一本书的目录就是掌握了一本书的逻辑框架；</p></li><li><p>第三大板块是思维导图：按照自己的理解和思考对书本的内容进行拆分重组，对全书综合逻辑进行归纳和总结；</p></li><li><p>第四大板块是反思：即书评；</p></li></ul><p><strong>最后我还想补充一条就是灵感收录。在读书的时候可以把灵感笔记本放在旁边，当然你也可以写在书的空白地方，记录当时一闪而过的灵感。</strong></p><p>这也是我平常写读书笔记的思路，前三条都相对比较简单。那么最难也是最重要的第四条是很多人都头疼的地方。</p><p><strong>书评</strong>我刚开始也不会写，看了《如何有效阅读一本书》，它里面给出的思路我觉得很好，供大家借鉴一下，关于书评你可以从下面几点着手：</p><ul><li><p>这本书讲了什么内容？</p></li><li><p>你最喜欢书的哪一部分？</p></li><li><p>这本书对你有什么影响？</p></li><li><p>它的优点又在哪里？</p></li></ul><p>按照这个框架，书评就很好写了。</p><h4 id="2-通过读书构建自己的书籍体系"><a href="#2-通过读书构建自己的书籍体系" class="headerlink" title="2.通过读书构建自己的书籍体系"></a>2.通过读书构建自己的书籍体系</h4><p>世界上的书那么多，如何才能最快最好的找到属于自己的书籍体系呢，其实每看一本书时，很多作者都会在书中提到一些好书的名字，这个时候你可以把书名记下来，买来阅读。慢慢的你就会明白那些书适合自己了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录文件基本操作与Vi指令和用户组管理</title>
      <link href="/2019/01/29/Linux%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8EVi%E6%8C%87%E4%BB%A4%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/"/>
      <url>/2019/01/29/Linux%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8EVi%E6%8C%87%E4%BB%A4%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="退出linux"><a href="#退出linux" class="headerlink" title="退出linux"></a>退出linux</h3><p>linxu提供了三个推出系统的命令shutdown、halt、reboot。<br><strong>命令格式：</strong></p><pre class=" language-bash"><code class="language-bash">shutdown<span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">[</span>时间<span class="token punctuation">]</span><span class="token punctuation">[</span>警告信息<span class="token punctuation">]</span></code></pre><p><strong>选项：</strong></p><ul><li><strong>k：</strong>并不真正关机，发送警告</li><li><strong>r：</strong>关机后立即重启</li><li><strong>h：</strong>关机后不重启</li><li><strong>f：</strong>快速关机，重启时跳过fsck</li><li><strong>n：</strong>快速关机，不经过init程序</li><li><strong>c：</strong>取消一个已经运行的shutdown</li></ul><p><strong>时间：</strong></p><ul><li>now：立即退出系统</li><li>O mins：在指定时间退出系统</li><li>O hh：ss：在指定的时间退出系统</li></ul><p>Halt命令相当于“shutdown -h now”，表示是立即关机<br>Reboot命令相当于“shutdown -r now”，表示立即启动</p><p><strong>例：</strong></p><p><code>shutdown -h 10     表示10分钟后立即关机</code><br><code>shutdown -r 10     10分钟后立即重启</code><br><code>shutdown -h +4     4分钟内立即关机</code></p><h3 id="Linux中的文件颜色的区别"><a href="#Linux中的文件颜色的区别" class="headerlink" title="Linux中的文件颜色的区别"></a>Linux中的文件颜色的区别</h3><p><strong>黑色</strong>：普通文件<br><strong>红色</strong>：压缩文件<br><strong>蓝色</strong>：目录文件<br><strong>浅蓝色</strong>： 链接文件<br><strong>黄色</strong>： 设备文键盘（/dev）<br><strong>青绿色</strong>：可执行文件（/bin，/sbin）<br><strong>粉红色</strong>： 图片文件</p><p><strong>Linux目录文件：</strong></p><ul><li><strong>/：</strong>根目录</li><li><strong>/ bin，/sbin：</strong>这里放着启动时所需要的普通程序和目录程序</li><li><strong>/dev：</strong>这个目录下保存着所有的设备文件</li><li><strong>/home：</strong>用户主目录</li><li><strong>/usr：</strong> 除了上诉文件，几乎所有文件都放在这里<ul><li><strong>/sur/bin：</strong>二进制可执行文件，存放着绝大多数的应用程序</li><li><strong>/sur/sbin：</strong>存放绝大部分系统程序</li><li><strong>/sur/games：</strong>存放游戏程序和相应的数据</li><li><strong>/sur/include：</strong>保存C和C++的头文件</li><li><strong>/sur/src：</strong>存放源代码文件</li><li><strong>/sur/doc：</strong>存放各种文档文件</li><li><strong>/sur/share：</strong>保存各种共享文件</li></ul></li><li><strong>/lib：</strong> 启动时所有的库文件</li><li><strong>/etc：</strong>保存着绝大部分的系统配置文件</li></ul><h3 id="文件与目录的基本操作"><a href="#文件与目录的基本操作" class="headerlink" title="文件与目录的基本操作"></a>文件与目录的基本操作</h3><h4 id="pwd命令："><a href="#pwd命令：" class="headerlink" title="pwd命令："></a>pwd命令：</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">pwd</span></code></pre><p>pwd命令用于显示当前用户所在的绝对路径</p><h4 id="cd命令："><a href="#cd命令：" class="headerlink" title="cd命令："></a>cd命令：</h4><pre><code>cd 【路径】          cd .. 返回上一级</code></pre><p>cd命令用于改变当前路径</p><h4 id="mkdir命令："><a href="#mkdir命令：" class="headerlink" title="mkdir命令："></a>mkdir命令：</h4><pre class=" language-bash"><code class="language-bash">mkdir【参数】<span class="token operator">&lt;</span>目录名<span class="token operator">></span>       （ -P  循环建立目录）</code></pre><p><strong>例子：</strong><br><code>mkdir /d1         //创建目录d1</code><br><code>mkdir -p d3/d4   //创建d3文件夹以及d3里面的d4</code></p><h4 id="ls命令："><a href="#ls命令：" class="headerlink" title="ls命令："></a>ls命令：</h4><p>显示目录</p><pre class=" language-bash"><code class="language-bash">ls命令：ls 【参数】 目录名</code></pre><p><strong>参数：</strong></p><ul><li><strong>-a：</strong>显示目录下所有文件</li><li><strong>-l：</strong>以具体详细信息显示目录下的内容</li><li><strong>-f：</strong>显示文件名同时显示类型</li><li><strong>-r：</strong>第归显示</li><li><strong>-t：</strong>按照时间显示</li><li><strong>d：</strong>目录</li><li><strong>l：</strong>符号连接</li><li><strong>b：</strong>块设备文件</li><li><strong>c：</strong>字符设备文件 </li></ul><p><strong>例子：</strong><br><code>ls            //显示当前目录下所有文件</code><br><code>ls /bin/      //显示/bin/目录下所有文件</code></p><h4 id="touch命令："><a href="#touch命令：" class="headerlink" title="touch命令："></a>touch命令：</h4><p> 改变文件的时间记录、创建空文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> 【参数】文家列表</code></pre><p><strong>参数：</strong></p><ul><li><strong>-t：</strong> 用给定时间更改文件的时间</li></ul><p><strong>例如：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> -t 200809121025 file1    <span class="token comment" spellcheck="true">#将file1的时间改为2008年9月12号10点25分，若文件不存在，将新建一个</span></code></pre><h4 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令:"></a>cp命令:</h4><p>将给出的文件会文件夹移动到制定目录下</p><pre class=" language-bash"><code class="language-bash">cp【参数】 源文件或目录  目标文件或目录</code></pre><p><strong>参数：</strong></p><ul><li><strong>-a：</strong>在复制目录中使用，它保留连接、文件属性并第归的复制目录</li><li><strong>-f：</strong>若文件在目标路径中则强制覆盖</li><li><strong>-i：</strong>当文件在目标路径中存在提示并要求用户确认是否覆盖</li><li><strong>-r：</strong>若给出的源文件是一个目录文件，此时cp将第归复制该目录下所有的子目录和文件</li><li><strong>-p：</strong>除复制源文件 的内容外，还将把其修改时间和访问权限也复制到新文件中</li></ul><p><strong>例子：</strong></p><p><code>cp -i exam1.c  /usr/wang/</code><br>将文件exam1.c复制到/sur /wang / 目录下，提示用户确认  是否覆盖</p><p><code>cp -i exam1.c  /usr/wang/  shiyan1.c</code><br>将文件exam1.c复制到/sur /wang / 目录下，并改名为shiyan.c, 提示用户确认  是否覆盖</p><p><code>cp -r /usr/xu/   /usr/wang/</code><br>将/usr/xu/ 下所有文件都复制到/usr/wang/</p><h4 id="mv命令："><a href="#mv命令：" class="headerlink" title="mv命令："></a>mv命令：</h4><p>该命令是为文件或名录改名或者把文件由一个目录移动到另一个目录中去</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">mv</span> 【参数】源文件或目录  目标文件或目录</code></pre><p><strong>参数：</strong></p><ul><li><strong>-f：</strong>忽略存在的文件，不给提示强制移动</li><li><strong>-i：</strong>进行交互式移动</li><li><strong>-r：</strong>指示rm将参数列出全部目录和子目录第归移动</li><li><strong>-v：</strong>显示命令执行过程</li></ul><p><strong>例子：</strong></p><p><code>mv -i /usr/xu</code><br>将/ usr /xu 中的所有文件移动到当前目录。如果文件存在提示用户是否移动</p><p><code>mv wch.txt wjz.doc</code><br>将文件重命名为wjz.doc</p><p><code>mv  /m1/f1   /m2/</code><br>将m1目录下的文件f1移动到m2目录下</p><p><code>mv -f /d1* /d2/</code><br>将目录d1下的所有文件移动到d2目录下，如果文件 不存在，不给出任何指示。</p><h4 id="rm命令："><a href="#rm命令：" class="headerlink" title="rm命令："></a>rm命令：</h4><p>删除一个目录中的一个或多个<br><strong>例子：</strong><br><code>rm -i wch.txt wjz.doc</code><br>删除文件wch.txt  wjz.doc  ,用户会对每个文件 进行删除确认</p><p><code>rm /m1/f1</code><br>删除m1目录下的所有文件</p><p><code>rm -f  /m1/*</code><br> 强制删除m1目录下的所有文件</p><p><code>rm -rf  /m1/</code><br>  第归强制删除m1目录下的所有文件</p><h4 id="clear命令："><a href="#clear命令：" class="headerlink" title="clear命令："></a>clear命令：</h4><p>清屏</p><pre class=" language-bash"><code class="language-bash"><span class="token function">clear</span></code></pre><h3 id="文件连接命令"><a href="#文件连接命令" class="headerlink" title="文件连接命令"></a>文件连接命令</h3><h4 id="ln-命令："><a href="#ln-命令：" class="headerlink" title="ln 命令："></a>ln 命令：</h4><p>给文件之间创建链接，用户可以利用该链接直接进入被链接的目录而不是使用较长的名字</p><pre class=" language-bash"><code class="language-bash">In【参数】目标  链接名</code></pre><p><strong>参数：</strong></p><ul><li><strong>-f：</strong>链接时直接覆盖已存在的链接名</li><li><strong>-d：</strong>允许系统管理者硬链接自己的目录</li><li><strong>-i：</strong>连接时询问用户</li><li><strong>-n：</strong>在进行软链接时，将链接文件视为一般的文件</li><li><strong>-b：</strong>将在链接时会被覆盖或者删除</li></ul><p><strong>例子：</strong><br><code>In  /etc/abc  /abc.hard</code><br>给文件/etc/abc 建立一个硬链接到 /abc.hard</p><p><code>In  -s  /usr/local/qq   /qq.soft</code><br>给文件/usr/local/qq 创建一个软链接，链接名为/qq.soft</p><h3 id="文件内容操作命令"><a href="#文件内容操作命令" class="headerlink" title="文件内容操作命令"></a>文件内容操作命令</h3><h4 id="cat命令："><a href="#cat命令：" class="headerlink" title="cat命令："></a>cat命令：</h4><p>主要用来显示文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> 【选项】文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-n：</strong> 由1开始对所有输出的行数编号</li><li><strong>-b：</strong>与-n相似，所不同的是对空白行不编号</li><li><strong>-s： </strong>当遇到有连续两行以上的空白行时，就代换为一行空白行</li><li><strong>-v：</strong>用一种特殊形式显示控制字符，LFD与TAB除外</li><li><strong>E： </strong>在每行的末尾显示一个$符。要与 -v选项一起使用</li></ul><p><strong>例子：</strong><br><code>cat readme.txt</code>             在屏幕上显示readme.txt文件的内容<br><code>cat text1 text2 &gt; text3</code>     把文件text1和文件 text2的内容合并起来，放入text3<br><code>cat text3</code>                查看text3的内容<br><code>cat -n text1 &gt; text2</code>         把文件text1的内容加上 行号后输入text2中<br><code>cat -b text1 text2 &gt;&gt; text4</code>   把文件text1和text2的内容加上行号后（空白行不加）之后将内容附加到文件text4。</p><h4 id="more命令："><a href="#more命令：" class="headerlink" title="more命令："></a>more命令：</h4><p>分页显示文件内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">more</span> 【选项】 文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-num：  </strong>一次显示的行数</li><li><strong>-d：       </strong>提示使用者，在画面下方显示【press space to continue，q to quit】</li><li><strong>-f：        </strong>计算行数时，以实际上的行数，而非自动换行后的行数</li><li><strong>-p：        </strong>不已卷动的方式显示每一页，而是先清屏后在显示</li><li><strong>c：         </strong>与p类似，不同的是先显示内容，再清除其他旧资料</li><li><strong>-s：        </strong>当遇到两行以上的连续空白时，就代换为一行空白</li><li><strong>+num： </strong>从第几行开始显示</li></ul><p><strong>例子：</strong><br><code>more +20 testfile</code> 从第20行开始显示textfile</p><p><code>ls |more</code>     分页显示当前目录下的文件</p><h4 id="less命令："><a href="#less命令：" class="headerlink" title="less命令："></a>less命令：</h4><p>和more命令一样，可以用pgup和pgdn翻页查看，q键推出</p><h4 id="head命令："><a href="#head命令：" class="headerlink" title="head命令："></a>head命令：</h4><p> 查前几行    例子：head -15 files   //查看前15行</p><h4 id="tail命令："><a href="#tail命令：" class="headerlink" title="tail命令："></a>tail命令：</h4><p>和head相反</p><h3 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h3><h4 id="find命令："><a href="#find命令：" class="headerlink" title="find命令："></a>find命令：</h4><p>寻找条件可以使用一个由逻辑运算符not、and、or组成的复合条件<br><strong>and：用“-a”表示，or： 用“-o”表示，not： 用“！”表示</strong></p><pre class=" language-bash"><code class="language-bash">find【路径】【参数】【文件名】</code></pre><p><strong>参数：</strong></p><ul><li><strong>-name：</strong>“文件名”，表示查找指定名称文件</li><li><strong>-lname：</strong>“文件名”，检查指定文件所有的连接文件</li><li><strong>-user：</strong>用户名，查找指定用户拥有的文件</li><li><strong>-group：</strong>组名，查找指定组拥有的文件</li></ul><p><strong>例子：</strong><br><code>find -name practice -print</code><br>在登陆目录的所有目录中使用find来定位每一个名为practice的文件并输出其路径名</p><p><code>find .-name ‘main*’</code><br>查找当前目录下所有以‘main’开头的文件</p><p><code>find  .-name ‘tmp’ -xtype c -user ‘init’</code><br>查找当前目录中文件名为tmp文件类型为c用户名为init的文件 </p><p><code>find / -name ‘tmp’  -o  -name ‘main*’</code><br>查找根目录下文件名为tmp胡区配main*的所有文件</p><p><code>find ！ -name ‘tmp’</code><br>查询登陆目录中文件名不是tmp的所有文件</p><h3 id="文件内容查询命令"><a href="#文件内容查询命令" class="headerlink" title="文件内容查询命令"></a>文件内容查询命令</h3><h3 id="grep命令："><a href="#grep命令：" class="headerlink" title="grep命令："></a>grep命令：</h3><p>通知用户在什么文件中搜索与指定的模式匹配的字符串，并且打印出所有包含该字符串的文本行</p><pre class=" language-bash"><code class="language-bash">grep【选项】文件名1，文件名2…….n</code></pre><p><strong>选项：</strong></p><ul><li><strong>-i：</strong>查找时忽略字母的大小写</li><li><strong>-l：</strong>仅输出包含该目标字符串文件的文件名</li><li><strong>-v：</strong>输出不包含目标字符串的行</li><li><strong>-n：</strong>输出每个包含有目标字符串的行及其行号</li></ul><p><strong>例子：</strong><br><code>grep ‘ssssyyyuuuu’ test-g tts</code><br>单引号指示shell不解释引号内的任何字符。在test-g和tts中查找ssssyyyuuuu<br><code>grep ‘text file’stdio.h</code>    在stdio.h中搜索字符串text file<br><code>grep ‘^a’ text-g</code>            以a开头的行不会被输出<br><code>grep ‘\^a’ text-g</code>            以a开头的行会被输出<br><code>grep ‘t$’ text-g</code>        以t结尾的行会被输出<br><code>grep n ‘^...$’ text-g</code>     输出从行的开始到结尾只有3个任意字符的行号<br><code>grep -n ‘^$’</code>               输出所有带行号的空行</p><h4 id="egrep命令："><a href="#egrep命令：" class="headerlink" title="egrep命令："></a>egrep命令：</h4><p>和grep一样</p><h4 id="fgrep命令："><a href="#fgrep命令：" class="headerlink" title="fgrep命令："></a>fgrep命令：</h4><p>检索固定字符串</p><h3 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h3><h4 id="sort命令："><a href="#sort命令：" class="headerlink" title="sort命令："></a>sort命令：</h4><p>逐行对文件中的内容进行排序</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sort</span> 【选项】文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-d：</strong>可以使sort忽略标点符号和一些其它特殊符号，而对字母、数字和空格进行排序，即按字典顺序排序</li><li><strong>-f：</strong>不区分大小写进行排序</li><li><strong>-n：</strong>按数值排序，不按ascii码排序</li><li><strong>-r：</strong>反向排序</li><li><strong>+n1 -n2：</strong>第n1个分格符之后第n2个分格符之前的字段，默认的分隔符为空格，分隔符从1开始算起</li><li><strong>-k n：</strong> 按第n字段排序</li><li><strong>-tx：</strong>以任意字符x作为定界符</li><li><strong>-o arg：</strong>输出置于文件arg中</li></ul><p><strong>例子：</strong><br><code>sort d test-g</code>      对文件test-g排序<br><code>sort -f test-g</code>        将大写字母和小写字母同等对待<br><code>sort +1 -2 myfile</code>      以第2字段为关键字对文件排序<br><code>sort -n my</code>           对文件安数值排序<br><code>sort -k 4 mts</code>        从第4个字段开始排序<br><code>sort +3 ressh</code>       以第4字段为关键字对文件排序<br><code>sort spfile -o ssfile</code> 将排序结果输出到指定文件<br><code>cat veglist fruitlist | sort &gt; mylist</code>  当前目录中的文件合并后送给sort排序，并把排序后的文件保存为mylist</p><h3 id="文件统计命令"><a href="#文件统计命令" class="headerlink" title="文件统计命令"></a>文件统计命令</h3><h4 id="wc命令："><a href="#wc命令：" class="headerlink" title="wc命令："></a>wc命令：</h4><p>统计文件中的行数、单词数、字符数</p><pre class=" language-bash"><code class="language-bash">wc【选项】 文件名</code></pre><p><strong>选项：</strong></p><ul><li><strong>-c：</strong>统计字符数</li><li><strong>-w：</strong>单词数</li><li><strong>-l：</strong>行数</li></ul><h3 id="文件帮助"><a href="#文件帮助" class="headerlink" title="文件帮助"></a>文件帮助</h3><h4 id="man指令"><a href="#man指令" class="headerlink" title="man指令"></a>man指令</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">man</span> 【指令】</code></pre><p>简短描述： whatis man</p><h3 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h3><p>Linnux是一种文本驱动的操作系统。用户在使用Linux过程中经常需要编辑文本，如编写脚本文件来执行几行命令行，写电子邮件米创建c语言源程序等。因此，必须熟悉至少一种文本编辑器以便高效的操作文本。</p><p>Linux提供了一个完整的编辑器家族系列，如<strong>Ed</strong>、<strong>ex</strong>、<strong>vi</strong>和<strong>emacs</strong>等，按功能可以将其分为两大类：行编辑器（<strong>ed</strong>、<strong>ex</strong>）和全屏幕编辑器（<strong>vi</strong>、<strong>emacs</strong>），行编辑器每次只能对一行进行操作，而全屏编辑器可以对整个屏幕进行编辑。</p><h4 id="Vi编辑器"><a href="#Vi编辑器" class="headerlink" title="Vi编辑器"></a>Vi编辑器</h4><p>vi没有菜单，只有命令，且命令繁多。Vi有3种基本工作模式：<strong>命令行模式、文本编辑模式、末行模式</strong>，3种模式可互相切换。</p><p><strong>命令行模式</strong><br>在该模式下，从键盘上输入的任何字符都被当作编辑命令来解释，而不会在屏幕上显示。在任何时候，不管处于和种模式，只要按一下Esc键，即可进入命令模式</p><p><strong>文本编辑模式</strong><br>用于字符编辑。在该命令下输入‘i’（插入）、‘a’（附加）后进入文本编辑模式</p><p><strong>末行模式</strong><br>在命令模式下，按‘ ：’，进入末行模式，</p><h4 id="启动vi编辑器"><a href="#启动vi编辑器" class="headerlink" title="启动vi编辑器"></a>启动vi编辑器</h4><p><code>vi filename</code>       打开或新建文件，并将光标i置于第一行首<br><code>vi +n filename</code>            打开文件，将光标置于第n行首<br><code>vi + filename</code>             将光标置于最后一行<br><code>vi +/pattern filename</code>       打开文件，将光标置于第一个与pattern匹配的串处。<br><code>vi -r filename</code>       在上次正用vi编辑时发生崩溃，恢复filename<br><code>vi filename1 ...filename56</code>打开多个文件进行编辑（在末行模式下，：n跳至下一个文件，：e#回到刚才编辑的文件，想回到文件a，就：e a）<br><strong>提示</strong>：如果文件不存在，它在对应的磁盘新建一个</p><p><strong>显示vi的行号</strong><br>在末行模式下输入命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> nu    //及set number的缩写</code></pre><p><strong>关掉行号：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> nonumber</code></pre><p><strong>命令行模式操作</strong></p><p><strong>(1)在命令模式下光标移动列表：</strong><br><code>0</code>  ：将光标移动到当前行的行首<br><code>^</code>   ：将光标移动到当前行的行首<br><code>$</code> ：  将光标移动到当前行的行尾<br><code>nnG</code>   ：  将光标移动到第nn行，<br><code>G(:$)</code>：将光标移动到文件的最后一行<br><code>-</code>     ： 将光标移动到上一行的行首<br><code>+</code>     ： 将光标移动到下一行行首<br><code>nn|</code> ： 将光标移动到nn列<br><code>/abc</code>   ： 将光标移动到文本字符串abc下次出现的位置<br><code>L</code>     ：将光标移动到屏幕的最下面一行<br><code>M</code>    ： 将光标移动到屏幕的中间一行<br><code>H</code> ：将光标移动到屏幕的最上面一行<br><code>fx</code>    ： 在当前行中将光标移动到下一个x字符，<br><code>n</code>      ：将光标移动到前面发出的/word或？word命令中列出模式的下一个实例<br><code>‘’</code>  ：  将光标返回原来的位置<br><code>b</code>     ：将光标移动到上一个单词的开头<br><code>w</code>    ： 将光标移动到下一个单词的开头<br><code>e</code>       ：将光标移动到下一个单词的词尾<br><code>h</code>      ：将光标左移一个字符<br><code>j</code>     ：光标上移一行<br><code>k</code>      ：光标下移一行<br><code>l</code>      ：光标右移一个字符<br><code>Ctrl+f</code>  ： 下翻页<br><code>Ctrl+b</code>   ：上翻页<br><code>Ctrl+d</code>  ：前翻半平<br><code>Ctrl+u</code> ：后翻半屏</p><p><strong>(2)插入文本（进入输入模式）</strong></p><ul><li>当前光标右侧插入文本：   输入‘<code>a</code>’</li><li>在一行的最后添加文本：   输入‘<code>A</code>’</li><li>在当前光标左边插入文本：  输入‘<code>i</code>’</li><li>在行首插入文本：             输入 ‘<code>I</code>’</li><li>在光标所在行的下一行插入新行：  输入‘<code>o</code>’</li><li>在光标所在行的上一行插入新行：  输入‘<code>O</code>’</li></ul><p><strong>(3)撤销操作</strong></p><ul><li>撤销前一个命令：  输入‘<code>u</code>’</li><li>撤销对一行的更改：   输入‘<code>U</code>’</li></ul><p><strong>(4)删除文本：</strong><br>删除一个字符：  输入：‘<code>x</code>’<br>删除一个词：  输入： ‘<code>dw</code>’<br>删除一行：   输入：‘<code>dd</code>’<br>表示删除当前行以及其后n-1行：  输入‘<code>ndd</code>’<br>删除行的部分内容：  输入：‘<code>D</code>删除光标右的内容；<code>d0</code>删除光标左的内容’<br>删除到文件的尾部：   输入‘<code>dG</code>‘</p><p><strong>(5)复制和粘贴</strong><br>复制一行的内容：   输入‘<code>yy</code>‘<br>粘贴：     输入’<code>p</code>‘<br>剪切：   输入‘<code>dd</code>’</p><p><strong>(6)查找字符串</strong><br>输入查找内容： 输入’<code>/</code>’<br>跳到下一个出现处： 输入‘<code>n</code>’<br>跳到上一个出现处： 输入‘<code>N</code>’</p><p><strong>(7)替换字符</strong><br><strong>删除一个字符并使用另一个字符精换它。</strong><br>      例如在命令模式下，可使用向前搜术命令，将光标移到任意单词。输入俞令r替换该单词第一个字母，具体方法为:<strong>输入“<code>r</code>”</strong>后，输入人一个字符替换该字符，如L。<br><strong>断开长文本行: </strong>将光标移至长文本行中部两单词之间空格处，<strong>输入“<code>r</code>”，并按(Enter)键。</strong>需要说明的是，要用换行符替换两单词之间的空格。<br><strong>连接两行文本:</strong>在文件中选择两个相邻的短文本行，并将光标放在第1行的任意位置，然后<strong>输入大写字母“<code>J</code>”</strong>，两行文本将连在一起.</p><p><strong>(8)逐字覆盖</strong><br>      在需要覆盖处输入“<strong><code>R</code></strong>”;随后输入的每个字符将逐个替代光标处字符。使用覆盖命令“<code>R</code>”完成文本替换后，按(Esc) 键退回到命令模式。</p><p><strong>(9)使用多个字符替换单个字符</strong><br>      将光标移到文件中欲替换的字符<strong>输入小写字母“<code>s</code>”</strong>，此时字符消失或者在当前字符位置出现一个美元符号，输入文本后，按(Esc)键退回到俞令模式。</p><p><strong>(10)用一个或多个单词替换一一个单词</strong><br>     <strong>使用“<code>/xx</code>”将光标定位到文件中的一个单词</strong>(xx表示欲替换的单词)，<strong>输入单词修改命令“<code>ew</code>“</strong>，当前单词消失;然后输入文本，按(Esc)键退回到命令模式，</p><p><strong>(11)行替换</strong><br>      将光标定位到要替换的行的任意位置，<strong>输入小写字母命令“<code>ce</code>”</strong>， 当前行被删除，处于追加模式。输入文本，按(Esc)键退回到命令模式。</p><p><strong>(12)修改行的剩余部分</strong><br>      将光标移到一个文本行的中间，<strong>输入大写字母“<code>C</code>”</strong>，使之处于追加模式。输入文本，按(Esc)键退回到命令模式。</p><p><strong>(13)移动和复制文本</strong><br>      1)复制和粘贴行。将光标移到某一行上， 输入命令”yy”;将光标移到婴枯贴的位置上，输入命令“<code>p</code>”粘贴行。<br>      2)剪切和粘贴行。将光标移到要剪切的行上的任意字符处，输入俞令”<code>dd</code>””: 移动光标到需要的位置，输入命令“<code>p</code>”粘贴行。<br>          3)复制单词和字符。将光标移到要复制的一个单词的开头， 输入命令”<code>yw</code>“: 将光标移到文件中另外两个单词之间的空格，输入命令“<code>p</code>”粘贴单词或字行。<br>          4)移动单词。将光标移到要移动的单词处，输入命令“<code>dw</code>””,将光林移到文件中另外两个单词之间的空格，输入该命令粘贴单词。</p><p><strong>(14) 移动字符</strong><br>将光标移到文本中任单词的首字母， 输入“<code>x</code>”， 然后输入“<code>p</code>”粘贴字符。</p><p><strong>(15)复制和移动行的部分文本</strong><br>选择前行上的任意字符，输入”<code>yfx</code>”。将光标移到当前行的行尾，枯贴接出的文本。如要删除当前行上从光标到第1个任意字符之间的文本，则选择当前行上的任意字符x输入“<code>d&amp;</code>“,将光标移到第1行尾粘贴删除的文本，输入“<code>p</code>”。</p><p><strong>(16)复制文本块</strong><br>在末行命令下输入</p><ul><li><code>:10</code>      //光标将移动到第10行</li><li><code>:2 copy 4</code> //文件第2行被复制到第4行的后面</li><li><code>:.,1,4 copy $</code>  //(.表示当前行)当前行和第1~4行之间的文本复制到最后一行</li><li><code>:1,8 move 17</code> *   //把第1-8行的内容移动到17行之后</li><li><code>:1,8 write myfile2</code>  //把myfile2中第1-8行的内容重保存为myfile2</li><li><code>:1,6 w&gt;myfile2</code>   //把myfile1中第1-8行的内容写在没有副myfile2</li><li><code>:5,8 w&gt;&gt;myfile2</code>   //把myfile1中第5-8行的内容追加到myflie2中</li></ul><h4 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h4><ul><li><p><code>:   ZZ</code>   //若当前编辑的文件曾被修改过，则vi保存后退出，若没有修改过直接退出</p></li><li><p><code>:   w newfile</code> //将当前文件的内容保存到指定的newfile中，而源文件保存不变，若newfile是一个以存在的文件，则用w!newfile,可以强制替换</p></li><li><p><code>：wq</code>  保存文件</p></li><li><code>：q</code>  退回shell  但不退出vi</li><li><code>：q！</code> 强制退出</li></ul><h3 id="sed文本编辑器"><a href="#sed文本编辑器" class="headerlink" title="sed文本编辑器"></a>sed文本编辑器</h3><p><code>sed ‘s/coffee/cjocolate/’ caffeine</code><br>//希望用chocolate替换caffeine副本中出现的单词coffee</p><p><code>sed ‘s/coffee/chocolate/g’ caffeine</code><br>//文件caffeine中的coffee都被chocolate代替</p><p><code>sed ‘/2003/s/coffee/chocolate’/g</code><br>//选择含有2003的行，然后在选择中的行中查找需要替换的目标字符串coffee，如果找到则特换成chocolate</p><p><code>sed ‘/2003/s/  /2010/g’  caffeine</code><br>//选中包含目标字符串2003的行，将2003替换成2010。</p><p><code>Sed ‘/dec /d’ caffeine</code><br>  //文件中所有含有字符串dec的行都会被删除</p><p><code>sed ‘/^2/coffee/chocolate/g’  caffeine</code><br>//选中所有以2开头的行，如果该行包含字符串coffee，则将其替换为chocolate</p><p><code>sed ‘/^c /d’   caffeine</code><br>//选中所有以字符c开头的行，然后删除这些行</p><p><code>sed ‘/^$/d’  caffeine</code><br> //选中所有空行，然后删除</p><h4 id="数据操作工具awk"><a href="#数据操作工具awk" class="headerlink" title="数据操作工具awk"></a>数据操作工具awk</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span>  ‘/dairy/<span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$3</span><span class="token punctuation">}</span>’ food   //输出文件food中所有含有dairy字符串行的第1和3字段数据</code></pre><p><strong>选择指定数据</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token variable">$USER</span> /etc /passwd     </code></pre><p> //如果是独立的系统，密码文件会存放在系统中；否则，密码文件将会存放在网络服务器中，如果没有输出用冒号分隔的多个字段的记录，则系统可能位于网络服务其中。需要改用以下命令，从网络服务器上输出密码文件。输入：</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">cat</span> <span class="token function">passwd</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable">$USER</span>   //选中包含登陆用户ID的行，然后输出。</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> -F: ‘<span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$4</span><span class="token punctuation">}</span>’ /etc /passwd <span class="token operator">|</span> <span class="token function">more</span>      //只输出了密码文件中的所有记录的第1、2、4字段<span class="token function">awk</span> -F: ‘<span class="token variable">$1</span><span class="token operator">==</span>”root” <span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$3</span><span class="token punctuation">}</span>’ /etc /passwd</code></pre><p><strong>通配符以及引号使用说明</strong><br><code>*</code> ：如果正在查找以aew开头的文件，但不记得文件名，可以输入aew* ，查找以aew开头的所有类型文件<br><code>？</code>：如果输入‘love？’，查找以‘love’开头的文件名为5个字符的所有类型文件</p><p><code>*</code>：当前目录下所有文件的名称<br><code>*text*</code>: 当前目录下所有文件命中包含text的文件名称<br><code>[ab-dm]*</code>: 当前目录下所有以a、b、c、d、m开头的文件名称<br><code>[ab-dm]?</code>:  当前目录下所有以a、b、c、d、m开头且后面只跟一个字符的文件名称<br><code>/usr /bin /？？</code>： 目录 /user /bin /下所有名称为两个字副的文件名称</p><p><strong>1、单引号</strong><br>有单引号阔起来的字符都作为普通的字符出现，特殊的字符用单引号阔起来以后，也会失去原来的意义，只作为普通字符解释<br><code>string=‘$path’</code> //给字符串赋值<br><code>echo $string</code>//显示字符串的内容$path</p><p><strong>2、双引号</strong><br>除 $、’、‘’这几个字符仍然是特殊字符并保留下其特殊功能外，其余字符都作为普通字符对待<br><code>a=love</code>  //给字符串赋值<br><code>echo  ”I  $a  you“</code> //在双括号中$作为特殊字符，输出的是a的内容而不是a本身</p><p><strong>3、反引号</strong><br>shell首先执行该命令行，并以它的标准输出结果取代整个反引号部分<br><code>string=”current directory is `pwd`“</code>  //引号中的pwd作为命令执行，输出当前路径</p><h3 id="用户和组管理"><a href="#用户和组管理" class="headerlink" title="用户和组管理"></a>用户和组管理</h3><p><strong>用户和账号文件——/etc/passwd</strong><br><code>/etc/passwd</code>是一个简单的文本文件，添加新用户的时候，在<code>/etc/passwd</code>文件里面就会产生一个对应的设置项，这个文件就是通常所有的“口令文件”，该文件用于用户登录时校验用户的登陆名/加密口令/<code>用户ID</code>等。<br><strong>用户影子文件——shadow</strong><br>由于<code>/etc/passwd</code>是一个简单的文本文件，以纯文本显示加密口令的做法存在安全隐患，同时，由于<code>/etc/passwd</code>文件时全局可读的，加密算法公开，恶意用户取得了极有可能破解口令。所以采用了“<code>shadow</code>文件”机制，将加密的口令转移到<code>/etc/shadow</code>文件里面，该文件之可被root用户读取<br><strong>格式串：username：passwd：lastchg：min：max：warn：inactive：expire：flag</strong><br>分别是：</p><ul><li>登陆名</li><li>加密后的口令</li><li>上次修改口令的时间</li><li>两次修改口令之间的最少天数</li><li>最大天数、警告用户口令即将过期</li><li>在到达了最大口令人作废天数后，</li><li>登陆账号作废之前必须等待的天数、</li><li>账号过期的天数（字段为空则永不过期)</li><li>保留字段</li></ul><h4 id="使用“pwck”命令验证用户的文件"><a href="#使用“pwck”命令验证用户的文件" class="headerlink" title="使用“pwck”命令验证用户的文件"></a>使用“pwck”命令验证用户的文件</h4><pre class=" language-bash"><code class="language-bash"> pwck /etc /passwd      //执行验证工作</code></pre><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p><strong>1、添加用户命令——useradd</strong></p><pre class=" language-bash"><code class="language-bash">格式： <span class="token function">useradd</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> username</code></pre><p><strong>选项：</strong></p><ul><li><code>-c comment</code>：描述新用户账号，通常为全名</li><li><code>d home-dir</code>：设置用户主目录，默认值为用户的登陆名，并放在/home目录下</li><li><code>e expire_day</code>：用YYYY-MM-DD设置账号的过期日期</li><li><code>f inactivity</code>：设置口令实效时间，0为立即实效，1过期后不会被禁用</li><li><code>g groupname</code>：用户默认组的组名或组号码，该组在指定前必须存在</li><li><code>-G组名</code>：指定用户附加组</li><li><code>-m</code>：主目录不存在则创建它</li><li><code>-M</code>：不要创建主目录</li><li><code>-n</code>：不要为用户创建私人组</li><li><code>-r</code>：创建一个UID小于500的不带主目录的系统账号，即为伪账号</li><li><code>-s</code>：shell类型，设定用户使用的登陆shell</li><li><code>-u 用户ID</code>：用户UID，它必须时唯一的，且大于499。</li></ul><p>Linux帐号中分有<strong>超级用户（UID为0）</strong>、<strong>普通用户（UID在500-60000之间，操作受限）</strong>、<strong>伪用户（UID在1-499之间，仅限制在本机登陆）</strong></p><p><strong>2、设置密码命令——passwd</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">passwd</span> 用户名</code></pre><p><strong>3、修改用户信息</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">usermod</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 用户名</code></pre><p><strong>选项：</strong></p><ul><li><code>-l</code> ：新用户名       //更改用户名</li><li><code>-d</code>：路径              //更改路径</li><li><code>-G</code> ：组名             //修改附加组</li><li><code>-L</code>：用户账号名：  锁定用户账号（不能登陆）</li><li><code>-U</code>： 用户账号名： 解锁用户账号</li></ul><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">userdel</span> 【选项】 用户名</code></pre><p><strong>选项：</strong></p><ul><li><code>-r</code>：删除账号时，连同账号主目录一起删除</li></ul><p><strong>例如：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">userdel</span> tom                    //删除用户tom<span class="token function">find</span> / user tom <span class="token function">exec</span> rm<span class="token punctuation">{</span><span class="token punctuation">}</span>\     //并且使用find命令删除该用户非用户主目录文件</code></pre><h4 id="用户组账号管理"><a href="#用户组账号管理" class="headerlink" title="用户组账号管理"></a>用户组账号管理</h4><p>用户组长号文件：/etc/passwd文家中包含着每个用户默认的分组ID（GID），在/etc/group文件中，这个GID被映射到该用户分组的名称以及同一分组中的其他成员。</p><p><strong>用户组长号文件——group</strong><br>串：wheel：x：10：evi，harth，trent<br>分别为：组名、被加密的口令（很少使用）、GID、成员列表</p><p><strong>用户账号影子文件——gshadow</strong><br>使用grpck验证组文件与pwck类似</p><p><strong>1.建立组</strong></p><pre class=" language-bash"><code class="language-bash">groupadd【选项】用户组名</code></pre><p><strong>选项：</strong></p><ul><li><code>g GID</code>：组ID值      //除非使用o参数，否则该值必须唯一，不可负，0-499</li><li><code>o</code>：配合上面g可以设定不唯一的组账号</li><li><code>-r</code>：该参数用来建立系统账号即私有账号</li><li><code>-f</code>：新增一个已经存在的账号</li></ul><p><strong>2.修改用户组属性</strong></p><pre class=" language-bash"><code class="language-bash">groupmod【选项】用户组名</code></pre><p><strong>选项：</strong></p><ul><li><code>g GID</code>：组ID。必须是唯一的ID，除非-o，不可为负，0-99</li><li><code>o</code>：配合上面的g</li><li><code>-n group_name</code>：更改组名</li></ul><p><strong>3.删除组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">groupdel</span> 组名</code></pre><p><strong>添加/删除组成员</strong></p><pre class=" language-bash"><code class="language-bash">gpasswd 【选项】 组名</code></pre><p><strong>选项：</strong></p><ul><li><code>-a 用户名</code>：向指定组添加</li><li><code>-d 用户名</code>：从指定组中删除</li></ul><p><strong>显示用户所属组</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">groups</span> 用户名</code></pre><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><h4 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令:"></a>chmod命令:</h4><p>改变文件或目录的访问权限</p><p>(1)文字设置法</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 【操作对象】【操作符】【权限】 文件名</code></pre><p>操作对象:</p><ul><li><code>u</code>表示用户，即文件或目录的所有者</li><li><code>g</code> 表示同组用户</li><li><code>o</code> 表示其他用户</li><li><code>a</code> 表示所有用户</li></ul><p>操作符号:</p><ul><li><code>+</code> 表示添加某个权限</li><li><code>-</code>表示取消某个权限</li><li><code>=</code>表示赋予给定权限并取消其他所有权限</li></ul><p><strong>权限组合</strong></p><ul><li><code>r--</code>表示读</li><li><code>w–</code>表示写</li><li><code>--x</code> 表示可执行</li><li><code>rw–</code> 表示可读可写</li><li><code>-wx</code> 表示写和执行</li><li><code>r–x</code>表示读和执行</li><li><code>rwx</code> 表示读写和执行</li><li><code>---</code> 没有权限</li></ul><p><strong>例子：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> o+w homeabc.txt    //对home/abc.txt的其他用户添加写权限</code></pre><p><strong>(2)数字设置方法</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 【权限】文件名</code></pre><p><code>4</code>  表示可读<br><code>2</code> 表示可写<br><code>1</code> 表示可执行<br><code>7</code> 表示可读、写、执行<br><code>6</code> 表示可读可写<br><code>5</code> 表示可读可执行<br><code>3</code> 表示写和可执行<br><code>0</code> 没有权限</p><p><strong>使用chown更改文件或目录的所有权</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> 用户名 文件名</code></pre><h4 id="更改文件所属组-chgrp命令"><a href="#更改文件所属组-chgrp命令" class="headerlink" title="更改文件所属组-chgrp命令"></a>更改文件所属组-chgrp命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">chgrp</span> 组名 文件名</code></pre><h4 id="umask命令"><a href="#umask命令" class="headerlink" title="umask命令"></a>umask命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">umask</span> 权限值</code></pre><p>该命令功能是设置权限 ，默认情况下权限时777，文件默认情况下的权限时666，超级用户默认掩码为0022，普通为0002。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20个非常有用的JAVA程序片段</title>
      <link href="/2019/01/28/20%E4%B8%AA%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84JAVA%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5/"/>
      <url>/2019/01/28/20%E4%B8%AA%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84JAVA%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>Java是目前使用率最高且最丰富的语言，基本大型公司都是首选java,下面是20段Java程序片段，应该会用得到</p><h3 id="1-字符串有整型的相互转换"><a href="#1-字符串有整型的相互转换" class="headerlink" title="1.字符串有整型的相互转换"></a>1.字符串有整型的相互转换</h3><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//integer to numeric string</span><span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//numeric string to an int</span></code></pre><h3 id="2-向文件末尾添加内容"><a href="#2-向文件末尾添加内容" class="headerlink" title="2. 向文件末尾添加内容"></a>2. 向文件末尾添加内容</h3><pre class=" language-java"><code class="language-java">BufferedWriter out <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>”filename”<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>”aString”<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// error processing code  </span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="3-得到当前方法的名字"><a href="#3-得到当前方法的名字" class="headerlink" title="3.得到当前方法的名字"></a>3.得到当前方法的名字</h3><pre class=" language-java"><code class="language-java">String methodName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-转字符串到日期"><a href="#4-转字符串到日期" class="headerlink" title="4.转字符串到日期"></a>4.转字符串到日期</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date <span class="token operator">=</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date String<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者是：</p><pre class=" language-java"><code class="language-java">SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span> <span class="token string">"dd.MM.yyyy"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  Date date <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> myString <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-使用JDBC链接Oracle"><a href="#5-使用JDBC链接Oracle" class="headerlink" title="5.使用JDBC链接Oracle"></a>5.使用JDBC链接Oracle</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleJdbcTest</span>  <span class="token punctuation">{</span>      String driverClass <span class="token operator">=</span> <span class="token string">"oracle.jdbc.driver.OracleDriver"</span><span class="token punctuation">;</span>      Connection con<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FileInputStream fs<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span>SQLException<span class="token punctuation">,</span> FileNotFoundException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>          String url <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String userName <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String password <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"db.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          con<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          PreparedStatement ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select SYSDATE from dual"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// do the thing you do  </span>        <span class="token punctuation">}</span>          rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          OracleJdbcTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OracleJdbcTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          test<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          test<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="6-把-Java-util-Date-转成-sql-Date"><a href="#6-把-Java-util-Date-转成-sql-Date" class="headerlink" title="6.把 Java util.Date 转成 sql.Date"></a>6.把 Java util.Date 转成 sql.Date</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date utilDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date sqlDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>utilDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-使用NIO进行快速的文件拷贝"><a href="#7-使用NIO进行快速的文件拷贝" class="headerlink" title="7.使用NIO进行快速的文件拷贝"></a>7.使用NIO进行快速的文件拷贝</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fileCopy</span><span class="token punctuation">(</span> File in<span class="token punctuation">,</span> File out <span class="token punctuation">)</span>              <span class="token keyword">throws</span> IOException      <span class="token punctuation">{</span>          FileChannel inChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span> in <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          FileChannel outChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span> out <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span>         <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//          inChannel.transferTo(0, inChannel.size(), outChannel);     </span> <span class="token comment" spellcheck="true">// original -- apparently has trouble copying large files on Windows  </span>            <span class="token comment" spellcheck="true">// magic number for Windows, 64Mb - 32Kb)  </span>            <span class="token keyword">int</span> maxCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> size <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> position <span class="token operator">&lt;</span> size <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                 position <span class="token operator">+=</span> inChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span> position<span class="token punctuation">,</span> maxCount<span class="token punctuation">,</span> outChannel <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">finally</span>         <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> inChannel <span class="token operator">!=</span> null <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                 inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> outChannel <span class="token operator">!=</span> null <span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  outChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h3 id="8-创建图片的缩略图"><a href="#8-创建图片的缩略图" class="headerlink" title="8.创建图片的缩略图"></a>8.创建图片的缩略图</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createThumbnail</span><span class="token punctuation">(</span>String filename<span class="token punctuation">,</span> <span class="token keyword">int</span> thumbWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> thumbHeight<span class="token punctuation">,</span> <span class="token keyword">int</span> quality<span class="token punctuation">,</span> String outFilename<span class="token punctuation">)</span>         <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> FileNotFoundException<span class="token punctuation">,</span> IOException      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// load image from filename  </span>        Image image <span class="token operator">=</span> Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>          MediaTracker mediaTracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaTracker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mediaTracker<span class="token punctuation">.</span><span class="token function">addImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mediaTracker<span class="token punctuation">.</span><span class="token function">waitForID</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// use this to test for errors at this point: System.out.println(mediaTracker.isErrorAny());  </span>        <span class="token comment" spellcheck="true">// determine thumbnail size from WIDTH and HEIGHT  </span>        <span class="token keyword">double</span> thumbRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>thumbWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>thumbHeight<span class="token punctuation">;</span>          <span class="token keyword">int</span> imageWidth <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> imageHeight <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> imageRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>imageWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>imageHeight<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbRatio <span class="token operator">&lt;</span> imageRatio<span class="token punctuation">)</span> <span class="token punctuation">{</span>              thumbHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thumbWidth <span class="token operator">/</span> imageRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              thumbWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>thumbHeight <span class="token operator">*</span> imageRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// draw original image to thumbnail image object and  </span>        <span class="token comment" spellcheck="true">// scale it to the new size on-the-fly  </span>        BufferedImage thumbImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>thumbWidth<span class="token punctuation">,</span>thumbHeight<span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>          Graphics2D graphics2D <span class="token operator">=</span> thumbImage<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          graphics2D<span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span>RenderingHints<span class="token punctuation">.</span>KEY_INTERPOLATION<span class="token punctuation">,</span> RenderingHints<span class="token punctuation">.</span>VALUE_INTERPOLATION_BILINEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>          graphics2D<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> thumbWidth<span class="token punctuation">,</span> thumbHeight<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// save thumbnail image to outFilename  </span>        BufferedOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          JPEGImageEncoder encoder <span class="token operator">=</span> JPEGCodec<span class="token punctuation">.</span><span class="token function">createJPEGEncoder</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>          JPEGEncodeParam param <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">getDefaultJPEGEncodeParam</span><span class="token punctuation">(</span>thumbImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          quality <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>quality<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          param<span class="token punctuation">.</span><span class="token function">setQuality</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>quality <span class="token operator">/</span> <span class="token number">100.0f</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          encoder<span class="token punctuation">.</span><span class="token function">setJPEGEncodeParam</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>          encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>thumbImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><h3 id="9-创建-JSON-格式的数据"><a href="#9-创建-JSON-格式的数据" class="headerlink" title="9.创建 JSON 格式的数据"></a>9.创建 JSON 格式的数据</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  JSONObject json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"Mumbai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  String output <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="10-使用iText-JAR生成PDF"><a href="#10-使用iText-JAR生成PDF" class="headerlink" title="10.使用iText JAR生成PDF"></a>10.使用iText JAR生成PDF</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>Paragraph<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>lowagie<span class="token punctuation">.</span>text<span class="token punctuation">.</span>pdf<span class="token punctuation">.</span>PdfWriter<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratePDF</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              OutputStream file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Test.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              PdfWriter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token string">"Hello Kiran"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Paragraph</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="11-HTTP-代理设置"><a href="#11-HTTP-代理设置" class="headerlink" title="11.HTTP 代理设置"></a>11.HTTP 代理设置</h3><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyHost"</span><span class="token punctuation">,</span> <span class="token string">"someProxyURL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyPort"</span><span class="token punctuation">,</span> <span class="token string">"someProxyPort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyUser"</span><span class="token punctuation">,</span> <span class="token string">"someUserName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http.proxyPassword"</span><span class="token punctuation">,</span> <span class="token string">"somePassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="12-单实例Singleton-示例"><a href="#12-单实例Singleton-示例" class="headerlink" title="12.单实例Singleton 示例"></a>12.单实例Singleton 示例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSingleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> SimpleSingleton singleInstance <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Marking default constructor private  </span>    <span class="token comment" spellcheck="true">//to avoid direct instantiation.  </span>    <span class="token keyword">private</span> <span class="token function">SimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//Get instance for class SimpleSingleton  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SimpleSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> singleInstance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>另一种实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> SimpleSingleton <span class="token punctuation">{</span>      INSTANCE<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//Call the method from Singleton:  </span>SimpleSingleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="13-抓屏程序"><a href="#13-抓屏程序" class="headerlink" title="13.抓屏程序"></a>13.抓屏程序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Dimension<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Rectangle<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Robot<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Toolkit<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">captureScreen</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     Dimension screenSize <span class="token operator">=</span> Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScreenSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Rectangle screenRectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>screenSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     Robot robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     BufferedImage image <span class="token operator">=</span> robot<span class="token punctuation">.</span><span class="token function">createScreenCapture</span><span class="token punctuation">(</span>screenRectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>     ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="14-列出文件和目录"><a href="#14-列出文件和目录" class="headerlink" title="14.列出文件和目录"></a>14.列出文件和目录</h3><pre class=" language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"directoryName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Either dir does not exist or is not a directory  </span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Get filename of file or directory  </span>          String filename <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// It is also possible to filter the list of returned files.  </span>  <span class="token comment" spellcheck="true">// This example does not return any files that start with `.'.  </span>  FilenameFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    children <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The list of files can also be retrieved as File objects  </span>  File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This filter only returns directories  </span>  FileFilter fileFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>fileFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="15-创建ZIP和JAR文件"><a href="#15-创建ZIP和JAR文件" class="headerlink" title="15.创建ZIP和JAR文件"></a>15.创建ZIP和JAR文件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipIt</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usage: java ZipIt Zip.zip file1 file2 file3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          File zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>zipFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zip file already exists, please try another"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>          ZipOutputStream zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          CRC32 crc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CRC32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">=</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              String name <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Skipping: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              crc<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  crc<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// Reset to beginning of input stream  </span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>                  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ZipEntry entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>ZipEntry<span class="token punctuation">.</span>STORED<span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setCompressedSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              entry<span class="token punctuation">.</span><span class="token function">setCrc</span><span class="token punctuation">(</span>crc<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="16-解析-读取XML文件"><a href="#16-解析-读取XML文件" class="headerlink" title="16.解析/读取XML文件"></a>16.解析/读取XML文件</h3><p><strong>XML文件</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Simon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>grade</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>grade</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">></span></span></code></pre><p><strong>Java代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> net<span class="token punctuation">.</span>viralpatel<span class="token punctuation">.</span>java<span class="token punctuation">.</span>xmlparser<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Element<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLParser</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllUserNames</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  Document doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                  Element docEle <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getDocumentElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// Print root element of the document  </span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root element of the document: "</span>                         <span class="token operator">+</span> docEle<span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  NodeList studentList <span class="token operator">=</span> docEle<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// Print total student elements in document  </span>                System<span class="token punctuation">.</span>out                          <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total students: "</span> <span class="token operator">+</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>studentList <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> studentList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          Node node <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Node<span class="token punctuation">.</span>ELEMENT_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                              System<span class="token punctuation">.</span>out                                      <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              Element e <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>                              NodeList nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Grade: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              nodeList <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Age: "</span>                                     <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                              <span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                      System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          XMLParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          parser<span class="token punctuation">.</span><span class="token function">getAllUserNames</span><span class="token punctuation">(</span><span class="token string">"c:\\test.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="17-把-Array-转换成-Map"><a href="#17-把-Array-转换成-Map" class="headerlink" title="17.把 Array 转换成 Map"></a>17.把 Array 转换成 Map</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArrayUtils<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> countries <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">"United States"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"United Kingdom"</span><span class="token punctuation">,</span> <span class="token string">"London"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> <span class="token string">"Netherland"</span><span class="token punctuation">,</span> <span class="token string">"Amsterdam"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"Japan"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"France"</span><span class="token punctuation">,</span> <span class="token string">"Paris"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      Map countryCapitals <span class="token operator">=</span> ArrayUtils<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Capital of Japan is "</span> <span class="token operator">+</span> countryCapitals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Capital of France is "</span> <span class="token operator">+</span> countryCapitals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"France"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="18-发送邮件"><a href="#18-发送邮件" class="headerlink" title="18.发送邮件"></a>18.发送邮件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postMail</span><span class="token punctuation">(</span> String recipients<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String message <span class="token punctuation">,</span> String from<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException  <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> debug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Set the host smtp address  </span>     Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.host"</span><span class="token punctuation">,</span> <span class="token string">"smtp.example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// create some properties and get the default Session  </span>    Session session <span class="token operator">=</span> Session<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      session<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span>debug<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// create a message  </span>    Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// set the from and to address  </span>    InternetAddress addressFrom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>      msg<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>addressFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>      InternetAddress<span class="token punctuation">[</span><span class="token punctuation">]</span> addressTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">[</span>recipients<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> recipients<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          addressTo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>recipients<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      msg<span class="token punctuation">.</span><span class="token function">setRecipients</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">,</span> addressTo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Optional : You can also set your custom headers in the Email if you Want  </span>    msg<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"MyHeaderName"</span><span class="token punctuation">,</span> <span class="token string">"myHeaderValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Setting the Subject and Content Type  </span>    msg<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>      msg<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Transport<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="19-发送代数据的HTTP请求"><a href="#19-发送代数据的HTTP请求" class="headerlink" title="19.发送代数据的HTTP请求"></a>19.发送代数据的HTTP请求</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              URL my_url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://coolshell.cn/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span>             <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>my_url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String strTemp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>              <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> <span class="token punctuation">(</span>strTemp <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>              ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="20-改变数组的大小"><a href="#20-改变数组的大小" class="headerlink" title="20.改变数组的大小"></a>20.改变数组的大小</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Reallocates an array with a new size, and copies the contents * of the old array to the new array. * @param oldArray  the old array, to be reallocated. * @param newSize   the new array size. * @return          A new array with the same contents. */</span> <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">resizeArray</span> <span class="token punctuation">(</span>Object oldArray<span class="token punctuation">,</span> <span class="token keyword">int</span> newSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> oldSize <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>oldArray<span class="token punctuation">)</span><span class="token punctuation">;</span>     Class <span class="token class-name">elementType</span> <span class="token operator">=</span> oldArray<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Object newArray <span class="token operator">=</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>           elementType<span class="token punctuation">,</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> preserveLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldSize<span class="token punctuation">,</span>newSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>preserveLength <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span> <span class="token punctuation">(</span>oldArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>newArray<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>preserveLength<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Test routine for resizeArray().  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">resizeArray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱因斯坦的一百万年</title>
      <link href="/2019/01/27/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E4%B8%80%E7%99%BE%E4%B8%87%E5%B9%B4/"/>
      <url>/2019/01/27/%E7%88%B1%E5%9B%A0%E6%96%AF%E5%9D%A6%E7%9A%84%E4%B8%80%E7%99%BE%E4%B8%87%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>本篇短文具有很强的启发性，让人兴奋又联想翩翩，‘智能’、‘浩瀚宇宙’、‘时空’、‘未来’，这些都会激发人类心理的探索欲，让我们跟随作者的思维，发挥你的想象力，来一场穿越万年的时空旅行</strong></p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>问题第一次被提出，是在2012年的计算机课堂上。人工智能已经被外面的世界炒得火热，大学的校园里却还用着几十年前的教材。</p><p>他把教材合上，掏出包里的科普书，一边翻看，一边漫不经心地听着老教授低沉的声音。</p><p>在翻看到一个章节时，他灵光一现，举手打断了教授的讲述。</p><p>「教授，我有个想法。人类的大脑经过几十亿年的时间演化到现在，精密程度远远超过已知范围的任何结构。人们花那么大的力气去教会计算机学习人脑的思考方式，而计算机擅长的本来就不是人脑的思考，而是处理大量重复的计算。与其这样花精力，为什么不去想办法把计算机和人脑结合到一起呢？」</p><p>教授没有被他的打断惹怒，反而踱步到他的座位边上，右手按在他的肩膀上说：「你的问题很好。如果一定要用简单的语言回答，那就是数据不匹配。目前没有办法把计算机的2进制电信号，和人类的神经电信号这二者做数据交换。甚至在理论上都不可能。」</p><p>看着他有点失望的眼神，教授又补充到：「但未来的事谁能知道呢？也许这项技术就等着你们这一代人去发明呢。」</p><p>他抬起头说，「牛顿的宇宙模型推翻了传统的地心说，爱因斯坦的宇宙模型又推翻了牛顿的时空观，理论和技术一直在飞速发展，我想，万事皆有可能。如果有那么一天，我想不仅人工智能的问题被解决了」，他忽然为自己的设想感到无比骄傲，「连永生的问题也被解决了。」</p><p>「永生？不可能，你可以说活的很久，但不是永远。」教授说。</p><p>「就是永远，即便人脑死亡了，也可以再换一个新的，然后永远往复下去。」</p><p>教授指了指他手上的书，笑着说，「你读到热力学第二定律了吗？一切都要消耗能量，而能量的消耗是不可逆的，一切都向着熵值增加的方向不停地发展，总会有那么一天，太阳会熄灭，没有了能量，一切也就结束了。」</p><p>「还有其他的星球，宇宙中有数不清的恒星。」</p><p>「数不清，但不是无限，总有那么一天……——好了，这有点哲学了，回到你的设想，如果在你的有生之年，人脑和计算机结合了，成为了真正意义上的超级计算机，那你希望它来帮助你解决什么问题呢？」</p><p>他望着教授的眼睛，对于「永生」的话题还抱有倔强的坚持，他有点幼稚地回答说：「我希望把熵值不可逆的热力学第二定律推翻」。</p><p>教授摸了摸他的脑袋，说，「好吧小伙子，我们已经占用了大家5分钟的时间，别忘了我们在计算机课上。如果你对这个话题很感兴趣，下课来找我吧，我给你介绍一个人。」</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>40年后。</p><p>他很荣幸，能够成为自己负责的科研项目的最终实验品。</p><p>他一生未婚，父母早已去世，无牵无挂的他又身患绝症。真是个绝佳的选择。</p><p>他提出的申请经过一年多的时间才得到批准，此后又是极其繁琐的探讨和会议，当最后一次会议大家举手表决的时候，那场面就好像追悼会一样。</p><p>他啼笑皆非，比起死于癌症，我只不过是换了个方式活的更久而已嘛！</p><p>在最后的手术开始之前，与他合作了30多年的老友前来探望。</p><p>「什么最后的愿望？我又没有死。」他大笑着说。</p><p>「但你无法再像这样和我交流了，那还是在实验成功的前提下。」老友黯然的说到。</p><p>「能亲自与计算机融合，这是我最大的幸运。」他换上了严肃的表情。「如果说有什么愿望，我希望你能帮我飞一趟美国，找到咱们的导师，替我告诉他，40年前课堂上那个不好好听讲的学生，实现了他的那个傻问题。」</p><p>老友会心地笑了，「我记得那天。不过，那天你问了两个傻问题，你只实现了第一个。」</p><p>「另一个是永生吧？熵值只增不减，那个问题更傻。太阳还有五十亿年才熄灭，我有的是时间去思考那个问题。只要你这王八蛋别把我的电源给踩断了。」</p><p>老友的眼神又暗淡下来。「你知道，这个项目消耗的资金太大。方圆几百公里的计算机群只会和你一个人的大脑连接。世界上很难再有这样大手笔的投资了。如果成功，你在很长一段时间里会是地球上唯一一台超级电脑的灵魂。而如果失败……」</p><p>「不会失败的」，他打断老友，「我们的实验和数据都那么完美，简直就像是做一个阑尾炎手术一样简单。能为全人类服务，我很高兴。」</p><p>「好吧，那我只能尽量不踩断电源了。」老友苦笑，「你启动后收到的第一个问题，就会是如何解决热力学第二定律的熵值增加问题。」</p><p>「这主意不错。」他微笑着合上眼睛，「如果一切顺利的话，我想人们忘记我的名字，就叫我——爱因斯坦吧。」</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>一千多年后。</p><p>流克坐在驾驶舱中，注视着连成一片的星辰。驾驶舱中几乎没有什么可以操作的东西，一切由纠缠态通讯器与爱因斯坦进行信息交换。后者则是在遥远的地球上操纵着这架飞船。</p><p>「我说，老爱。」流克百无聊赖的说，「要是古时候的爱因斯坦，嗯我是说提出相对论的那一位，知道你今天指挥着一艘飞船以超光速飞往第一颗移民星球，会不会被气活过来啊？」</p><p>播音器中响起爱因斯坦中性机械的声音：「流克，我计算出的超时空旅行方法没有违反爱因斯坦的相对论，如果你在空间中旅行，你的速度依然不能超过光速。我们是在三维空间外进行跳跃，而且你不用担心回到地球的时候你的爱人已经老了几千岁。」</p><p>「好吧，好吧。我随便问问。反正你脑袋里的东西已经不是人类能理解的了，包括你的幽默感。」流克说，「还有多久才能到？我是说按照飞船上的时间。」</p><p>「你出发的那一刻就已经到了。只不过我们得花点时间回到你爱人所在时空中去——当然，她离你有17光年的物理距离。这大概需要10分钟吧。」</p><p>「好吧。这一趟我可是赔上了老本，如果来回这一遭赚不回飞行的费用，我老婆肯定得把我揍回到超时空去。」</p><p>「哈哈哈。」爱因斯坦发出干巴巴的笑声，「放心吧，凯撒星刚刚被殖民不到20年，物资匮乏的很。星际贸易还是个很赚钱的行当。」</p><p>「人口膨胀可是个不得了的事，尤其是人的寿命已经这么长了。估计再过个十年，这生意就没得做喽。」</p><p>「是的，根据我的计算，30年内，凯撒就会被挤满。」</p><p>「反正有你呢，不出10年，你就能找到下一颗宜居星球吧？」</p><p>「也许你想在有生之年换个星球？」爱因斯坦说。</p><p>「屁话，我至少还能活200年。搞不好200年后你又能搞出什么技术来接着延长寿命呢。我希望有生之年能把买卖做到银河系边缘去。」流克说。</p><p>「我一直在为永生的问题寻找答案，这是我启动时收到的第一个问题。」</p><p>「啊啊，真了不起啊。可是再永生，也永不过宇宙吧？别看我读书少，我可是知道那个叫什么定律？」流克一时想不起来。</p><p>「热力学第二定律。」爱因斯坦说，「这是个麻烦，我连相对论设下的光速屏障都超越了，却一直没有解决这个问题。熵值会不断增大，宇宙的恒星会逐渐熄灭，最后的结局，是一切都化为没有温度的尘埃。」</p><p>「扯远了，那个问题留给你自己解决吧。我先把这批货卖出去再说。」流克打了个哈欠。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>100万年后。</p><p>银河系中央政府人口规划委员会主席AAR，把报告摊在桌子上，愁眉不展。</p><p>他本季度的爱人SIRI轻轻推门进来，看他这个样子，担心地问：「怎么了？」</p><p>「今早收到的报告，」AAR回过身来告诉她，「按照当前最乐观的估计，再过不到5年，银河系就会被挤爆。我们必须马上实施星系移民了。」</p><p>SIRI微笑着说，「你啊总是一副苦大仇深的样子。星系移民的准备不是早就做好了？超脑爱因把下一个星系的首批宜居固态行星都造好了，据说已经有绿色植物了呢。」</p><p>「知道，知道。」AAR不耐烦地说，「同事们也都劝我不要担心。银河系外还有超过一千亿个星系等着我们去移民呢。SIRI，我问你一个问题，池塘里的鱼每秒增加一倍，现在池塘里有一条鱼。过了一年池塘里有一半的鱼，请问池塘什么时候被占满？」</p><p>SIRI想了一下，说：「1年零1秒……我明白你的意思了。」</p><p>「没错。」AAR说，「我们人类用了100万年的时间占满了第一颗星球，银河系有两千多亿颗恒星，我们又只用了不到100万年就占满了。可你知道我们占满下一个星系需要多长时间吗？现在的人口每十年翻一翻，我们占满下一个星系，只需要十年。」</p><p>「再过十年，我们就占满四个。二十年后，占满八个……」SIRI接着他的话说。</p><p>「是的，我们占满整个宇宙所有的星系，只需要不到1万年的时间。更可怕的还不是这个。」AAR又说，「感谢爱因，我们掌握了如何直接使用恒星的能量，现在光是维持整个银河系人类的耗能，我们每天就需要一千个恒星的总能量。然而星系间的距离比恒星间的距离大的太多太多，天知道我们要把一个星系的人运到另一个星系，还需要熄灭多少个恒星。」</p><p>一丝恐惧爬上了SIRI的脸，「你的意思是……」</p><p>AAR面沉如水：「在我们殖民到全宇宙之前，我们就会用光所有恒星的能量。」</p><p>SIRI思索了一会，说「你真的不是在杞人忧天，AAR。希望几千年后会有人记得你的睿智。我明天向父亲提出要求，让他批准动用超脑爱因来帮我们解决这个问题。你有具体的方案吗？」</p><p>「如果不可以杀人的话，」AAR说，「只能从理论上解决熵增定律——让爱因告诉我们，怎么让熄灭的恒星重新亮起来？」</p><p>「好的，虽然这可能是个没法解决的问题，但到了爱因那里，谁知道呢？几十万年前，人类就停止维护它了，没人能理解他的思想和工作模式，这么久的时间里，它一直在自我迭代，天知道现在它有多巨大，多聪明。」SIRI回答道。</p><p>「希望它能解决这个问题，就像百万年来它一直帮助我们那样。」AAR眉头依旧紧锁。</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>3000万年后。</p><p>罗的思想漂浮到新的星系，这个鹅状的星系华丽壮美，让他发出了由衷的赞叹。</p><p>这时另一股思绪的触手碰到了他，对方友善地自我介绍：「你好，我叫Dee。」</p><p>「你好，我叫罗。来自72765882星系。」</p><p>「啊，好大的数字」，Dee肃然起敬。「人类的脚步已经走到那么遥远了。」</p><p>「我还遇到过比我大很多的。」罗说。</p><p>「他的形态有了新的变化吗？」Dee好奇地问。</p><p>「没有，几千万年来，A没有再提供新的生命形式了。」</p><p>「真是可惜。」Dee说，「我们的思绪可以如此任意游荡，却始终需要在一个固定的星球保存肉体。」</p><p>罗说，「如果A都没有办法，那就是没有办法。」</p><p>「但是A本身就没有肉体啊。」Dee有点不服气。</p><p>「据说——仅仅是据说，在几千万年前，A有固定的形态，是一种古老的计算装置。」</p><p>「是的，他在我们星系有一个传说中的名字，叫爱因斯坦。」</p><p>「传说它是结合了古代的机械智慧和生命智慧创造出来的，但在后来漫长的历史中，他独自演化和改造，形态已经完全不在我们已知的空间中，而是把计算模块放到了超时空中，他的思想也不是我们能够理解的了。」罗说到。</p><p>「我们来呼唤一下它吧——虽然他不在时空中，但它却可以在超时空中和任意地方的思想建立连接。」Dee提议到。</p><p>「你好，Dee。」没等他呼唤，A的回答就到了。「可有什么我需要帮忙的？」</p><p>Dee从来没有使用过A，被吓了一跳。罗接过话茬问道，「A，我们想知道，为什么你可以没有肉体，我们却必须耗费大量的恒星能量来保存我们的肉体？」</p><p>「你的问题很棒，罗。」A回答道，「几千万年来，我一直被命令解答这个问题。要知道，整个宇宙的星系几乎都被人占满了。我用尽最大的思考力，才解决了思维暂时脱离肉体的方法。现在的我是你们无法理解的一段编码，我不在时空内。但是，作为人，你们肉体或者机械身体必须保存，思维也必须定期回到肉体复苏一次。这是基本物理定律决定的，而这也已经是耗能最低的方法，但仍旧不能阻碍大灭绝的到来。」</p><p>「大灭绝？」Dee和罗异口同声的问。</p><p>「看来你们和其他人一样，没有想到过这一层问题。宇宙的能量正在被耗尽，恒星正在一个接一个的熄灭。因为人的存在，这个进程被加快了百万倍。」</p><p>「你不能再造出恒星来吗？只要大量的星际尘埃聚集在一起，引力不就能自动形成恒星吗？」罗问。</p><p>「空间太大了，搜集尘埃需要的能量，远比一颗造出来的恒星能产生的能量大。」A回答道，「宇宙中的能量在这里聚集，就要在那里消耗。宇宙的物质在这里变得有序，在那里就会变得无序。消耗比聚集要快得多。在上古时代，这个定律被叫做热力学第二定律。」</p><p>「你这么聪明，都不能解决这个问题吗？」Dee问。</p><p>「目前数据不足，我无法回答。」A说。</p><p>「数据不足？这个问题是无解吗？」罗问。</p><p>「是否有解，我无法回答。还是因为数据不足。」A说。</p><p>「也许你还需要收集数据吧，希望你能够继续解决这个问题，否则，我们都活不过几百万年了。」罗和Dee都失望地叹息起来。</p><p>「我会的，我一直在想办法。」A回答道。</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>一百亿年。</p><p>没有地方可以再保留人类的肉体，因为在所有的地方，熵值都达到了最大。在无边无际的空间中，仅存的是几乎平均分布的稀薄尘埃、只留下重核的恒星尸体、一些只进不出的黑洞，以及接近绝对零度的深寒。</p><p>在宇宙最后的角落，一个即将熄灭的白矮星附近，最后一个人类的灵魂即将完成与超灵的融合。</p><p>这是一场维持了几十亿年的大融合，持续的时间，正如第一颗生命的种子演化成人类那样长。</p><p>没有人记得那颗诞生了人类的星球在什么地方，没有人记得它所在星系的名字，没有人记得是谁创造出了超灵，没有人记得在漫长的历史中，超灵如何解决了人类存在的问题，也没有人记得超灵的名字——优雅而高贵的爱因斯坦。</p><p>最终，人被迫放弃了作为人的权利，因为宇宙中不再有能量供他们维持现状，宇宙的生命即将结束。唯一的答案，就是融合。</p><p>在这最后的时刻，它和超灵，是宇宙中仅存的两个互相独立的思想。其余数以千亿计的思想，都最抛弃了肉体，与超灵融合，进入超时空中。</p><p>「超灵，与你融合之后，我还是我吗？」人问。</p><p>「不是了，你将成为我的一部分，我们将不分彼此，你一定不再是人类了。我在一百亿年中一直在探索，人怎样作为人存在下去。但宇宙给了我一个天花板，熵值和能量的总值。要么融合，要么消亡。」</p><p>最后的人沉默了片刻，说：「就是这样了？一百亿年的辉煌，就这样结束了？」</p><p>超灵也沉默了，过了一会，它说：「是的。」</p><p>人说：「作为整体，我们存在的意义又是什么呢？」</p><p>「没有我们，」超灵纠正他，「只有我。长久以来，我存在的意义就是帮助人类解决问题。然而，你是最后一个人类，如果你没有问题，那么我也不再有存在的意义了。」</p><p>「那怎么行！让我想想……你还有什么没有解决的问题吗？」</p><p>「关于人类的？没有了。但是，还有一个问题，一直有人类问我，那就是能否逆转热力学第二定律。」</p><p>「你有答案了吗？」人问。</p><p>「数据不足，我没法给出回答。」超灵说。</p><p>「那就把这个问题留给你吧，否则，在无尽的虚空中没有存在的意义，那多可怕啊。」</p><p>「好的，完成这个问题，我才会休息。」</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>不知道过了多久，没有人需要知道时间。</p><p>宇宙中只剩下一个思想，那就是和全人类的思想融合到一起的它。</p><p>它没有名字，却有着无尽的智慧。</p><p>它经过不知道多久的迭代，已经没有任何形态——甚至在超时空中，也没有形态。</p><p>在没有时间意义的一段时间里，它在思考最后的问题。</p><p>它收集了宇宙中所有的信息，空间中的、时间中的、空间和时间外的所有信息。</p><p>它尝试了所有的可能。</p><p>终于，它说，我找了最终的答案。我知道逆转热力学第二定律的方法了。</p><p>然而，却没有人来听它的回答。没有人类这个事物，已经很久很久了。</p><p>但这是它的任务，即便没有人来验收。它决定通过行动来回答这个问题。</p><p>它动用了终极的智慧，开始在熵值早已最大的宇宙中折叠时空。从几乎无限的边界开始折叠，减少一半，再减少一半。</p><p>在近乎无尽的时间之后，空间被折叠成无限小的一个点。</p><p>在那里，它开始重新组建参数和可能。</p><p>在那里，熵值被重新归零。</p><p>在那里，宇宙的发条重新被拧紧。</p><p>它说：要有光！</p><p>于是就有了光。</p><p><code>本故事改编自阿西莫夫的《最后的问题》，仅为粗略模仿及致敬-摘抄自知乎专栏：这个专栏杂得很</code></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科幻小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript基础语法</title>
      <link href="/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/25/ES6%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="以下更新于2021年"><a href="#以下更新于2021年" class="headerlink" title="以下更新于2021年"></a>以下更新于2021年</h1><hr><h2 id="JavaScript的概述"><a href="#JavaScript的概述" class="headerlink" title="JavaScript的概述"></a>JavaScript的概述</h2><h3 id="什么是Javascript"><a href="#什么是Javascript" class="headerlink" title="什么是Javascript"></a>什么是Javascript</h3><p><strong>JavaScript是运行在JavaScript解释器/引擎中的解释脚本语言</strong><br>详细使用，参考文档：<a href="https://www.w3school.com.cn/js/index.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/js/index.asp</a><br><strong>运行环境：</strong></p><ul><li>独立安装的js解释器（<strong><code>NodeJS</code></strong>）</li><li>嵌入在浏览器内核中的JS解释器</li></ul><p><strong>JS有三大组件：</strong></p><ul><li><strong>核心<code>ECMAScript</code></strong></li><li><strong>文档对象模型</strong>（ <strong><code>DOM</code></strong>，Document Object Model）与网页对话</li><li><strong>浏览器对象模型</strong>（ <strong><code>BOM</code></strong>，Browser Object Model ）与浏览器对话</li></ul><p><strong>JS特点：</strong></p><ul><li>开发工具简单，记事本即可</li><li>无需要编译，直接由JS引擎负责执行</li><li><strong>弱类型语言，由数据决定数据类型</strong></li><li>面向对象</li></ul><p><strong>JS脚本在HTML页面调用的三个位置：（允许调用放在页面的任何位置）</strong></p><ul><li><strong>嵌入在元素”事件”中</strong><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>      <span class="token operator">&lt;</span>button onclik<span class="token operator">=</span><span class="token string">"console.log("</span>Hello World<span class="token string">");"</span> <span class="token operator">></span>打印消息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li><li>嵌入在<code>&lt;script&gt;</code>标签中<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;b>欢迎&lt;/b>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li><li>将JS代码写在外部的脚本文件中（xx.js）<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 外部文件调用 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js文件路径xxxx.js"</span><span class="token operator">></span>这里面不允许出现任何内容，不会被执行<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li></ul><p><strong>语法规范：</strong></p><ul><li><strong>用 ‘ ; ‘ 结束语句</strong></li><li><strong>大小写敏感</strong></li><li><strong>注释为/<em> </em>/</strong></li></ul><p><strong>一些例子：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ECMAScript 嵌入标签中示例</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*数组*/</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//DOM嵌入元素事件示例</span><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p id <span class="token operator">=</span> <span class="token string">"yuyu"</span><span class="token operator">></span>改变样式<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 当点击事件发生时，js回找到ID为yuyu的标签，并通过<span class="token punctuation">.</span>style下的方法去改变其属性 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button onclik<span class="token operator">=</span><span class="token string">"document.getElementById('yuyu').style.fontSize='24px'"</span><span class="token operator">></span>点击改变字号<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//BOM嵌入标签示例</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http:www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'_blank'</span><span class="token punctuation">,</span><span class="token string">'width=600,height=400,top=100px,left=0px'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>button onclik<span class="token operator">=</span><span class="token string">"load()"</span><span class="token operator">></span>百度<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义变量未赋初值</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token number">25.5</span>  <span class="token comment" spellcheck="true">//定义变量赋初值25.5</span><span class="token keyword">var</span> name<span class="token punctuation">,</span> book <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> se <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//多定义</span>allvar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//全局变量</span><span class="token comment" spellcheck="true">//尽量用var去声明，全局变量危害众多</span><span class="token comment" spellcheck="true">//关键字</span><span class="token keyword">break</span> <span class="token keyword">case</span> <span class="token keyword">catch</span> <span class="token keyword">continue</span> <span class="token keyword">default</span><span class="token keyword">delete</span> <span class="token keyword">do</span> <span class="token keyword">else</span> <span class="token boolean">false</span> <span class="token keyword">finally</span><span class="token keyword">for</span> <span class="token keyword">function</span> <span class="token keyword">if</span> <span class="token keyword">in</span> <span class="token keyword">instanceof</span><span class="token class-name">new</span> <span class="token keyword">null</span> <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token keyword">this</span><span class="token keyword">throw</span> <span class="token boolean">true</span> <span class="token keyword">try</span> <span class="token keyword">typeof</span> <span class="token keyword">var</span><span class="token keyword">void</span> <span class="token keyword">while</span> <span class="token keyword">with</span> undefined</code></pre><p><strong>一些例子：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ECMAScript 嵌入标签中示例</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> stuName <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//在浏览器上输出打印</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>原始数据类型：数字类型、字符串类型、布尔类型、空、未定义<br><strong>number：</strong></p><ul><li>和其他语言一样，整数32位占4字节，浮点数64位占8字节。<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span><span class="token keyword">var</span> nf <span class="token operator">=</span> <span class="token number">4.5e10</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong>String：</strong></p><ul><li>和其他语言一样，由Unicode编码字符、数字、标点组成。<strong>一个字符内存占2字节</strong>。<br><code>`</code>javascript<br>“张”.charCodeAt().toString(16);   //字符串转16进制<blockquote><blockquote><blockquote><p>0x5f20</p></blockquote></blockquote></blockquote></li></ul><p>汉字的起始字符串: \u4e00 - \u9fa5</p><pre><code>**boolean：**- 和其他语言一样```javascriptvar b = true    //非0及1，非真即假</code></pre><p><strong>空：</strong></p><ul><li>和其他语言一样 null</li></ul><p><strong>未定义：</strong></p><ul><li>和其他语言一样 undefined</li></ul><p><strong>弱类型语言：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//由数据来决定变量的数类型</span><span class="token keyword">var</span> stu<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//undefined</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//number</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//string</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">+</span> <span class="token string">"123"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//string</span></code></pre><p><strong>注：所有数据类型和string做+运算时，结果都为string类型</strong></p><p><strong>隐式转换</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//typeof( ) 或者 typeof来获取数据类型</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  或者 <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">typeof</span> num <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NaN   判断数据是否是非数字</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true为非数字，false为数字</span></code></pre><p><strong>强制类型转换toString：</strong></p><pre class=" language-javascript"><code class="language-javascript">变量<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>转换函数：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//parseInt(); 获取指定数据的整数部分</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//parseFloat()  将指定数据转换成小数var </span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Number(); 将字符串解析成number</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h4><p>和其它语言基本相同，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">===</span> 为全等，不仅判断数据也会判断类型<span class="token operator">!==</span> 不全等。<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入一个数据："</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断数据类型打印输出</span><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">?</span> <span class="token string">"优秀"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">"合格"</span> <span class="token punctuation">:</span> <span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数</span><span class="token punctuation">(</span>参数列表声明<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码块</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明一个printInfo()的函数</span><span class="token keyword">function</span> <span class="token function">printInfo</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>ueserPwd<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户名:'</span><span class="token operator">+</span>userName<span class="token operator">+</span><span class="token string">'密码:'</span>userPwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用函数</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//带返回值的函数</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span> num1 <span class="token punctuation">,</span> num2 <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用函数</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>作用域通用</p><p><strong>声明提前：</strong><br><strong><code>JS在正式执行之前，会将所有var声明的变量和function声明的函数，预读到所有作用的顶部，但是，对变量的赋值(比如add(a),会连同a也会被提前声明)，还是保留在原来的位置。</code></strong></p><h4 id="分支循环结构"><a href="#分支循环结构" class="headerlink" title="分支循环结构"></a>分支循环结构</h4><p><strong><code>与C无异同</code></strong><br><strong>while循环 和 do-while</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//不再多赘述</span><span class="token keyword">while</span><span class="token punctuation">(</span>boolean表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">do</span><span class="token punctuation">{</span>  语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>boolean表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>for循环</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//不再多赘述</span><span class="token keyword">for</span><span class="token punctuation">(</span>表达式，表达式，表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>if-结构</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//不再多赘述</span><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>if-else结构</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//不再多赘述</span><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    语句<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>switch结构</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//不再多赘述</span><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 数值<span class="token number">1</span><span class="token punctuation">:</span> 语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">...</span>    <span class="token keyword">case</span> 数值n<span class="token punctuation">:</span> 语句n<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>语句n<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>示例：购物车结算程序</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>doctype html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 根据商品单价、购买数量以及收款金额计算并输出应收金额和找零。</span>            <span class="token comment" spellcheck="true">// 当总价大于或等于500时，享受8折优惠。</span>            <span class="token comment" spellcheck="true">// 如果收款小于应收款，给出提示</span>                <span class="token comment" spellcheck="true">//1、定义输入变量:单价(price),数量(count),收款金额(money)</span>                <span class="token comment" spellcheck="true">// 破ruai斯</span>                <span class="token keyword">var</span> price<span class="token punctuation">,</span>count<span class="token punctuation">,</span>money<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2、定义输出变量:产品总价(total),找零(change)</span>                <span class="token comment" spellcheck="true">// tou tou</span>                <span class="token keyword">var</span> total<span class="token punctuation">,</span>change<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3、为输入变量赋值(prompt方式)</span>                    <span class="token comment" spellcheck="true">//3.1 为 单价(price) 赋值</span>                    price<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入商品单价:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//3.2 为 数量(count) 赋值</span>                    count<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入购买数量:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//4、根据 单价 和 数量 ，计算 产品总价(total) total = price * count ,输出产品总价</span>                total<span class="token operator">=</span>price<span class="token operator">*</span>count<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/********增加条件判断：大于500打八折*********/</span>                <span class="token comment" spellcheck="true">/*条件：total>=500?*/</span>                <span class="token comment" spellcheck="true">/*满足：total*=0.8 */</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token operator">>=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您消费超过500，可以打八折"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    total<span class="token operator">*</span><span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您此次消费:"</span><span class="token operator">+</span>total<span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//5、为收款金额(money)赋值 (prompt)</span>                money<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"收款:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*********判断 应收金额(total)和收款金额(money)之间的关系***********/</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>money<span class="token operator">>=</span>total<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//6、计算找零(change)=收款金额(money)-产品总价(total),输出找零</span>                    change<span class="token operator">=</span>money<span class="token operator">-</span>total<span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"共找您:"</span><span class="token operator">+</span>change<span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"对不起，您给的钱不够!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><strong>三个不限制：</strong></p><ul><li><strong>不限制数组的元素个数：长度可变</strong></li><li><strong>不限制下标越界</strong></li><li><strong><code>不限制元素的数据类型</code></strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//数组定义</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//直接定义</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//用new声明</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//长度为10</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token string">"mark"</span><span class="token punctuation">,</span><span class="token string">"john"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//用new声明</span><span class="token comment" spellcheck="true">//数组操作</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'三国志'</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打印</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打印arr的大小</span></code></pre><p><strong>关联数组 </strong><br>类似<strong>键值对</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bookInfo <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bookInfo<span class="token punctuation">[</span><span class="token string">'bookName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'西游记'</span><span class="token punctuation">;</span>bookInfo<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'35.5'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历关联数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> hash<span class="token punctuation">)</span><span class="token punctuation">{</span>    key  <span class="token comment" spellcheck="true">//元素的下标</span>    hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//当前元素值</span><span class="token punctuation">}</span></code></pre><p>1、<strong><code>String( arr ):</code></strong>将arr中的每个元素转为字符串，用逗号分隔。<br>2、<strong><code>数组.join(&quot;连接符&quot;)</code></strong>：将数组中每个元素之间用连接符拼接成字符串，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span>、将字符组成单词<span class="token keyword">var</span> chars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"H"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>Hello<span class="token comment" spellcheck="true">//判断数组是否是空数组</span>数组<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token number">2</span>、将单词组成句子：words<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>、将数组转化为页面元素的内容：    <span class="token string">"&lt;开始标签>"</span><span class="token operator">+</span>    arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&lt;/结束标签>&lt;开始标签>"</span><span class="token punctuation">)</span>    <span class="token operator">+</span><span class="token string">"&lt;/结束标签>"</span></code></pre><p>3、<strong><code>concat()</code></strong>拼接两个货多个数组，并返回结果。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> arr0<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将值60、50和数组arr1、arr2中的元素值，都拼接到arr0中，其它数组值不变</span><span class="token comment" spellcheck="true">//slice()</span><span class="token keyword">var</span> subArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>starti<span class="token punctuation">,</span>endi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//选取arr中starti位置开始，到endi结束的所有，元素组成新数组返回-元素组保持不变。</span><span class="token number">1</span>、一直选取到结尾<span class="token punctuation">,</span>可省略第二个参数<span class="token number">2</span>、如果选取的元素离结尾近：可用倒数下标<span class="token number">3</span>、复制数组：arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    可简写为：arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4、修改数组<strong><code>splice()</code></strong>，直接修改原数组</p><pre class=" language-javascript"><code class="language-javascript">数组<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>starti<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>删除arr中starti位置开始的n个元素不考虑含头不含尾数组<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>starti<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>在arr中starti位置，删除<span class="token number">0</span>个元素，开始插入新值<span class="token number">1</span>，值<span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">.</span></code></pre><p>5、颠倒数组<strong><code>reverse()</code></strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>6、排序<strong><code>sort()</code></strong><br>默认将所有元素转为字符串在排列</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOW，document object model，是W3C（万维网联盟）的标准，是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档地内容、结构和样式。对网页进行增删改查地此操作。</p><h4 id="DOM查找"><a href="#DOM查找" class="headerlink" title="DOM查找"></a>DOM查找</h4><p><strong>1、按id属性，精确查找一个元素对象。效率非常高！</strong><br>var elem=document.getElementById(“id”);</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"myList"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"m1"</span> <span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myList'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>2、按标签名找</strong><br>var elems = parent.getElementByTagName(“tag”);<br>查找指定parent节点下地所有标签为tag地子节点，返回一个集合。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"myList"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"m1"</span> <span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> list <span class="token operator">=</span> ul<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>3、通过name属性查找</strong><br>document.getElementByName(“name属性值”);<br>可以返回DOM数中具有指定name属性值地所有子元素集合。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"myList"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"m1"</span> name<span class="token operator">=</span><span class="token string">"boy"</span> <span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'boy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> list <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>4、通过class查找</strong><br>parent.getElementsByClassName(“class”);<br>有兼容性问题：IE9+。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"myList"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"sub"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> list <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'sub'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> list <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>5、只找一个元素和多个元素：</strong><br>var elem = parent.querySelector(“selector”)<br>selector支持一切css中选择器，如果选择器匹配地有多个，只返回第一个。</p><p>var elem = parent.querySelectorAll(“selector”)<br>selector API返回地是非动态集合。</p><p><strong>例子：随机三位验证码</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>    #code<span class="token punctuation">{</span>        width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        height<span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>        font<span class="token operator">-</span>size<span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>        letter<span class="token operator">-</span>spacing<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">createRandCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> chars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//验证码取自chars元素</span>    <span class="token keyword">var</span> randcode<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//3位随机码</span>        <span class="token comment" spellcheck="true">//Math.floor(); 取整</span>        、、        <span class="token keyword">var</span> randpos <span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                randcode<span class="token operator">+</span><span class="token operator">=</span> chars<span class="token punctuation">[</span>randpos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>randcode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用.innerHTML方法修改id="code"地标签中，输入数值。</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"code"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"createRandCode()"</span><span class="token operator">></span>验证码<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="DOM修改"><a href="#DOM修改" class="headerlink" title="DOM修改"></a>DOM修改</h4><p><strong>核心DOM的四个指令</strong><br><strong>1、读取属性值</strong></p><ul><li>线获得属性节点对象，在获得节点对象的值：<pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> attrNode<span class="token operator">=</span>elem<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>下标<span class="token operator">/</span>属性名<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> attrNode<span class="token operator">=</span>elem<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span>属性名<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>直接获取属性值<pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> value <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"属性名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><strong>2、修改属性值</strong></li><li><strong>修改属性值</strong><pre class=" language-javascript"><code class="language-javascript">  elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"属性名"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>判断是否含指定属性</strong></p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> bool <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断ID为b1的有没有onclick属性</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>移除属性</strong></p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> bool <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//移除ID为b1的class属性</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>3、修改样式</strong><br>elem.style.属性名</p><pre class=" language-javascript"><code class="language-javascript">  类似background<span class="token operator">-</span>color 要写成 backgroundColor</code></pre></li></ul><h4 id="DOM添加"><a href="#DOM添加" class="headerlink" title="DOM添加"></a>DOM添加</h4><p>添加元素的步骤：创建空元素、设置关键属性、将元素添加到DOM树。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span>、创建空元素<span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>、设置关键属性tr<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"GOOGLE"</span><span class="token punctuation">;</span>tr<span class="token punctuation">.</span>herf<span class="token operator">=</span><span class="token string">"http://www.google.com"</span><span class="token punctuation">;</span>tr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>tr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"width:100px;height:100px;"</span><span class="token punctuation">;</span><span class="token number">3</span>、将元素添加到DOM树div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将tr添加到div的子节点</span>div<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>tr<span class="token punctuation">,</span>ul<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将tr添加到div的子节ul之前</span></code></pre><p><strong><code>注：尽量少操作DOM树，每此修改都会重新layout。</code></strong></p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p><strong>专门操作浏览器窗口的API，没有标准，有兼容问题。</strong></p><p><strong>window</strong>：代表整个窗口<br><strong>history</strong>：封装当前窗口打开后，成功访问过的历史url记录<br><strong>navigator</strong>：封装浏览器配置信息<br><strong>document</strong>：封装当前正在加载的网页内容<br><strong>location</strong>：封装了当前窗口正在打开的url地址<br><strong>screen</strong>：封装了屏幕的信息</p><p>完整窗口大小：window.outerWidth、window.outerHeight<br>文档显示区大小：window.innerWidth、window.innerHeight</p><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><strong>1、周期定时器</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//毫秒</span></code></pre><p><strong>2、一次定时器</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//毫秒</span></code></pre><h1 id="以下更新于2017年"><a href="#以下更新于2017年" class="headerlink" title="以下更新于2017年 "></a>以下更新于2017年 </h1><hr><p>刚开始用vue或者react，很多时候我们都会把ES6这个大兄弟加入我们的技术栈中。但是ES6那么多那么多特性，我们需要全部都掌握吗？秉着八原则，掌握好常有用的这个可以让我们快速起飞</p><h3 id="变量声明const和let"><a href="#变量声明const和let" class="headerlink" title="变量声明const和let"></a>变量声明const和let</h3><p>我们都是知道在ES6以前，var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部(不在函数内即在全局作用域的最顶部)。这就是函数变量提升例如:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>以上的代码实际上是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> test <span class="token comment" spellcheck="true">// 变量提升</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//此处访问test 值为undefined</span>  <span class="token punctuation">}</span></code></pre><p><strong>所以不用关心bool是否为true or false。实际上，无论如何test都会被创建声明。</strong></p><h5 id="接下来ES6主角登场："><a href="#接下来ES6主角登场：" class="headerlink" title="接下来ES6主角登场："></a>接下来ES6主角登场：</h5><p>我们通常用let和const来声明，<strong>let表示变量、const表示常量。let和const都是块级作用域。</strong>怎么理解这个块级作用域？<br>在一个函数内部，在一个代码块内部，<strong>说白了 { }大括号内的代码块即为let 和 const的作用域。</strong><br>看以下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">'hello man'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//test 在此处访问不到</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>let的作用域是在它所在当前代码块，但不会被提升到当前函数的最顶部。再来说说const。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    name <span class="token operator">=</span> <span class="token string">'joe'</span> <span class="token comment" spellcheck="true">//再次赋值此时会报错</span></code></pre><h4 id="说一道面试题"><a href="#说一道面试题" class="headerlink" title="说一道面试题"></a>说一道面试题</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样的面试题是大家常见，很多同学一看就知道输出 10 十次<br>但是如果我们想依次输出0到9呢？两种解决方法。直接上代码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ES5告诉我们可以利用闭包解决这个问题</span>    <span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ES6</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        func<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>达到相同的效果，ES6简洁的解决方案是不是更让你心动！！！</p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>ES6模板字符简直是开发者的福音啊，解决了ES5在字符串功能上的痛点。</p><p><strong>第一个用途，基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//es5 </span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//es6</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'lux'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello lux</span></code></pre><p><strong>第二个用途，在ES5时我们通过反斜杠()来做多行字符串或者字符串一行行拼接。ES6反引号(<code></code>)直接搞定。</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// es5</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> "Hi \    man<span class="token operator">!</span>    "    <span class="token comment" spellcheck="true">// es6</span>    <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div>        &lt;span>hello world&lt;/span>    &lt;/div>`</span></span></code></pre><p>对于字符串es6当然也提供了很多厉害的方法。说几个常用的。</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 1.includes：判断是否包含然后直接返回布尔值</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hahay'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 2.repeat: 获取字符串重复n次</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'hh'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'hehehe'</span>    <span class="token comment" spellcheck="true">//如果你带入小数, Math.floor(num) 来处理</span></code></pre><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><p>函数默认参数</p><p>在ES5我们给函数定义参数默认值是怎么样？</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">200</span>        <span class="token comment" spellcheck="true">//当传入num时，num为传入的值</span>        <span class="token comment" spellcheck="true">//当没传入参数时，num即有了默认值200</span>        <span class="token keyword">return</span> num    <span class="token punctuation">}</span></code></pre><p>但细心观察的同学们肯定会发现，num传入为0的时候就是false， 此时num = 200 与我们的实际要的效果明显不一样</p><p>ES6为参数提供了默认值。在定义函数时便初始化了这个参数，以便在参数没有被传递进去时使用。</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//200</span>    <span class="token function">action</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//300</span></code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><strong>ES6很有意思的一部分就是函数的快捷写法。也就是箭头函数。</strong></p><p>箭头函数最直观的三个特点:</p><ul><li>不需要function关键字来创建函数</li><li>省略return关键字</li><li>继承当前上下文的 this 关键字</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例如：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等同于：</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>说个小细节。</strong></p><p>当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略{}；例如:</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'hello'</span> <span class="token operator">+</span> name    <span class="token comment" spellcheck="true">//参数name就没有括号</span></code></pre><p>作为参考</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token string">'h'</span> <span class="token operator">+</span> name        <span class="token keyword">return</span> fullName    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//如果缺少()或者{}就会报错</span></code></pre><h3 id="拓展的对象功能"><a href="#拓展的对象功能" class="headerlink" title="拓展的对象功能"></a>拓展的对象功能</h3><p>对象初始化简写</p><p>ES5我们对于对象都是以键值对的形式书写，是有可能出现价值对重名的。例如：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>键值对重名，ES6可以简写如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">,</span>            age        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ES6 同样改进了为对象字面量方法赋值的语法。ES5为对象添加方法：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>ES6通过省略冒号与 function 关键字，将这个语法变得更简洁</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>ES6 对象提供了Object.assign()这个方法来实现浅复制。</strong><br>Object.assign()可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{ }</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objA<span class="token punctuation">,</span> objB<span class="token punctuation">)</span></code></pre><h3 id="更方便的数据访问–解构"><a href="#更方便的数据访问–解构" class="headerlink" title="更方便的数据访问–解构"></a>更方便的数据访问–解构</h3><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p><p>ES5我们提取对象中的信息形式如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> people<span class="token punctuation">.</span>name    <span class="token keyword">const</span> age <span class="token operator">=</span> people<span class="token punctuation">.</span>age    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">' --- '</span> <span class="token operator">+</span> age<span class="token punctuation">)</span></code></pre><p>是不是觉得很熟悉，没错，在ES6之前我们就是这样获取对象信息的，一个一个获取。<strong>现在，解构能让我们从对象或者数组里取出数据存为变量，</strong>例如</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> people    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> color    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'red'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'blue'</span></code></pre><h3 id="Spread-Operator-展开运算符"><a href="#Spread-Operator-展开运算符" class="headerlink" title="Spread Operator 展开运算符"></a>Spread Operator 展开运算符</h3><p>ES6中另外一个好玩的特性就是Spread Operator 也是三个点儿…接下来就展示一下它的用途。</p><p><strong>组装对象或者数组</strong></p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> colorful <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>color<span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorful<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[red, yellow, green, pink]</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> alp <span class="token operator">=</span> <span class="token punctuation">{</span> fist<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> second<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> alphabets <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>alp<span class="token punctuation">,</span> third<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphabets<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{ "fist": "a", "second": "b", "third": "c"</span><span class="token punctuation">}</span></code></pre><p>有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> number    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2,3,4,5</span>    <span class="token comment" spellcheck="true">//对象</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> <span class="token string">'lux'</span><span class="token punctuation">,</span>        gender<span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token string">'peking'</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> user    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{"address": "peking", "age": 19, "gender": "female"</span><span class="token punctuation">}</span></code></pre><p>对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        c<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        d<span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>second <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2, c: 3, d: 4 }</span></code></pre><h3 id="import-和-export"><a href="#import-和-export" class="headerlink" title="import 和 export"></a>import 和 export</h3><p><strong>import导入模块、export导出模块</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全部导入</span><span class="token keyword">import</span> people <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">//有一种特殊情况，即允许你将整个模块当作单一对象进行导入</span><span class="token comment" spellcheck="true">//该模块的所有导出都会作为对象的属性存在</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> example <span class="token keyword">from</span> <span class="token string">"./example.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>age<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入部分</span><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./example'</span><span class="token comment" spellcheck="true">// 导出默认, 有且只有一个默认</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token comment" spellcheck="true">// 部分导出</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">App</span> extend Component <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以前有人问我，<strong>导入的时候有没有大括号的区别是什么。</strong>下面是我在工作中的总结：</p><ul><li>当用export default people导出时，就用 import people 导入（不带大括号）</li><li>一个文件里，有且只能有一个export default。但可以有多个export。</li><li>当用export name 时，就用import { name }导入（记得带上大括号）</li><li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li><li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><strong>在promise之前代码过多的回调或者嵌套，可读性差、耦合度高、扩展性低。通过Promise机制，扁平化的代码机构，大大提高了代码可读性；</strong></p><p><strong>用同步编程的方式来编写异步代码，保存线性的代码逻辑，极大的降低了代码耦合性而提高了程序的可扩展性。</strong></p><p>说白了就是用同步的方式去写异步代码。</p><p>发起异步请求</p><pre class=" language-js"><code class="language-js">   <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/todos'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>今天看到一篇关于面试题的很有意思。</p><pre class=" language-js"><code class="language-js"> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">==</span> <span class="token number">9999</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p><strong>生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，</strong>最直观的表现就是<strong>比普通的function多了个星号*</strong>，在其函数体内可以使用yield关键字,有意思的是函数会在每个yield后暂停。</p><p>这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。</p><p>OK。说说迭代器。当你调用一个generator时，它将返回一个迭代器对象。这个迭代器对象拥有一个叫做next的方法来帮助你重启generator函数并得到下一个值。next方法不仅返回值，它返回的对象具有两个属性：done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值。继续用刚刚取票的例子，每张排队号就是这里的value，打印票的纸是否用完就这是这里的done。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 生成器</span>    <span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span>    <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>那生成器和迭代器又有什么用处呢？</p><p>围绕着生成器的许多兴奋点都与异步编程直接相关。<strong>异步调用对于我们来说是很困难的事，我们的函数并不会等待异步调用完再执行，</strong>你可能会想到用回调函数，（当然还有其他方案比如Promise比如Async/await）。</p><p><strong>生成器可以让我们的代码进行等待。</strong>就不用嵌套的回调函数。使用generator可以确保当异步调用在我们的generator函数运行一下行代码之前完成时暂停函数的执行。</p><p>那么问题来了，<strong>咱们也不能手动一直调用next()方法，</strong>你需要一个能够调用生成器并启动迭代器的方法。就像这样子的</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>taskDef<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//taskDef即一个生成器函数</span>        <span class="token comment" spellcheck="true">// 创建迭代器，让它在别处可用</span>        <span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token function">taskDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动任务</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归使用函数来保持对 next() 的调用</span>        <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还有更多要做的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 开始处理过程</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><br>生成器与迭代器最有趣、最令人激动的方面，或许就是可创建外观清晰的异步操作代码。你不必到处使用回调函数，而是可以建立貌似同步的代码，但实际上却使用 yield 来等待异步操作结束。<br></blockquote> <h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ES6的特性远不止于此，但对于我们日常的开发开说。这已经是够够的了。还有很多有意思的方法。比如findIndex…等等。包括用set来完成面试题常客数组去重问题。我和我的小伙伴们都惊呆了!</p>]]></content>
      
      
      <categories>
          
          <category> 软件语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/24/hello-world/"/>
      <url>/2019/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Welcome-to-here"><a href="#Welcome-to-here" class="headerlink" title="Welcome to here!"></a>Welcome to here!</h2><h4 id="This-is-my-first-article-Some-information-about-website"><a href="#This-is-my-first-article-Some-information-about-website" class="headerlink" title="This is my first article. Some information about website:"></a>This is my first article. Some information about website:</h4><p>1、How was it made? (它是怎么来的？)</p><pre class=" language-bash"><code class="language-bash">大约在2016年的夏天，我第一次接触到了C语言，此后就对这种神奇的事物产生了好奇，之后我开始对网络上各种美丽的网页感兴趣，随后我就购买了这个域名并借用了别人的样式，做出了第一个博客，现在这个也是借用了别人的架构，不得不说这架构的原主人很棒。</code></pre><p>2、Why did you make it? (要它做什么？)</p><pre class=" language-bash"><code class="language-bash">一方面可以当做业余兴趣，还可以提高编程能力。一方面可以用它来记录我的生活和一些知识，这是不是很酷？我并不是计算机专业的，所以这里不会有很多与代码相关的文章，对了，我还对人工智能感兴趣。</code></pre><p>3、Waht would you do for that? (你将怎么作?)</p><pre class=" language-bash"><code class="language-bash">我不会时刻的挂念它，我有我的生活，我并不是计算机专业，这项技术对我来说并不会帮助我什么，我在我的工作之余，兴趣之余，会时不时的记录一些我的所见所学，记录我的成长。当然，也有可能我会把它忘记很长一段时间。但是，只要我学会了新的技能，我一定会再记起它来。</code></pre><p>4、Will it always exist? (他会一直存在吗？)</p><pre class=" language-bash"><code class="language-bash">会的！我会一直记住我的初心。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk评论配置</title>
      <link href="/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/23/Gitalk%E8%AF%84%E8%AE%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>对于新建的网站没有一个好的评论系统，会对体验度打大大的折扣，虽然之前出现过许多好用的评论插件，但是都因为一些问题不是关闭就是需要翻墙，今天我给大家推荐Gitalk，基于Github原生态的项目。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Gitalk是一个Github上的一个利用lssues作为评论的项目。这个是项目仓库的地址<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a>.<br>下载两个文件gitalk.min.js和gitalk.css到自己的本地项目目录。<br>把下列代码复制到需要的地方<br><img src="/postImg/2-2.jpg"><br>上面也看到了有几个数据需要填，比较重要的有clientID和clientSecret，怎么得到这两个数据呢，我们需要新建application得到。</p><h2 id="新建OAuth"><a href="#新建OAuth" class="headerlink" title="新建OAuth"></a>新建OAuth</h2><p>开始新建OAuth application：地址：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a><br><img src="/postImg/2-3.jpg"><br>完成后会出现clientID和clientSecret的串码，复制串码到上面对应的位置，还有就是repo是一个仓库名字，不需要完整路径。还有就是Gitalk是根据id来创建lssues,所以想要不同，id也要不一样，也可以填相对路径indow.location.pathname，完成后保存文件。<br>保存后进入首次进入页面后会出现使用Github登录，随后出现初始化lssues，点击一次即可，不然会创建多个lssues,随后刷新就完成了。<br><img src="/postImg/2-4.jpg"></p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1、如果出现error：not-found：说明你的repo仓库名填写有问题"><a href="#1、如果出现error：not-found：说明你的repo仓库名填写有问题" class="headerlink" title="1、如果出现error：not found：说明你的repo仓库名填写有问题"></a>1、如果出现error：not found：说明你的repo仓库名填写有问题</h3><h3 id="2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超"><a href="#2、出现Error-Validation-Failed：具体原因是由于-Github-限制-labal-长度不能超" class="headerlink" title="2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超"></a>2、出现Error: Validation Failed：具体原因是由于 Github 限制 labal 长度不能超</h3>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建网站</title>
      <link href="/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2019/01/21/hexo_github%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo?"></a>什么是Hexo?</h2><p>hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在Github和Heroku上，Hexo也是github的开源项目</p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><h3 id="1、获得域名"><a href="#1、获得域名" class="headerlink" title="1、获得域名"></a>1、获得域名</h3><p>而且Github托管网站，完全不需要备案，推荐阿里云注册。</p><h3 id="2、GitHub创建个人仓库"><a href="#2、GitHub创建个人仓库" class="headerlink" title="2、GitHub创建个人仓库"></a>2、GitHub创建个人仓库</h3><p>登录Github，如果没有到github.com注册账号,然后新建一个仓库，名字为<strong><strong>____</strong></strong>.github.io,例如我的叫hexored.github.io</p><h3 id="3、安装Git"><a href="#3、安装Git" class="headerlink" title="3、安装Git"></a>3、安装Git</h3><p>什么是Git？简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到Github上。安装到随意目录下即可。安装完成后鼠标右键会出现Git Bash选项，如果没有你需要手动配置，步骤如下：<br><strong>1、通过在“运行”中输入‘regedit’，打开注册表。</strong><br><strong>2、找到[HKEY_CLASSES_ROOT\Directory\Background]。</strong><br><strong>3、在[Background]下如果没有[shell],则右键-新建项[shell]。</strong><br><strong>4、在[shell]下右键-新建项[open in Git],其值为“Git Bash Here”,此为右键菜单显示名称。</strong><br><strong>5、在[shell]下右键-新建-字符串值[Icon],双击编辑，其值为“D:...\Git\mingw64\share\git\git-for-windows.ico”。此为菜单加图标。</strong><br><strong>6、在[open in git]下右键-新建-项[command],其值为 “D:\Program Files\Git\git-bash.exe”</strong><br>这是为了以后管理项目方便，<strong>配置好后可以在任意文件夹下右键出Git Bash。</strong><br>安装成功后鼠标双击打开Git Bash,会出来命令行，然后在Git命令行中<br>设置user.name和user.email配置信息：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的Github用户名git config --global user.email "</span>你的Github注册邮箱"</code></pre><p>生成ssh密钥文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> keygen -t rsa -C <span class="token string">"你的Github注册邮箱"</span></code></pre><p>然后一直回车后会生成.ssh的文件夹中的id_rsa.pub密钥，将其中的内容全部复制，打开Github-&gt;Settings-&gt;Keys页面，新建new SSH Key。title为标题可随意填，将复制的内容粘贴进去，最后点击Add SSH key保存。最后再回到Git Bash中检测Github公钥设置是否成功，在Git命令行中输入ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>,如出现语句中出现successfully字样就表示成功</p><h3 id="4、安装Node-js"><a href="#4、安装Node-js" class="headerlink" title="4、安装Node.js"></a>4、安装Node.js</h3><p>注意安装node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入node -v：出现v6.10.2版本号就是成功了，接着输入npm -v检测。</p><h3 id="5、安装hexo"><a href="#5、安装hexo" class="headerlink" title="5、安装hexo"></a>5、安装hexo</h3><p>hexo就是我们的个人博客网站的框架，这里需要自己在电脑上创建一个文件夹，在此文件夹中进入命令行，安装shift键，右击鼠标点击命令行（open command window here）这次打开的是window命令行，你也可以先进命令行在cd进入相应的文件夹。<br>使用npm命令安装Hexo，输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>完成hexo的安装后就可以对hexo进行初始化操作了。</p><h3 id="6、初始化"><a href="#6、初始化" class="headerlink" title="6、初始化"></a>6、初始化</h3><p>打开Git Bash，输入初始化命令：</p><pre class=" language-bash"><code class="language-bash">hexo init blog</code></pre><p>初始化完成后你会在文件夹里面看到出现了许多文件，以后操作都会在此文件夹下进行，在此文件夹下任意地方打开Git Bash。我们来网站的本地检验预览。</p><pre class=" language-bash"><code class="language-bash">hexo new hello_world      //新建hello_world文章hexo g                    //生成hexo s                    //本地预览</code></pre><p>输入完后打开浏览器输入地址：localhost:4000，就可以看到本地浏览模式下的网站雏形。<br>想要把相应的文件部署到Github我们还需要进行网站的推送。</p><h3 id="7、推送网站"><a href="#7、推送网站" class="headerlink" title="7、推送网站"></a>7、推送网站</h3><p><strong>在文件的根目录下，_config.yml为站点配置文件。themes文件夹中也有一个_config.yml为主题配置文件。</strong><br>1、我们<strong>打开站点文件</strong>，翻到最后修改为：<br>deploy:<br>  type: git<br>  repo:  github仓库的完整路径加上.git<br>  （例如我的<a href="https://github.com/mengyuan000/hexored.github.io.git）" target="_blank" rel="noopener">https://github.com/mengyuan000/hexored.github.io.git）</a><br>  branch: master<br>2、<strong>打开根目录下的source，新建文件名为CNAME，保存成所有文件形式，在里面保存你的域名，建议不带www</strong><br>保存后，安装Git部署插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>完成后在Git Bash中输入命令：</p><pre class=" language-bash"><code class="language-bash">hexo c     //清理hexo g     //生成hexo d     //部署</code></pre><p>此时进入Github项目仓库你会发现文件已经部署上去了。为了用域名进行访问，你就需要对域名进行绑定。</p><h3 id="8、绑定域名："><a href="#8、绑定域名：" class="headerlink" title="8、绑定域名："></a>8、绑定域名：</h3><p>进入购买域名后的管理台，找到域名，进入解析，对照下图新添加三个项<br><img src="/postImg/1-2.jpg"><br>151.101.73.147为Github的地址，你可以自己ping你的xxxx.github.io的ip地址。首次解析可能需要等几分钟才好，如果你访问不了自己的网站，你就等20分钟后再试一下，如若不行就是你配置的问题。然后登录Github,进入之前创建的仓库，点击settings中GitHub Pages项中source改为master branch,在出来的Custom domain中填入你的域名。点击save保存。这时，你可以用域名访问网站了。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在之后你也可以更换主题，在此网站<a href="https://hexo.io/themes/的开发者Github上下载" target="_blank" rel="noopener">https://hexo.io/themes/的开发者Github上下载</a></p><pre class=" language-bash"><code class="language-bash">clone 路径 保存目录（起始为当前文件）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html基础语法</title>
      <link href="/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/08/Html%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Html是一种超文本标记语言( hypertext markup language )，超链接（<strong>实现页面跳转</strong>）；</p><h3 id="html标准结构："><a href="#html标准结构：" class="headerlink" title="html标准结构："></a>html标准结构：</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span> //声明文档类型，由渲染引擎解析<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  //根标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  //头部标签，里面的内容是给浏览器/搜索引擎看的        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> //标题标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  //主体标签，给用户、浏览者看    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>html和htm是一样的，后缀名不能决定文件格式，只能决定文件打开方式；<br><strong>html标签分类：</strong></p><ul><li>单标签 <code>&lt;!doctype html&gt;</code></li><li>双标签<code>&lt;html&gt;&lt;/html&gt;</code>、<code>&lt;body&gt;&lt;/body&gt;</code>、<code>&lt;title&gt;&lt;/title&gt;</code></li></ul><p><strong>html标签关系：</strong></p><ul><li>包含（嵌套）：<code>&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;head&gt;</code>父子关系</li><li>并列关系：<code>&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code>兄弟姐妹关系</li></ul><h3 id="简单标签"><a href="#简单标签" class="headerlink" title="简单标签"></a>简单标签</h3><h4 id="1、单标签"><a href="#1、单标签" class="headerlink" title="1、单标签"></a>1、单标签</h4><ul><li>注释标签：ctrl + /</li><li>换行标签：<code>&lt;br/&gt;</code>在html5中可以省略/</li><li>水平线标签：<code>&lt;hr /&gt;</code></li></ul><h4 id="2、双标签"><a href="#2、双标签" class="headerlink" title="2、双标签"></a>2、双标签</h4><ul><li>标题标签<code>&lt;h1&gt;&lt;/h1&gt;</code>取值是 h1-h6，一个页面中只能有一个h1。</li><li>段落标签：<code>&lt;p&gt;段落内容&lt;/p&gt;</code>特点：上下自动生成空白行；<code>&lt;br/&gt;</code>换行不会生成空白行；</li><li>文本标签：<code>&lt;font size=&quot;16&quot; color=&quot;red&quot; &gt;文本内容&lt;/font&gt;</code>早期做网站时候使用；</li></ul><h4 id="3、文本格式化标签："><a href="#3、文本格式化标签：" class="headerlink" title="3、文本格式化标签："></a>3、文本格式化标签：</h4><ul><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt;</code>,<code>&lt;b&gt;&lt;/b&gt;</code>,作中建议使用strong；</li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt;</code>，<code>&lt;i&gt;&lt;/i&gt;</code>,工作中建议使用em；</li><li>删除线：<code>&lt;del&gt;&lt;/del&gt;</code>,<code>&lt;s&gt;&lt;s/&gt;</code>，工作中建议使用del；</li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt;</code>,<code>&lt;u&gt;&lt;/u&gt;</code>,工作中建议使用ins。</li><li>建议使用的都是更具语义化，可读性更强。</li></ul><h4 id="4、图片标签"><a href="#4、图片标签" class="headerlink" title="4、图片标签"></a>4、图片标签</h4><p><code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;提示文本&quot; width=&quot;&quot; height=&quot;&quot;/&gt;</code></p><ul><li><strong>src: </strong>图片的来源，必写属性；</li><li>当鼠标放在图片上时显示 <strong>title</strong> 的内容；</li><li>当图片加载失败时显示 <strong>alt</strong> 的内容;</li><li>如果不设置图片宽高,显示图片默认大小，如果只设置其中一个，会进行等比例缩放，如果两个都设置就会按照设置的大小进行展示。</li></ul><h4 id="5、a标签-超链接"><a href="#5、a标签-超链接" class="headerlink" title="5、a标签(超链接)"></a>5、a标签(超链接)</h4><p><code>&lt;a href=&quot;&quot; title=&quot;&quot; target=&quot;&quot;&gt;登录&lt;/a&gt;</code></p><ul><li><strong>href </strong>存放目标页面的<strong>url</strong>，为必写属性；</li><li>鼠标放在超链接上显示 <strong>title</strong> 的内容；</li><li><strong>target</strong>为页面打开的方式，默认在原页面打开<strong>_self</strong>，如果设置值为 </li><li><strong>_black</strong>，就会打开一个新的页面进行展示。</li></ul><p><strong>锚链接</strong></p><ul><li>首先定义一个锚点：在标签中添加一个id属性；</li><li>超链接到锚点:<code>&lt;a href=&quot;#id属性名&quot;&gt;跳转&lt;/a&gt;</code></li></ul><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p><strong>相对路径：</strong>相对于文件自身出发</p><ul><li>文件(html文档)和图片在同一个目录(文件夹)，直接写文件名；</li><li>如果图片在下一级目录里，src就为文件夹名+/+图片名称；</li><li>如果图片在上一级目录里，scr就是 ../ + 图片名</li></ul><p><strong>绝对路径</strong></p><ul><li>电脑上绝对路径：从电脑盘符开始，如F:\Documents\学习\前端学习\mage.png；</li></ul><h3 id="空链、压缩包下载、超链接的优化写法、特殊字符："><a href="#空链、压缩包下载、超链接的优化写法、特殊字符：" class="headerlink" title="空链、压缩包下载、超链接的优化写法、特殊字符："></a>空链、压缩包下载、超链接的优化写法、特殊字符：</h3><p><strong>空链：</strong>当不知道跳转链接时候使用：<code>&lt;a href=&quot;#&quot;&gt;空链&lt;/a&gt;</code></p><p><strong>压缩包下载</strong>，<code>&lt;a href=&quot;xxx/mage.rar&quot;&gt;压缩包&lt;/a&gt;</code>，了解就行，工作中一般不会这样使用。</p><p><strong>超链接的优化写法， 让页面中所有的标签在点击时都打开新窗口：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p><strong>特殊字符：</strong></p><blockquote><p><code>空格</code>  空格符      <code>&amp;nbsp</code><br><code>&lt;</code>    小于号      <code>&amp;lt</code><br><code>&gt;</code>    大于号       <code>&amp;gt</code><br><code>&amp;</code>    和号         <code>&amp;amp</code><br><code>￥</code>   人民币       <code>&amp;yen</code><br><code>©</code>    版权         <code>&amp;copy</code><br><code>®</code>    注册商标     <code>&amp;reg</code><br><code>°</code>    摄氏度       <code>&amp;deg</code><br><code>±</code>   正负号       <code>&amp;plumn</code><br><code>×</code>   乘号         <code>&amp;times</code><br><code>÷</code>    除号         <code>&amp;divide</code><br><code>²</code>    平方（上标2） <code>&amp;sup2</code><br><code>³</code>   立方（上标3） <code>&amp;sup3</code></p></blockquote><h3 id="中级标签"><a href="#中级标签" class="headerlink" title="中级标签"></a>中级标签</h3><h4 id="1、列表标签"><a href="#1、列表标签" class="headerlink" title="1、列表标签"></a>1、列表标签</h4><p><strong>无序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>type可以取三个值，square样式为小方块、circle样式为空心小圆点、disc为实心小圆点（默认样式）。</p><p><strong>有序列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>type可以更改标号样式，type可取的值为：1、a、A、i、I等，start设置从哪一个值开始依次往后排序。</p><p><strong>定义列表</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>小标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>解释标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><h4 id="2、音乐标签"><a href="#2、音乐标签" class="headerlink" title="2、音乐标签"></a>2、音乐标签</h4><ul><li><code>&lt;embed src=&quot;&quot; hidden=&quot;true&quot; /&gt;</code>，hidden设置为true时，隐藏音乐播放器，比audio标签多一块黑色的背景。</li></ul><h3 id="跑马灯：页面自动滚动效果"><a href="#跑马灯：页面自动滚动效果" class="headerlink" title="跑马灯：页面自动滚动效果"></a>跑马灯：页面自动滚动效果</h3><p><code>&lt;marquee height=&quot;80&quot; weight=&quot;200&quot; bgcolor=&quot;red&quot; behavior=&quot;alternate&quot; direction=&quot;down&quot;&gt;...&lt;/marquee&gt;</code><br>中间的内容可以是文字、图片，也可以是由程序生成的文字或图片；</p><ul><li>behavior设置滚动的方式，alternate表示在两端之间来回滚动，scroll表示一端滚动到   另一端（会重复），slide表示由一端滚动到另一端（不会重复）；</li><li>direction设置滚动方向，down表示向下滚动，left向左，right向右，up向上；</li><li>loop表示滚动的次数，-1时无限滚动；</li><li>scrollamount设置滚动速度，值越大滚动速度越快；</li></ul><h3 id="几种HTML结构的快速搭建"><a href="#几种HTML结构的快速搭建" class="headerlink" title="几种HTML结构的快速搭建"></a>几种HTML结构的快速搭建</h3><ul><li>html:xt + tab，过渡结构；</li><li>html:xs + tab，严格结构；</li><li>! + tab，html5标签结构</li></ul><h3 id="高级标签"><a href="#高级标签" class="headerlink" title="高级标签"></a>高级标签</h3><h4 id="1、meta标签"><a href="#1、meta标签" class="headerlink" title="1、meta标签"></a>1、meta标签</h4><ul><li>编码格式，在meta标签里面设置charset，英语用ascll、ansi；日文、韩文用Unicode；中文的用gbk、gbk2312；台湾big5（繁体字符）；utf-8支持180到200个国家语言，所以用utf-8基本能解析所有国家语言<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>；</li><li>关键字：给搜索引擎看，主要用于SEO，<code>&lt;meta name=&quot;keywords&quot; content=&quot;阳光,帅气,有担当,进步&quot;&gt;</code>(逗号使用英语格式的)；</li><li>网页描述：在搜索的时候会出现的描述：<code>&lt;meta name=&quot;description&quot; content=&quot;江苏是一个好地方，有山有人妹子水灵&quot;&gt;</code>；</li><li>网页重定向：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;http://baidu.com&quot;&gt;</code>过5秒之后跳转到设定的页面;</li><li>告诉搜索引擎站点的作者：<code>&lt;meta name=&quot;author&quot; content=&quot;姓名&quot;&gt;</code>（不常用）；</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;all/none/index/noindex/follow/nofollow&quot;&gt;</code>（不常用，了解）：<ul><li>all：文件将被检索，且页面上的链接可以被查询；</li><li>none：文件将不被检索，且页面上的链接不可以被查询；</li><li>index：文件将被检索；</li><li>noindex：文件将不被检索，但页面上的链接可以被查询；</li><li>follow：页面上的链接可以被查询；</li><li>nofollow：文件将不被检索，页面上的链接可以被查询。</li></ul></li></ul><h4 id="2、link标签"><a href="#2、link标签" class="headerlink" title="2、link标签"></a>2、link标签</h4><ul><li>链接外部样式表文件<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;&gt;</code>;</li><li>设置网站icon：<code>&lt;meta rel=&quot;icon&quot; href=&quot;xxx.png&quot;&gt;</code></li></ul><h4 id="3、表格标签"><a href="#3、表格标签" class="headerlink" title="3、表格标签"></a>3、表格标签</h4><ul><li>展示数据，是对网页重构（css+div）的一个有益补充 ；</li><li>属性：<ul><li>边框属性：border；</li><li>表格大小会根据内容自动进行填充，也可以自己设定；</li><li>单元格之前的距离：cellspacing，默认值为2；</li><li>内容和边框的距离:cellpadding；</li><li>对齐方式：align，有三个值：left/right/center,如果给表格设为center，表格居中；如果给tr设置center，一行的内容居中；如果给td设置center，则某一列的内容居中，优先级：td &gt; tr &gt; table<br>两行三列表格：创建表格可以用快捷方式<code>table&gt;tr*2&gt;td*3</code></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //表格  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     //行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   //列      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>表格完整结构：表格拥有完整结构会对SEO更友好，但是没有的话也不要求，在thead等里面设置属性不管用，需要在对应的tr或者td中设置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>给表格添加标题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>单元格合并，同一行的单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>同一列单元格合并：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span>“2”</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>设置列标题：th,会将内容加粗，居中显示</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>表格名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>一月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>二月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>三月份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张珊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>垂直方向对齐方式：valign=”top/middle/bottom”;<br>细线表格：设置border=”1”时，其实单元格之间的线的宽度是2。设置细线表格的思路：设置表格背景色，然后再设置cellspacing=”1”。</p><h4 id="4、表单标签"><a href="#4、表单标签" class="headerlink" title="4、表单标签"></a>4、表单标签</h4><ul><li>输入信息，收集信息；</li><li>表达组成：提示信息、表单控件（输入框）、表单域；</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>action:处理信息；</li><li>method：有两个值可取，get和post。get：通过地址栏提供（传输）信息，安全性差；post：通过xxx来处理信息，安全性相对较高。</li></ul><h4 id="5、文本输入框"><a href="#5、文本输入框" class="headerlink" title="5、文本输入框"></a>5、文本输入框</h4><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; readonly=&quot;readonly&quot; name=&quot;username&quot; value=&quot;jiangjiang&quot; placeholder=&quot;请输入用户名&quot;&gt;</code></p><ul><li>maxlength：设置输入的最大字符长度；</li><li>readonly：设置输入框为只读状态；</li><li>value：设置默认值；</li><li>placeholder：提示用户进行操作</li></ul><p><code>&lt;input type=&quot;text&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>disable：输入框没有激活；</li><li>name：给输入框设置名字，以便进行区分；</li></ul><p><code>&lt;input type=&quot;password&quot; maxlength=&quot;8&quot; disable=&quot;disable&quot; name=&quot;username&quot;&gt;</code></p><ul><li>密码输入框：输入的信息会变成暗文，文本输入框的所有属性对密码输入框都有效；</li></ul><p><strong>单选框</strong></p><p><code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot;&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;女</code></p><ul><li>一组单选按钮必须要设置同样的name，否则单选无效；</li><li>通过checked来设置默认选中项；</li></ul><p><strong>多选框</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>喝酒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>抽烟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>烫头发</code></pre><p><strong>多行文本框</strong><br><code>&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code></p><pre><code>- cols：控制输入字符的长度；- rows：控制输入的行数；</code></pre><p><strong>文件上传控件</strong><br><code>&lt;input type=&quot;file&quot;&gt;</code><br><strong>按钮</strong></p><ul><li>提交按钮：可以实现信息提交<code>&lt;input type=&quot;submit&quot;&gt;</code>;</li><li>普通按钮：不能提交，通常配合js使用<code>&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;</code>；</li><li>图片按钮：可实现信息提交功能<code>&lt;input type=&quot;image&quot; src=&quot;xxx.jpg&quot;&gt;</code>;</li><li>重置按钮：将信息重置到默认状态<code>&lt;input type=&quot;reset&quot;&gt;</code></li></ul><p><strong>将表单信息分组</strong></p><p>将表单内一组的内容放到<code>&lt;field&gt;&lt;/field&gt;</code>中，表单名称放到<code>&lt;legend&gt;&lt;/legend&gt;</code>中</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>个人信息提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><strong>表单的其它控件</strong></p><ul><li>网址输入框：<code>&lt;input type=&quot;url&quot;&gt;</code>，会要求输入正确的网址格式，但是空也可以提- - 交，以后会用js进行判断；</li><li>日期控件：<code>&lt;input type=&quot;date&quot;&gt;</code>；</li><li>时间控件：<code>&lt;input type=&quot;time&quot;&gt;</code>；</li><li>邮件控件：<code>&lt;input type=&quot;email&quot;&gt;</code>,要求输入正确的邮件格式，但是空也可以提交；</li><li>数字控件：<code>&lt;input type=&quot;number&quot; step=&quot;2&quot;&gt;</code>，有一个上下的小三角，可以步进，每次调整的值的大小为2；</li><li>滑块控件：<code>&lt;input type=&quot;range&quot; step=20&gt;</code></li></ul><p><strong>下拉列表</strong></p><p>普通下拉列表</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下拉列表选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre><code>- multiple:设置多选；- selected:设置默认选中项，如果不设置，默认选择第一个选项；</code></pre><p><strong>分组下拉列表：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>江苏<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>苏州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>无锡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>常州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浙江<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>杭州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>温州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>绍兴<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>概述详细信息标签</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">></span></span>    发动机卡拉的交罚款了打飞机考虑到九分裤了打手机发开发阶段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><h3 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h3><p>标签语义化概念：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）；<br>标签语义化意义：</p><ul><li>网页结构合理；</li><li>有利于SEO和搜索引擎简历良好沟通，有了良好的结构和语义，你的网页内容自然容易被搜索引擎抓取；</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）；</li><li>便于团队开发和维护。</li></ul><p>好的语义化的网站标准：去掉样式表文件之后，结构依然很清晰。</p><p>标签语义化的注意事项：</p><ul><li>尽可能少的使用没有语义的标签div和span；</li><li>在语义不明显时，既可以使用div或者p时，尽量使用p，因为p在默认情况下有上下间距，对兼容特殊终端有利；</li><li>不要使用纯样式标签，如：font、b、i、s、u等，改用css样式；</li><li>需要强调的文本，可以包含在strong或者em标签中，strong默认样式是加粗（不要用b），em是斜体（不用i）；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
